
HandOn_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee58  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800ef98  0800ef98  0001ef98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0ec  0800f0ec  0001f0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0f4  0800f0f4  0001f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f0f8  0800f0f8  0001f0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000017c  20000004  0800f0fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000180  0800f278  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  2000021c  0800f311  0002021c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000264  0800f356  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000ae  20000278  0800f367  00020278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003ac  20000328  0800f415  00020328  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006d4  0800f415  000206d4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020326  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00056f80  00000000  00000000  00020356  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007d3a  00000000  00000000  000772d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003ec8  00000000  00000000  0007f010  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003b50  00000000  00000000  00082ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0001852d  00000000  00000000  00086a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00017ede  00000000  00000000  0009ef55  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007c  00000000  00000000  000b6e33  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010974  00000000  00000000  000b6eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000328 	.word	0x20000328
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ef80 	.word	0x0800ef80

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000032c 	.word	0x2000032c
 800017c:	0800ef80 	.word	0x0800ef80

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b97a 	b.w	800049c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	468c      	mov	ip, r1
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	9e08      	ldr	r6, [sp, #32]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d151      	bne.n	8000274 <__udivmoddi4+0xb4>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4617      	mov	r7, r2
 80001d4:	d96d      	bls.n	80002b2 <__udivmoddi4+0xf2>
 80001d6:	fab2 fe82 	clz	lr, r2
 80001da:	f1be 0f00 	cmp.w	lr, #0
 80001de:	d00b      	beq.n	80001f8 <__udivmoddi4+0x38>
 80001e0:	f1ce 0c20 	rsb	ip, lr, #32
 80001e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001fc:	0c25      	lsrs	r5, r4, #16
 80001fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000202:	fa1f f987 	uxth.w	r9, r7
 8000206:	fb0a cc18 	mls	ip, sl, r8, ip
 800020a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800020e:	fb08 f309 	mul.w	r3, r8, r9
 8000212:	42ab      	cmp	r3, r5
 8000214:	d90a      	bls.n	800022c <__udivmoddi4+0x6c>
 8000216:	19ed      	adds	r5, r5, r7
 8000218:	f108 32ff 	add.w	r2, r8, #4294967295
 800021c:	f080 8123 	bcs.w	8000466 <__udivmoddi4+0x2a6>
 8000220:	42ab      	cmp	r3, r5
 8000222:	f240 8120 	bls.w	8000466 <__udivmoddi4+0x2a6>
 8000226:	f1a8 0802 	sub.w	r8, r8, #2
 800022a:	443d      	add	r5, r7
 800022c:	1aed      	subs	r5, r5, r3
 800022e:	b2a4      	uxth	r4, r4
 8000230:	fbb5 f0fa 	udiv	r0, r5, sl
 8000234:	fb0a 5510 	mls	r5, sl, r0, r5
 8000238:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800023c:	fb00 f909 	mul.w	r9, r0, r9
 8000240:	45a1      	cmp	r9, r4
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x98>
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	f100 33ff 	add.w	r3, r0, #4294967295
 800024a:	f080 810a 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800024e:	45a1      	cmp	r9, r4
 8000250:	f240 8107 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000254:	3802      	subs	r0, #2
 8000256:	443c      	add	r4, r7
 8000258:	eba4 0409 	sub.w	r4, r4, r9
 800025c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000260:	2100      	movs	r1, #0
 8000262:	2e00      	cmp	r6, #0
 8000264:	d061      	beq.n	800032a <__udivmoddi4+0x16a>
 8000266:	fa24 f40e 	lsr.w	r4, r4, lr
 800026a:	2300      	movs	r3, #0
 800026c:	6034      	str	r4, [r6, #0]
 800026e:	6073      	str	r3, [r6, #4]
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d907      	bls.n	8000288 <__udivmoddi4+0xc8>
 8000278:	2e00      	cmp	r6, #0
 800027a:	d054      	beq.n	8000326 <__udivmoddi4+0x166>
 800027c:	2100      	movs	r1, #0
 800027e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000282:	4608      	mov	r0, r1
 8000284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000288:	fab3 f183 	clz	r1, r3
 800028c:	2900      	cmp	r1, #0
 800028e:	f040 808e 	bne.w	80003ae <__udivmoddi4+0x1ee>
 8000292:	42ab      	cmp	r3, r5
 8000294:	d302      	bcc.n	800029c <__udivmoddi4+0xdc>
 8000296:	4282      	cmp	r2, r0
 8000298:	f200 80fa 	bhi.w	8000490 <__udivmoddi4+0x2d0>
 800029c:	1a84      	subs	r4, r0, r2
 800029e:	eb65 0503 	sbc.w	r5, r5, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	46ac      	mov	ip, r5
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d03f      	beq.n	800032a <__udivmoddi4+0x16a>
 80002aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b912      	cbnz	r2, 80002ba <__udivmoddi4+0xfa>
 80002b4:	2701      	movs	r7, #1
 80002b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ba:	fab7 fe87 	clz	lr, r7
 80002be:	f1be 0f00 	cmp.w	lr, #0
 80002c2:	d134      	bne.n	800032e <__udivmoddi4+0x16e>
 80002c4:	1beb      	subs	r3, r5, r7
 80002c6:	0c3a      	lsrs	r2, r7, #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80002d2:	0c25      	lsrs	r5, r4, #16
 80002d4:	fb02 3318 	mls	r3, r2, r8, r3
 80002d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002dc:	fb0c f308 	mul.w	r3, ip, r8
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x134>
 80002e4:	19ed      	adds	r5, r5, r7
 80002e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x132>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	f200 80d1 	bhi.w	8000494 <__udivmoddi4+0x2d4>
 80002f2:	4680      	mov	r8, r0
 80002f4:	1aed      	subs	r5, r5, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000300:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000304:	fb0c fc00 	mul.w	ip, ip, r0
 8000308:	45a4      	cmp	ip, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x15c>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x15a>
 8000314:	45a4      	cmp	ip, r4
 8000316:	f200 80b8 	bhi.w	800048a <__udivmoddi4+0x2ca>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000324:	e79d      	b.n	8000262 <__udivmoddi4+0xa2>
 8000326:	4631      	mov	r1, r6
 8000328:	4630      	mov	r0, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	f1ce 0420 	rsb	r4, lr, #32
 8000332:	fa05 f30e 	lsl.w	r3, r5, lr
 8000336:	fa07 f70e 	lsl.w	r7, r7, lr
 800033a:	fa20 f804 	lsr.w	r8, r0, r4
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa25 f404 	lsr.w	r4, r5, r4
 8000344:	ea48 0803 	orr.w	r8, r8, r3
 8000348:	fbb4 f1f2 	udiv	r1, r4, r2
 800034c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000350:	fb02 4411 	mls	r4, r2, r1, r4
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800035c:	fb01 f30c 	mul.w	r3, r1, ip
 8000360:	42ab      	cmp	r3, r5
 8000362:	fa00 f40e 	lsl.w	r4, r0, lr
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1bc>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f101 30ff 	add.w	r0, r1, #4294967295
 800036e:	f080 808a 	bcs.w	8000486 <__udivmoddi4+0x2c6>
 8000372:	42ab      	cmp	r3, r5
 8000374:	f240 8087 	bls.w	8000486 <__udivmoddi4+0x2c6>
 8000378:	3902      	subs	r1, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	fa1f f588 	uxth.w	r5, r8
 8000382:	fbb3 f0f2 	udiv	r0, r3, r2
 8000386:	fb02 3310 	mls	r3, r2, r0, r3
 800038a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038e:	fb00 f30c 	mul.w	r3, r0, ip
 8000392:	42ab      	cmp	r3, r5
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0x1e6>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f100 38ff 	add.w	r8, r0, #4294967295
 800039c:	d26f      	bcs.n	800047e <__udivmoddi4+0x2be>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d96d      	bls.n	800047e <__udivmoddi4+0x2be>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443d      	add	r5, r7
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	e78f      	b.n	80002ce <__udivmoddi4+0x10e>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	fa22 f807 	lsr.w	r8, r2, r7
 80003b6:	408b      	lsls	r3, r1
 80003b8:	fa05 f401 	lsl.w	r4, r5, r1
 80003bc:	ea48 0303 	orr.w	r3, r8, r3
 80003c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80003ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80003d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003da:	fa1f f883 	uxth.w	r8, r3
 80003de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003e2:	fb09 f408 	mul.w	r4, r9, r8
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x244>
 80003f2:	18ed      	adds	r5, r5, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	d243      	bcs.n	8000482 <__udivmoddi4+0x2c2>
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	d941      	bls.n	8000482 <__udivmoddi4+0x2c2>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	441d      	add	r5, r3
 8000404:	1b2d      	subs	r5, r5, r4
 8000406:	fa1f fe8e 	uxth.w	lr, lr
 800040a:	fbb5 f0fc 	udiv	r0, r5, ip
 800040e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000412:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000416:	fb00 f808 	mul.w	r8, r0, r8
 800041a:	45a0      	cmp	r8, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x26e>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f100 35ff 	add.w	r5, r0, #4294967295
 8000424:	d229      	bcs.n	800047a <__udivmoddi4+0x2ba>
 8000426:	45a0      	cmp	r8, r4
 8000428:	d927      	bls.n	800047a <__udivmoddi4+0x2ba>
 800042a:	3802      	subs	r0, #2
 800042c:	441c      	add	r4, r3
 800042e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000432:	eba4 0408 	sub.w	r4, r4, r8
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	454c      	cmp	r4, r9
 800043c:	46c6      	mov	lr, r8
 800043e:	464d      	mov	r5, r9
 8000440:	d315      	bcc.n	800046e <__udivmoddi4+0x2ae>
 8000442:	d012      	beq.n	800046a <__udivmoddi4+0x2aa>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x29c>
 8000446:	ebba 030e 	subs.w	r3, sl, lr
 800044a:	eb64 0405 	sbc.w	r4, r4, r5
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431f      	orrs	r7, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	6037      	str	r7, [r6, #0]
 800045a:	6074      	str	r4, [r6, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	4618      	mov	r0, r3
 8000464:	e6f8      	b.n	8000258 <__udivmoddi4+0x98>
 8000466:	4690      	mov	r8, r2
 8000468:	e6e0      	b.n	800022c <__udivmoddi4+0x6c>
 800046a:	45c2      	cmp	sl, r8
 800046c:	d2ea      	bcs.n	8000444 <__udivmoddi4+0x284>
 800046e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000472:	eb69 0503 	sbc.w	r5, r9, r3
 8000476:	3801      	subs	r0, #1
 8000478:	e7e4      	b.n	8000444 <__udivmoddi4+0x284>
 800047a:	4628      	mov	r0, r5
 800047c:	e7d7      	b.n	800042e <__udivmoddi4+0x26e>
 800047e:	4640      	mov	r0, r8
 8000480:	e791      	b.n	80003a6 <__udivmoddi4+0x1e6>
 8000482:	4681      	mov	r9, r0
 8000484:	e7be      	b.n	8000404 <__udivmoddi4+0x244>
 8000486:	4601      	mov	r1, r0
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1bc>
 800048a:	3802      	subs	r0, #2
 800048c:	443c      	add	r4, r7
 800048e:	e745      	b.n	800031c <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xe6>
 8000494:	f1a8 0802 	sub.w	r8, r8, #2
 8000498:	443d      	add	r5, r7
 800049a:	e72b      	b.n	80002f4 <__udivmoddi4+0x134>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <ENV_sensor_Init>:
extern uint16_t bUserButtonPushed;
AccStatusTypeDef accActInact;



void ENV_sensor_Init(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 6 */
	  /* Initialize sensors */
	  if ( IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY) == BSP_ERROR_NONE )
 80004a4:	2105      	movs	r1, #5
 80004a6:	2000      	movs	r0, #0
 80004a8:	f005 fe26 	bl	80060f8 <IKS01A2_ENV_SENSOR_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10b      	bne.n	80004ca <ENV_sensor_Init+0x2a>
	  {
	    //PRINTF("Humidity & Temperature sensor initialized\r\n");
	    SensorsEnabled |= TEMPERATURE_SENSOR;
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004bc:	6013      	str	r3, [r2, #0]
	    SensorsEnabled |= HUMIDITY_SENSOR;
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004c8:	6013      	str	r3, [r2, #0]
	  }
	  if ( IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE) == BSP_ERROR_NONE )
 80004ca:	2102      	movs	r1, #2
 80004cc:	2001      	movs	r0, #1
 80004ce:	f005 fe13 	bl	80060f8 <IKS01A2_ENV_SENSOR_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d105      	bne.n	80004e4 <ENV_sensor_Init+0x44>
	  {
	    //PRINTF("Pressure sensor initialized\r\n");
	    SensorsEnabled |= PRESSURE_SENSOR;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	4a01      	ldr	r2, [pc, #4]	; (80004e8 <ENV_sensor_Init+0x48>)
 80004e2:	6013      	str	r3, [r2, #0]
	  }
	  /* USER CODE BEGIN 6 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000344 	.word	0x20000344

080004ec <Acc_sensor_init>:
void Acc_sensor_init(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 7 */
/* --- Initialization --- */
if ( IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO ) == BSP_ERROR_NONE )
 80004f0:	2102      	movs	r1, #2
 80004f2:	2000      	movs	r0, #0
 80004f4:	f006 f836 	bl	8006564 <IKS01A2_MOTION_SENSOR_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <Acc_sensor_init+0x16>
  //if (!quiet) PRINTF("Accelerometer initialized\r\n");
}
else
{
  //PRINTF("Accelerometer NOT initialized\r\n");
  Error_Handler();
 80004fe:	f001 fa8b 	bl	8001a18 <Error_Handler>
}

/* --- Enabling --- */
if ( IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO) == BSP_ERROR_NONE )
 8000502:	2102      	movs	r1, #2
 8000504:	2000      	movs	r0, #0
 8000506:	f006 f923 	bl	8006750 <IKS01A2_MOTION_SENSOR_Enable>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d106      	bne.n	800051e <Acc_sensor_init+0x32>
{
  SensorsEnabled |= ACCELEROMETER_SENSOR;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <Acc_sensor_init+0x3c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <Acc_sensor_init+0x3c>)
 800051a:	6013      	str	r3, [r2, #0]
{
  //PRINTF("Accelerometer NOT enabled\r\n");
  Error_Handler();
}
/* USER CODE BEGIN 7 */
}
 800051c:	e001      	b.n	8000522 <Acc_sensor_init+0x36>
  Error_Handler();
 800051e:	f001 fa7b 	bl	8001a18 <Error_Handler>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000344 	.word	0x20000344

0800052c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	608b      	str	r3, [r1, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000558:	f000 f81c 	bl	8000594 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800055c:	4903      	ldr	r1, [pc, #12]	; (800056c <APPE_Init+0x18>)
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fe60 	bl	8001224 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000564:	f000 f820 	bl	80005a8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000568:	bf00      	nop
}
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000694 	.word	0x20000694

08000570 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN FD */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b10      	cmp	r3, #16
 800057e:	d000      	beq.n	8000582 <HAL_GPIO_EXTI_Callback+0x12>
  {
  case BUTTON_SW1_Pin:
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    break;
  default:
    break;
 8000580:	e004      	b.n	800058c <HAL_GPIO_EXTI_Callback+0x1c>
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8000582:	2100      	movs	r1, #0
 8000584:	2002      	movs	r0, #2
 8000586:	f00e fb8b 	bl	800eca0 <UTIL_SEQ_SetTask>
    break;
 800058a:	bf00      	nop
  }
  return;
 800058c:	bf00      	nop
}
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800059c:	f7ff ffc6 	bl	800052c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80005a0:	f00e fa42 	bl	800ea28 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80005a4:	bf00      	nop
}
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005ae:	f00d f8f1 	bl	800d794 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005b2:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <appe_Tl_Init+0x50>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	2020      	movs	r0, #32
 80005b8:	f00e fb52 	bl	800ec60 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <appe_Tl_Init+0x54>)
 80005be:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <appe_Tl_Init+0x58>)
 80005c2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <appe_Tl_Init+0x5c>)
 80005ca:	f00c ffad 	bl	800d528 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <appe_Tl_Init+0x60>)
 80005d0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <appe_Tl_Init+0x64>)
 80005d4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <appe_Tl_Init+0x68>)
 80005d8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005da:	f240 533c 	movw	r3, #1340	; 0x53c
 80005de:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00d f9e3 	bl	800d9b0 <TL_MM_Init>

  TL_Enable();
 80005ea:	f00d f8cd 	bl	800d788 <TL_Enable>

  return;
 80005ee:	bf00      	nop
}
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	0800d561 	.word	0x0800d561
 80005fc:	20030700 	.word	0x20030700
 8000600:	08000615 	.word	0x08000615
 8000604:	0800062b 	.word	0x0800062b
 8000608:	20030918 	.word	0x20030918
 800060c:	2003080c 	.word	0x2003080c
 8000610:	200301c4 	.word	0x200301c4

08000614 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800061e:	bf00      	nop
}
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000632:	f00d fa2d 	bl	800da90 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000636:	f00d fb61 	bl	800dcfc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800063a:	2100      	movs	r1, #0
 800063c:	2001      	movs	r0, #1
 800063e:	f00e fa05 	bl	800ea4c <UTIL_LPM_SetOffMode>
  return;
 8000642:	bf00      	nop
}
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800064e:	bf00      	nop
}
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	f00e fa1f 	bl	800eaa8 <UTIL_SEQ_Run>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800067a:	2100      	movs	r1, #0
 800067c:	2020      	movs	r0, #32
 800067e:	f00e fb0f 	bl	800eca0 <UTIL_SEQ_SetTask>
  return;
 8000682:	bf00      	nop
}
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000692:	2002      	movs	r0, #2
 8000694:	f00e fb6a 	bl	800ed6c <UTIL_SEQ_SetEvt>
  return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006a8:	2002      	movs	r0, #2
 80006aa:	f00e fb7d 	bl	800eda8 <UTIL_SEQ_WaitEvt>
  return;
 80006ae:	bf00      	nop
}
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4013      	ands	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	43db      	mvns	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <BSP_I2C1_Init+0x70>)
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <BSP_I2C1_Init+0x74>)
 800074e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <BSP_I2C1_Init+0x78>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	4918      	ldr	r1, [pc, #96]	; (80007b8 <BSP_I2C1_Init+0x78>)
 8000758:	600a      	str	r2, [r1, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d122      	bne.n	80007a4 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <BSP_I2C1_Init+0x70>)
 8000760:	f007 fa4c 	bl	8007bfc <HAL_I2C_GetState>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d11c      	bne.n	80007a4 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <BSP_I2C1_Init+0x70>)
 800076c:	f000 f8fe 	bl	800096c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d116      	bne.n	80007a4 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <BSP_I2C1_Init+0x70>)
 8000778:	f000 f8b4 	bl	80008e4 <MX_I2C1_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8000782:	f06f 0307 	mvn.w	r3, #7
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	e00c      	b.n	80007a4 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 800078a:	2100      	movs	r1, #0
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <BSP_I2C1_Init+0x70>)
 800078e:	f007 fc69 	bl	8008064 <HAL_I2CEx_ConfigAnalogFilter>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8000798:	f06f 0307 	mvn.w	r3, #7
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	e001      	b.n	80007a4 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200005bc 	.word	0x200005bc
 80007b4:	40005400 	.word	0x40005400
 80007b8:	20000348 	.word	0x20000348

080007bc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <BSP_I2C1_DeInit+0x48>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d014      	beq.n	80007f8 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <BSP_I2C1_DeInit+0x48>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <BSP_I2C1_DeInit+0x48>)
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <BSP_I2C1_DeInit+0x48>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <BSP_I2C1_DeInit+0x4c>)
 80007e2:	f000 f8e5 	bl	80009b0 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <BSP_I2C1_DeInit+0x4c>)
 80007e8:	f006 ff96 	bl	8007718 <HAL_I2C_DeInit>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 80007f2:	f06f 0307 	mvn.w	r3, #7
 80007f6:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000348 	.word	0x20000348
 8000808:	200005bc 	.word	0x200005bc

0800080c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af04      	add	r7, sp, #16
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	461a      	mov	r2, r3
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
 800081a:	460b      	mov	r3, r1
 800081c:	81bb      	strh	r3, [r7, #12]
 800081e:	4613      	mov	r3, r2
 8000820:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000826:	89ba      	ldrh	r2, [r7, #12]
 8000828:	89f9      	ldrh	r1, [r7, #14]
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <BSP_I2C1_WriteReg+0x60>)
 800083c:	f006 ffb0 	bl	80077a0 <HAL_I2C_Mem_Write>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00c      	beq.n	8000860 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <BSP_I2C1_WriteReg+0x60>)
 8000848:	f007 f9e6 	bl	8007c18 <HAL_I2C_GetError>
 800084c:	4603      	mov	r3, r0
 800084e:	2b04      	cmp	r3, #4
 8000850:	d103      	bne.n	800085a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000852:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e002      	b.n	8000860 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800085a:	f06f 0303 	mvn.w	r3, #3
 800085e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000860:	697b      	ldr	r3, [r7, #20]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200005bc 	.word	0x200005bc

08000870 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af04      	add	r7, sp, #16
 8000876:	60ba      	str	r2, [r7, #8]
 8000878:	461a      	mov	r2, r3
 800087a:	4603      	mov	r3, r0
 800087c:	81fb      	strh	r3, [r7, #14]
 800087e:	460b      	mov	r3, r1
 8000880:	81bb      	strh	r3, [r7, #12]
 8000882:	4613      	mov	r3, r2
 8000884:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800088a:	89ba      	ldrh	r2, [r7, #12]
 800088c:	89f9      	ldrh	r1, [r7, #14]
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <BSP_I2C1_ReadReg+0x60>)
 80008a0:	f007 f892 	bl	80079c8 <HAL_I2C_Mem_Read>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00c      	beq.n	80008c4 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <BSP_I2C1_ReadReg+0x60>)
 80008ac:	f007 f9b4 	bl	8007c18 <HAL_I2C_GetError>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d103      	bne.n	80008be <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80008b6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e002      	b.n	80008c4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80008be:	f06f 0303 	mvn.w	r3, #3
 80008c2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80008c4:	697b      	ldr	r3, [r7, #20]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200005bc 	.word	0x200005bc

080008d4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80008d8:	f006 f9ec 	bl	8006cb4 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_I2C1_Init+0x80>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_I2C1_Init+0x84>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f006 fe68 	bl	80075fc <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f007 fb93 	bl	8008064 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f007 fbd5 	bl	80080fa <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	00707cbb 	.word	0x00707cbb

0800096c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff fe9e 	bl	80006b6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <I2C1_MspInit+0x40>)
 8000998:	f006 fb98 	bl	80070cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009a0:	f7ff fea2 	bl	80006e8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	48000400 	.word	0x48000400

080009b0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80009b8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009bc:	f7ff fead 	bl	800071a <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80009c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <I2C1_MspDeInit+0x24>)
 80009c6:	f006 fcf1 	bl	80073ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	48000400 	.word	0x48000400

080009d8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009e0:	4906      	ldr	r1, [pc, #24]	; (80009fc <LL_EXTI_EnableIT_0_31+0x24>)
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LL_EXTI_EnableIT_0_31+0x24>)
 80009e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	58000800 	.word	0x58000800

08000a00 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a08:	4905      	ldr	r1, [pc, #20]	; (8000a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]

}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	58000800 	.word	0x58000800

08000a24 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <ReadRtcSsrValue+0x3c>)
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <ReadRtcSsrValue+0x3c>)
 8000a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a3a:	e005      	b.n	8000a48 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <ReadRtcSsrValue+0x3c>)
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d1f5      	bne.n	8000a3c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a50:	683b      	ldr	r3, [r7, #0]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40002800 	.word	0x40002800

08000a64 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a74:	79ba      	ldrb	r2, [r7, #6]
 8000a76:	491d      	ldr	r1, [pc, #116]	; (8000aec <LinkTimerAfter+0x88>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3315      	adds	r3, #21
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d009      	beq.n	8000aa2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4916      	ldr	r1, [pc, #88]	; (8000aec <LinkTimerAfter+0x88>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	440b      	add	r3, r1
 8000a9c:	3314      	adds	r3, #20
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <LinkTimerAfter+0x88>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3315      	adds	r3, #21
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <LinkTimerAfter+0x88>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aca:	79ba      	ldrb	r2, [r7, #6]
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <LinkTimerAfter+0x88>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3315      	adds	r3, #21
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	701a      	strb	r2, [r3, #0]

  return;
 8000ade:	bf00      	nop
}
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000180 	.word	0x20000180

08000af0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <LinkTimerBefore+0xb8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d032      	beq.n	8000b72 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	4927      	ldr	r1, [pc, #156]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3314      	adds	r3, #20
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b20:	7bfa      	ldrb	r2, [r7, #15]
 8000b22:	4922      	ldr	r1, [pc, #136]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3315      	adds	r3, #21
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	491d      	ldr	r1, [pc, #116]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	440b      	add	r3, r1
 8000b42:	3315      	adds	r3, #21
 8000b44:	79ba      	ldrb	r2, [r7, #6]
 8000b46:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	4918      	ldr	r1, [pc, #96]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3314      	adds	r3, #20
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	4913      	ldr	r1, [pc, #76]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	3314      	adds	r3, #20
 8000b6c:	79fa      	ldrb	r2, [r7, #7]
 8000b6e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b70:	e014      	b.n	8000b9c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b72:	79fa      	ldrb	r2, [r7, #7]
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	3315      	adds	r3, #21
 8000b82:	79ba      	ldrb	r2, [r7, #6]
 8000b84:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	4908      	ldr	r1, [pc, #32]	; (8000bac <LinkTimerBefore+0xbc>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	440b      	add	r3, r1
 8000b94:	3314      	adds	r3, #20
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	701a      	strb	r2, [r3, #0]
  return;
 8000b9a:	bf00      	nop
}
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000210 	.word	0x20000210
 8000bac:	20000180 	.word	0x20000180

08000bb0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bba:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <linkTimer+0x144>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d118      	bne.n	8000bf6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <linkTimer+0x144>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b4b      	ldr	r3, [pc, #300]	; (8000cf8 <linkTimer+0x148>)
 8000bcc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bce:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <linkTimer+0x144>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	4949      	ldr	r1, [pc, #292]	; (8000cfc <linkTimer+0x14c>)
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	3315      	adds	r3, #21
 8000be4:	2206      	movs	r2, #6
 8000be6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000be8:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <linkTimer+0x150>)
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295
 8000bee:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	81fb      	strh	r3, [r7, #14]
 8000bf4:	e078      	b.n	8000ce8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bf6:	f000 f909 	bl	8000e0c <ReturnTimeElapsed>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	79f9      	ldrb	r1, [r7, #7]
 8000c02:	483e      	ldr	r0, [pc, #248]	; (8000cfc <linkTimer+0x14c>)
 8000c04:	460b      	mov	r3, r1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	440b      	add	r3, r1
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3308      	adds	r3, #8
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	4419      	add	r1, r3
 8000c16:	4839      	ldr	r0, [pc, #228]	; (8000cfc <linkTimer+0x14c>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	4403      	add	r3, r0
 8000c22:	3308      	adds	r3, #8
 8000c24:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	4934      	ldr	r1, [pc, #208]	; (8000cfc <linkTimer+0x14c>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	3308      	adds	r3, #8
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <linkTimer+0x144>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <linkTimer+0x14c>)
 8000c44:	460b      	mov	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	440b      	add	r3, r1
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3308      	adds	r3, #8
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d837      	bhi.n	8000cc8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <linkTimer+0x144>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c5e:	7b7a      	ldrb	r2, [r7, #13]
 8000c60:	4926      	ldr	r1, [pc, #152]	; (8000cfc <linkTimer+0x14c>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3315      	adds	r3, #21
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c72:	e013      	b.n	8000c9c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c74:	7b7a      	ldrb	r2, [r7, #13]
 8000c76:	4921      	ldr	r1, [pc, #132]	; (8000cfc <linkTimer+0x14c>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3315      	adds	r3, #21
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c88:	7b7a      	ldrb	r2, [r7, #13]
 8000c8a:	491c      	ldr	r1, [pc, #112]	; (8000cfc <linkTimer+0x14c>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	3315      	adds	r3, #21
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d00b      	beq.n	8000cba <linkTimer+0x10a>
 8000ca2:	7b3a      	ldrb	r2, [r7, #12]
 8000ca4:	4915      	ldr	r1, [pc, #84]	; (8000cfc <linkTimer+0x14c>)
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d9dc      	bls.n	8000c74 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cba:	7b7a      	ldrb	r2, [r7, #13]
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fecf 	bl	8000a64 <LinkTimerAfter>
 8000cc6:	e00f      	b.n	8000ce8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <linkTimer+0x144>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff0c 	bl	8000af0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <linkTimer+0x144>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <linkTimer+0x148>)
 8000ce0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <linkTimer+0x144>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000210 	.word	0x20000210
 8000cf8:	20000211 	.word	0x20000211
 8000cfc:	20000180 	.word	0x20000180
 8000d00:	20000214 	.word	0x20000214

08000d04 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <UnlinkTimer+0xf8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d111      	bne.n	8000d44 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <UnlinkTimer+0xf8>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <UnlinkTimer+0xfc>)
 8000d28:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	4935      	ldr	r1, [pc, #212]	; (8000e04 <UnlinkTimer+0x100>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	3315      	adds	r3, #21
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <UnlinkTimer+0xf8>)
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e03e      	b.n	8000dc2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	492f      	ldr	r1, [pc, #188]	; (8000e04 <UnlinkTimer+0x100>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	3314      	adds	r3, #20
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	492a      	ldr	r1, [pc, #168]	; (8000e04 <UnlinkTimer+0x100>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	3315      	adds	r3, #21
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	79f9      	ldrb	r1, [r7, #7]
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <UnlinkTimer+0x100>)
 8000d72:	460b      	mov	r3, r1
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	440b      	add	r3, r1
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4403      	add	r3, r0
 8000d7c:	3315      	adds	r3, #21
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2d8      	uxtb	r0, r3
 8000d82:	4920      	ldr	r1, [pc, #128]	; (8000e04 <UnlinkTimer+0x100>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3315      	adds	r3, #21
 8000d90:	4602      	mov	r2, r0
 8000d92:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d013      	beq.n	8000dc2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d9a:	7bba      	ldrb	r2, [r7, #14]
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	4819      	ldr	r0, [pc, #100]	; (8000e04 <UnlinkTimer+0x100>)
 8000da0:	460b      	mov	r3, r1
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	440b      	add	r3, r1
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4403      	add	r3, r0
 8000daa:	3314      	adds	r3, #20
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2d8      	uxtb	r0, r3
 8000db0:	4914      	ldr	r1, [pc, #80]	; (8000e04 <UnlinkTimer+0x100>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	3314      	adds	r3, #20
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	490f      	ldr	r1, [pc, #60]	; (8000e04 <UnlinkTimer+0x100>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <UnlinkTimer+0xf8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d107      	bne.n	8000df0 <UnlinkTimer+0xec>
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d104      	bne.n	8000df0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <UnlinkTimer+0x104>)
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
}
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000210 	.word	0x20000210
 8000e00:	20000211 	.word	0x20000211
 8000e04:	20000180 	.word	0x20000180
 8000e08:	20000214 	.word	0x20000214

08000e0c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <ReturnTimeElapsed+0x70>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1a:	d026      	beq.n	8000e6a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e1c:	f7ff fe02 	bl	8000a24 <ReadRtcSsrValue>
 8000e20:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <ReturnTimeElapsed+0x70>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d305      	bcc.n	8000e38 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <ReturnTimeElapsed+0x70>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e00a      	b.n	8000e4e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <ReturnTimeElapsed+0x74>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <ReturnTimeElapsed+0x70>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <ReturnTimeElapsed+0x78>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <ReturnTimeElapsed+0x7c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	40d3      	lsrs	r3, r2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b29b      	uxth	r3, r3
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000214 	.word	0x20000214
 8000e80:	20000352 	.word	0x20000352
 8000e84:	20000351 	.word	0x20000351
 8000e88:	20000350 	.word	0x20000350

08000e8c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d108      	bne.n	8000eae <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e9c:	f7ff fdc2 	bl	8000a24 <ReadRtcSsrValue>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <RestartWakeupCounter+0xa8>)
 8000ea4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f006 f895 	bl	8006fd6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000eac:	e03e      	b.n	8000f2c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d803      	bhi.n	8000ebc <RestartWakeupCounter+0x30>
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <RestartWakeupCounter+0xac>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d002      	beq.n	8000ec2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ec2:	bf00      	nop
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <RestartWakeupCounter+0xb0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f7      	beq.n	8000ec4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <RestartWakeupCounter+0xb0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <RestartWakeupCounter+0xb0>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	68d2      	ldr	r2, [r2, #12]
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ee8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <RestartWakeupCounter+0xb4>)
 8000eec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ef0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f006 f87d 	bl	8006ff2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ef8:	4912      	ldr	r1, [pc, #72]	; (8000f44 <RestartWakeupCounter+0xb8>)
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <RestartWakeupCounter+0xb8>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f08:	f7ff fd8c 	bl	8000a24 <ReadRtcSsrValue>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <RestartWakeupCounter+0xa8>)
 8000f10:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <RestartWakeupCounter+0xb0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <RestartWakeupCounter+0xb0>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	6892      	ldr	r2, [r2, #8]
 8000f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f24:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f26:	f3af 8000 	nop.w
  return ;
 8000f2a:	bf00      	nop
}
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000214 	.word	0x20000214
 8000f38:	20000350 	.word	0x20000350
 8000f3c:	2000034c 	.word	0x2000034c
 8000f40:	58000800 	.word	0x58000800
 8000f44:	40002800 	.word	0x40002800

08000f48 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <RescheduleTimerList+0x124>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5a:	d108      	bne.n	8000f6e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f5c:	bf00      	nop
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <RescheduleTimerList+0x128>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f7      	bne.n	8000f5e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <RescheduleTimerList+0x128>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <RescheduleTimerList+0x128>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	6892      	ldr	r2, [r2, #8]
 8000f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f80:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <RescheduleTimerList+0x12c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	493b      	ldr	r1, [pc, #236]	; (8001078 <RescheduleTimerList+0x130>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	3308      	adds	r3, #8
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f9c:	f7ff ff36 	bl	8000e0c <ReturnTimeElapsed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d905      	bls.n	8000fb8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <RescheduleTimerList+0x134>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e04d      	b.n	8001054 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4a31      	ldr	r2, [pc, #196]	; (8001080 <RescheduleTimerList+0x138>)
 8000fbc:	8812      	ldrh	r2, [r2, #0]
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d206      	bcs.n	8000fd8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <RescheduleTimerList+0x138>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <RescheduleTimerList+0x134>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e03d      	b.n	8001054 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <RescheduleTimerList+0x134>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fe8:	e034      	b.n	8001054 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	4922      	ldr	r1, [pc, #136]	; (8001078 <RescheduleTimerList+0x130>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d20a      	bcs.n	8001018 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	491c      	ldr	r1, [pc, #112]	; (8001078 <RescheduleTimerList+0x130>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	3308      	adds	r3, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e013      	b.n	8001040 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	7bf9      	ldrb	r1, [r7, #15]
 800101c:	4816      	ldr	r0, [pc, #88]	; (8001078 <RescheduleTimerList+0x130>)
 800101e:	460b      	mov	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	440b      	add	r3, r1
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4403      	add	r3, r0
 8001028:	3308      	adds	r3, #8
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <RescheduleTimerList+0x130>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4403      	add	r3, r0
 800103c:	3308      	adds	r3, #8
 800103e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <RescheduleTimerList+0x130>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3315      	adds	r3, #21
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b06      	cmp	r3, #6
 8001058:	d1c7      	bne.n	8000fea <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800105a:	89bb      	ldrh	r3, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff15 	bl	8000e8c <RestartWakeupCounter>

  return ;
 8001062:	bf00      	nop
}
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40002800 	.word	0x40002800
 8001070:	2000034c 	.word	0x2000034c
 8001074:	20000210 	.word	0x20000210
 8001078:	20000180 	.word	0x20000180
 800107c:	20000218 	.word	0x20000218
 8001080:	20000354 	.word	0x20000354

08001084 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108a:	f3ef 8310 	mrs	r3, PRIMASK
 800108e:	617b      	str	r3, [r7, #20]
  return(result);
 8001090:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	22ca      	movs	r2, #202	; 0xca
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
 80010a0:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2253      	movs	r2, #83	; 0x53
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80010aa:	4b59      	ldr	r3, [pc, #356]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a57      	ldr	r2, [pc, #348]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	6892      	ldr	r2, [r2, #8]
 80010b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010bc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010be:	4b55      	ldr	r3, [pc, #340]	; (8001214 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ca:	4953      	ldr	r1, [pc, #332]	; (8001218 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	330c      	adds	r3, #12
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d170      	bne.n	80011c2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e4:	494c      	ldr	r1, [pc, #304]	; (8001218 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010f8:	4947      	ldr	r1, [pc, #284]	; (8001218 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	3310      	adds	r3, #16
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d04e      	beq.n	80011b2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001114:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001118:	493f      	ldr	r1, [pc, #252]	; (8001218 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	330d      	adds	r3, #13
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d125      	bne.n	800117a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800112e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fde5 	bl	8000d04 <UnlinkTimer>
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001144:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001148:	4933      	ldr	r1, [pc, #204]	; (8001218 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3304      	adds	r3, #4
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa40 	bl	80015e4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	22ca      	movs	r2, #202	; 0xca
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2253      	movs	r2, #83	; 0x53
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
 8001178:	e013      	b.n	80011a2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f9a1 	bl	80014d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	22ca      	movs	r2, #202	; 0xca
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2253      	movs	r2, #83	; 0x53
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	4619      	mov	r1, r3
 80011aa:	69b8      	ldr	r0, [r7, #24]
 80011ac:	f000 faa0 	bl	80016f0 <HW_TS_RTC_Int_AppNot>
 80011b0:	e024      	b.n	80011fc <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80011b2:	f7ff fec9 	bl	8000f48 <RescheduleTimerList>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f383 8810 	msr	PRIMASK, r3
 80011c0:	e01c      	b.n	80011fc <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011c2:	bf00      	nop
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f7      	beq.n	80011c4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	68d2      	ldr	r2, [r2, #12]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	22ff      	movs	r2, #255	; 0xff
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001206:	bf00      	nop
}
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000034c 	.word	0x2000034c
 8001214:	20000210 	.word	0x20000210
 8001218:	20000180 	.word	0x20000180
 800121c:	20000218 	.word	0x20000218
 8001220:	58000800 	.word	0x58000800

08001224 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001230:	4a61      	ldr	r2, [pc, #388]	; (80013b8 <HW_TS_Init+0x194>)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HW_TS_Init+0x194>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	22ca      	movs	r2, #202	; 0xca
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
 8001240:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HW_TS_Init+0x194>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2253      	movs	r2, #83	; 0x53
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800124a:	4a5c      	ldr	r2, [pc, #368]	; (80013bc <HW_TS_Init+0x198>)
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HW_TS_Init+0x198>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001256:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HW_TS_Init+0x198>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f1c3 0304 	rsb	r3, r3, #4
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HW_TS_Init+0x19c>)
 800126a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HW_TS_Init+0x198>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001274:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001278:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	fab2 f282 	clz	r2, r2
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	40d3      	lsrs	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HW_TS_Init+0x1a0>)
 8001294:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HW_TS_Init+0x198>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	b29b      	uxth	r3, r3
 800129c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <HW_TS_Init+0x1a4>)
 80012a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HW_TS_Init+0x1a4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <HW_TS_Init+0x1a0>)
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012bc:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HW_TS_Init+0x19c>)
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	40d3      	lsrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d904      	bls.n	80012d8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HW_TS_Init+0x1a8>)
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	e003      	b.n	80012e0 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HW_TS_Init+0x1a8>)
 80012de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012e4:	f7ff fb8c 	bl	8000a00 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012ec:	f7ff fb74 	bl	80009d8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d143      	bne.n	800137e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HW_TS_Init+0x1ac>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HW_TS_Init+0x1b0>)
 80012fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001302:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001304:	2300      	movs	r3, #0
 8001306:	75fb      	strb	r3, [r7, #23]
 8001308:	e00c      	b.n	8001324 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	4932      	ldr	r1, [pc, #200]	; (80013d8 <HW_TS_Init+0x1b4>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	330c      	adds	r3, #12
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	3301      	adds	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d9ef      	bls.n	800130a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HW_TS_Init+0x1b8>)
 800132c:	2206      	movs	r2, #6
 800132e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HW_TS_Init+0x194>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HW_TS_Init+0x194>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	6892      	ldr	r2, [r2, #8]
 800133e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001342:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HW_TS_Init+0x194>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HW_TS_Init+0x194>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	68d2      	ldr	r2, [r2, #12]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001358:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HW_TS_Init+0x1bc>)
 800135c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001360:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001362:	2003      	movs	r0, #3
 8001364:	f005 fe45 	bl	8006ff2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HW_TS_Init+0x194>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HW_TS_Init+0x194>)
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	6892      	ldr	r2, [r2, #8]
 8001376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e00a      	b.n	8001394 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HW_TS_Init+0x194>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800138e:	2003      	movs	r0, #3
 8001390:	f005 fe21 	bl	8006fd6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HW_TS_Init+0x194>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	2003      	movs	r0, #3
 80013a4:	f005 fdd5 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f005 fdec 	bl	8006f86 <HAL_NVIC_EnableIRQ>

  return;
 80013ae:	bf00      	nop
}
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000034c 	.word	0x2000034c
 80013bc:	40002800 	.word	0x40002800
 80013c0:	20000350 	.word	0x20000350
 80013c4:	20000351 	.word	0x20000351
 80013c8:	20000352 	.word	0x20000352
 80013cc:	20000354 	.word	0x20000354
 80013d0:	20000218 	.word	0x20000218
 80013d4:	20000214 	.word	0x20000214
 80013d8:	20000180 	.word	0x20000180
 80013dc:	20000210 	.word	0x20000210
 80013e0:	58000800 	.word	0x58000800

080013e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001400:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001406:	e004      	b.n	8001412 <HW_TS_Create+0x2e>
  {
    loop++;
 8001408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140c:	3301      	adds	r3, #1
 800140e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001416:	2b05      	cmp	r3, #5
 8001418:	d80c      	bhi.n	8001434 <HW_TS_Create+0x50>
 800141a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800141e:	492b      	ldr	r1, [pc, #172]	; (80014cc <HW_TS_Create+0xe8>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	330c      	adds	r3, #12
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e9      	bne.n	8001408 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001438:	2b06      	cmp	r3, #6
 800143a:	d037      	beq.n	80014ac <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800143c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001440:	4922      	ldr	r1, [pc, #136]	; (80014cc <HW_TS_Create+0xe8>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	330c      	adds	r3, #12
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800145c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001460:	491a      	ldr	r1, [pc, #104]	; (80014cc <HW_TS_Create+0xe8>)
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3310      	adds	r3, #16
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001472:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <HW_TS_Create+0xe8>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	330d      	adds	r3, #13
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001488:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800148c:	490f      	ldr	r1, [pc, #60]	; (80014cc <HW_TS_Create+0xe8>)
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014aa:	e007      	b.n	80014bc <HW_TS_Create+0xd8>
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	372c      	adds	r7, #44	; 0x2c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000180 	.word	0x20000180

080014d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014da:	f3ef 8310 	mrs	r3, PRIMASK
 80014de:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014e6:	2003      	movs	r0, #3
 80014e8:	f005 fd5b 	bl	8006fa2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HW_TS_Stop+0xfc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	22ca      	movs	r2, #202	; 0xca
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HW_TS_Stop+0xfc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2253      	movs	r2, #83	; 0x53
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	4933      	ldr	r1, [pc, #204]	; (80015d0 <HW_TS_Stop+0x100>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	330c      	adds	r3, #12
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d148      	bne.n	80015aa <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fbf1 	bl	8000d04 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HW_TS_Stop+0x104>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001528:	7cfb      	ldrb	r3, [r7, #19]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d135      	bne.n	800159a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HW_TS_Stop+0x108>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d108      	bne.n	800154e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800153c:	bf00      	nop
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HW_TS_Stop+0xfc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f7      	bne.n	800153e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HW_TS_Stop+0xfc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HW_TS_Stop+0xfc>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	6892      	ldr	r2, [r2, #8]
 800155c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001560:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001562:	bf00      	nop
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HW_TS_Stop+0xfc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f7      	beq.n	8001564 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HW_TS_Stop+0xfc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HW_TS_Stop+0xfc>)
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001588:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HW_TS_Stop+0x10c>)
 800158c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001590:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001592:	2003      	movs	r0, #3
 8001594:	f005 fd2d 	bl	8006ff2 <HAL_NVIC_ClearPendingIRQ>
 8001598:	e007      	b.n	80015aa <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HW_TS_Stop+0x110>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	7cfa      	ldrb	r2, [r7, #19]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80015a6:	f7ff fccf 	bl	8000f48 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HW_TS_Stop+0xfc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	22ff      	movs	r2, #255	; 0xff
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015b4:	2003      	movs	r0, #3
 80015b6:	f005 fce6 	bl	8006f86 <HAL_NVIC_EnableIRQ>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015c4:	bf00      	nop
}
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000034c 	.word	0x2000034c
 80015d0:	20000180 	.word	0x20000180
 80015d4:	20000210 	.word	0x20000210
 80015d8:	40002800 	.word	0x40002800
 80015dc:	58000800 	.word	0x58000800
 80015e0:	20000211 	.word	0x20000211

080015e4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	493b      	ldr	r1, [pc, #236]	; (80016e0 <HW_TS_Start+0xfc>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d103      	bne.n	8001610 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff60 	bl	80014d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001610:	f3ef 8310 	mrs	r3, PRIMASK
 8001614:	60fb      	str	r3, [r7, #12]
  return(result);
 8001616:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800161a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800161c:	2003      	movs	r0, #3
 800161e:	f005 fcc0 	bl	8006fa2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HW_TS_Start+0x100>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22ca      	movs	r2, #202	; 0xca
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HW_TS_Start+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2253      	movs	r2, #83	; 0x53
 8001634:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	4929      	ldr	r1, [pc, #164]	; (80016e0 <HW_TS_Start+0xfc>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	330c      	adds	r3, #12
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	4924      	ldr	r1, [pc, #144]	; (80016e0 <HW_TS_Start+0xfc>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3308      	adds	r3, #8
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	491f      	ldr	r1, [pc, #124]	; (80016e0 <HW_TS_Start+0xfc>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3304      	adds	r3, #4
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fa9b 	bl	8000bb0 <linkTimer>
 800167a:	4603      	mov	r3, r0
 800167c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HW_TS_Start+0x104>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HW_TS_Start+0x108>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	7c7a      	ldrb	r2, [r7, #17]
 800168c:	429a      	cmp	r2, r3
 800168e:	d002      	beq.n	8001696 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001690:	f7ff fc5a 	bl	8000f48 <RescheduleTimerList>
 8001694:	e013      	b.n	80016be <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	79f9      	ldrb	r1, [r7, #7]
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <HW_TS_Start+0xfc>)
 800169c:	460b      	mov	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	440b      	add	r3, r1
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4403      	add	r3, r0
 80016a6:	3308      	adds	r3, #8
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	8a7b      	ldrh	r3, [r7, #18]
 80016ac:	1ac9      	subs	r1, r1, r3
 80016ae:	480c      	ldr	r0, [pc, #48]	; (80016e0 <HW_TS_Start+0xfc>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4403      	add	r3, r0
 80016ba:	3308      	adds	r3, #8
 80016bc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HW_TS_Start+0x100>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c8:	2003      	movs	r0, #3
 80016ca:	f005 fc5c 	bl	8006f86 <HAL_NVIC_EnableIRQ>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d8:	bf00      	nop
}
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000180 	.word	0x20000180
 80016e4:	2000034c 	.word	0x2000034c
 80016e8:	20000210 	.word	0x20000210
 80016ec:	20000211 	.word	0x20000211

080016f0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	460b      	mov	r3, r1
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4798      	blx	r3

  return;
 8001702:	bf00      	nop
}
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <LL_RCC_LSE_SetDriveCapability>:
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	f023 0218 	bic.w	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_AHB2_GRP1_EnableClock>:
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800173e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4313      	orrs	r3, r2
 800174c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f005 fa36 	bl	8006bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f814 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f000 f90e 	bl	8001994 <MX_GPIO_Init>
  MX_RF_Init();
 8001778:	f000 f890 	bl	800189c <MX_RF_Init>
  MX_RTC_Init();
 800177c:	f000 f896 	bl	80018ac <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001780:	f000 f8bc 	bl	80018fc <MX_USART1_UART_Init>
  MX_MEMS_Init();
 8001784:	f00a fa00 	bl	800bb88 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001788:	f7fe fee4 	bl	8000554 <APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f00d f98a 	bl	800eaa8 <UTIL_SEQ_Run>
    /* USER CODE END WHILE */
//	  sensor_Read(&demoRead);
  MX_MEMS_Process();
 8001794:	f00a fa00 	bl	800bb98 <MX_MEMS_Process>
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001798:	e7f8      	b.n	800178c <main+0x24>
	...

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ae      	sub	sp, #184	; 0xb8
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017a6:	2248      	movs	r2, #72	; 0x48
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00d fbdf 	bl	800ef6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2250      	movs	r2, #80	; 0x50
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00d fbcf 	bl	800ef6e <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ff9a 	bl	800170a <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <SystemClock_Config+0xfc>)
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <SystemClock_Config+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <SystemClock_Config+0xfc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80017f2:	2307      	movs	r3, #7
 80017f4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001804:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001806:	2340      	movs	r3, #64	; 0x40
 8001808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001816:	4618      	mov	r0, r3
 8001818:	f007 f86e 	bl	80088f8 <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001822:	f000 f8f9 	bl	8001a18 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001826:	236f      	movs	r3, #111	; 0x6f
 8001828:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800182a:	2302      	movs	r3, #2
 800182c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001842:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f007 fbb3 	bl	8008fb4 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001854:	f000 f8e0 	bl	8001a18 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001858:	f643 0305 	movw	r3, #14341	; 0x3805
 800185c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001862:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800186e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001874:	2302      	movs	r3, #2
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001878:	2300      	movs	r3, #0
 800187a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f007 ffd3 	bl	800982a <HAL_RCCEx_PeriphCLKConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800188a:	f000 f8c5 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800188e:	bf00      	nop
 8001890:	37b8      	adds	r7, #184	; 0xb8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	58000400 	.word	0x58000400

0800189c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_RTC_Init+0x48>)
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <MX_RTC_Init+0x4c>)
 80018b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_RTC_Init+0x48>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_RTC_Init+0x48>)
 80018be:	220f      	movs	r2, #15
 80018c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_RTC_Init+0x48>)
 80018c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80018c8:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018ca:	480a      	ldr	r0, [pc, #40]	; (80018f4 <MX_RTC_Init+0x48>)
 80018cc:	f008 fa33 	bl	8009d36 <HAL_RTC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80018d6:	f000 f89f 	bl	8001a18 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_RTC_Init+0x48>)
 80018e0:	f008 fb18 	bl	8009f14 <HAL_RTCEx_SetWakeUpTimer_IT>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80018ea:	f000 f895 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000694 	.word	0x20000694
 80018f8:	40002800 	.word	0x40002800

080018fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <MX_USART1_UART_Init+0x94>)
 8001904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_USART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_USART1_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_USART1_UART_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001946:	f008 fbf1 	bl	800a12c <HAL_UART_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001950:	f000 f862 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_USART1_UART_Init+0x90>)
 8001958:	f00a f832 	bl	800b9c0 <HAL_UARTEx_SetTxFifoThreshold>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001962:	f000 f859 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <MX_USART1_UART_Init+0x90>)
 800196a:	f00a f867 	bl	800ba3c <HAL_UARTEx_SetRxFifoThreshold>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001974:	f000 f850 	bl	8001a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_USART1_UART_Init+0x90>)
 800197a:	f009 ffe8 	bl	800b94e <HAL_UARTEx_DisableFifoMode>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001984:	f000 f848 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000608 	.word	0x20000608
 8001990:	40013800 	.word	0x40013800

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a8:	2004      	movs	r0, #4
 80019aa:	f7ff fec4 	bl	8001736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7ff fec1 	bl	8001736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff febe 	bl	8001736 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2121      	movs	r1, #33	; 0x21
 80019be:	4813      	ldr	r0, [pc, #76]	; (8001a0c <MX_GPIO_Init+0x78>)
 80019c0:	f005 fdd2 	bl	8007568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 80019c4:	2310      	movs	r3, #16
 80019c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_GPIO_Init+0x7c>)
 80019ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <MX_GPIO_Init+0x80>)
 80019d6:	f005 fb79 	bl	80070cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80019da:	2321      	movs	r3, #33	; 0x21
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_GPIO_Init+0x78>)
 80019f0:	f005 fb6c 	bl	80070cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	200a      	movs	r0, #10
 80019fa:	f005 faaa 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f005 fac1 	bl	8006f86 <HAL_NVIC_EnableIRQ>

}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	10210000 	.word	0x10210000
 8001a14:	48000800 	.word	0x48000800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_AHB2_GRP1_EnableClock>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_AHB3_GRP1_EnableClock>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001ae2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ae6:	f7ff ffc8 	bl	8001a7a <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_RTC_MspInit+0x30>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d109      	bne.n	8001b16 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b02:	f7ff ff90 	bl	8001a26 <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f005 fa21 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f005 fa38 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40002800 	.word	0x40002800

08001b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_UART_MspInit+0x68>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11e      	bne.n	8001b84 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b4a:	f7ff ffaf 	bl	8001aac <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f7ff ff7a 	bl	8001a48 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b64:	2307      	movs	r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <HAL_UART_MspInit+0x6c>)
 8001b70:	f005 faac 	bl	80070cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2024      	movs	r0, #36	; 0x24
 8001b7a:	f005 f9ea 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7e:	2024      	movs	r0, #36	; 0x24
 8001b80:	f005 fa01 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	48000400 	.word	0x48000400

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f005 f852 	bl	8006c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <RTC_WKUP_IRQHandler+0x14>)
 8001bf6:	f008 fa49 	bl	800a08c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001bfa:	f7ff fa43 	bl	8001084 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000694 	.word	0x20000694

08001c08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c0c:	2010      	movs	r0, #16
 8001c0e:	f005 fcdd 	bl	80075cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART1_IRQHandler+0x10>)
 8001c1e:	f008 fad5 	bl	800a1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000608 	.word	0x20000608

08001c2c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001c30:	f00c fdea 	bl	800e808 <HW_IPCC_Tx_Handler>

  return;
 8001c34:	bf00      	nop
}
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001c3c:	f00c fdac 	bl	800e798 <HW_IPCC_Rx_Handler>
  return;
 8001c40:	bf00      	nop
}
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <SystemInit+0xa0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001c4e:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <SystemInit+0xa0>)
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <SystemInit+0xa0>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c76:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <SystemInit+0xa4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	f023 0305 	bic.w	r3, r3, #5
 8001c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <SystemInit+0xa8>)
 8001cb6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <SystemInit+0xa8>)
 8001cbe:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	faf6fefb 	.word	0xfaf6fefb
 8001cec:	22041000 	.word	0x22041000

08001cf0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <SystemCoreClockUpdate+0x130>)
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d867      	bhi.n	8001de8 <SystemCoreClockUpdate+0xf8>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <SystemCoreClockUpdate+0x30>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d55 	.word	0x08001d55
 8001d24:	08001de9 	.word	0x08001de9
 8001d28:	08001de9 	.word	0x08001de9
 8001d2c:	08001de9 	.word	0x08001de9
 8001d30:	08001d5d 	.word	0x08001d5d
 8001d34:	08001de9 	.word	0x08001de9
 8001d38:	08001de9 	.word	0x08001de9
 8001d3c:	08001de9 	.word	0x08001de9
 8001d40:	08001d65 	.word	0x08001d65
 8001d44:	08001de9 	.word	0x08001de9
 8001d48:	08001de9 	.word	0x08001de9
 8001d4c:	08001de9 	.word	0x08001de9
 8001d50:	08001d6d 	.word	0x08001d6d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001d54:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6013      	str	r3, [r2, #0]
      break;
 8001d5a:	e049      	b.n	8001df0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001d5e:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <SystemCoreClockUpdate+0x138>)
 8001d60:	601a      	str	r2, [r3, #0]
      break;
 8001d62:	e045      	b.n	8001df0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <SystemCoreClockUpdate+0x13c>)
 8001d68:	601a      	str	r2, [r3, #0]
      break;
 8001d6a:	e041      	b.n	8001df0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d105      	bne.n	8001d9a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001d8e:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <SystemCoreClockUpdate+0x138>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00d      	b.n	8001db6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d105      	bne.n	8001dac <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <SystemCoreClockUpdate+0x13c>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e004      	b.n	8001db6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0f5b      	lsrs	r3, r3, #29
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001de4:	6013      	str	r3, [r2, #0]
      break;
 8001de6:	e003      	b.n	8001df0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6013      	str	r3, [r2, #0]
      break;
 8001dee:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <SystemCoreClockUpdate+0x140>)
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemCoreClockUpdate+0x134>)
 8001e10:	6013      	str	r3, [r2, #0]

}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	0800f06c 	.word	0x0800f06c
 8001e24:	20000004 	.word	0x20000004
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	01e84800 	.word	0x01e84800
 8001e30:	0800f00c 	.word	0x0800f00c

08001e34 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e030      	b.n	8001eae <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7b1a      	ldrb	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HTS221_RegisterBusIO+0x84>)
 8001e88:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HTS221_RegisterBusIO+0x88>)
 8001e8e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4798      	blx	r3
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	e002      	b.n	8001eae <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800255f 	.word	0x0800255f
 8001ebc:	080025c1 	.word	0x080025c1

08001ec0 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fade 	bl	8002494 <HTS221_Initialize>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e004      	b.n	8001eee <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d111      	bne.n	8001f2c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f878 	bl	8001ffe <HTS221_HUM_Disable>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e00d      	b.n	8001f36 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f97b 	bl	8002216 <HTS221_TEMP_Disable>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e004      	b.n	8001f36 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	331c      	adds	r3, #28
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fc3e 	bl	80027d0 <hts221_device_id_get>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e000      	b.n	8001f62 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HTS221_GetCapabilities+0x44>)
 8001f92:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HTS221_GetCapabilities+0x44>)
 8001f98:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	41480000 	.word	0x41480000

08001fb4 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e015      	b.n	8001ff6 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	331c      	adds	r3, #28
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fc09 	bl	80027f2 <hts221_power_on_set>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e004      	b.n	8001ff6 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e015      	b.n	8002040 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	331c      	adds	r3, #28
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fbe4 	bl	80027f2 <hts221_power_on_set>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	e004      	b.n	8002040 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f9a9 	bl	80023ac <HTS221_GetOutputDataRate>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002070:	ed97 0a00 	vldr	s0, [r7]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f9dd 	bl	8002434 <HTS221_SetOutputDataRate>
 800207a:	4603      	mov	r3, r0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	331c      	adds	r3, #28
 8002092:	f107 0218 	add.w	r2, r7, #24
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fc52 	bl	8002942 <hts221_hum_adc_point_0_get>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	e088      	b.n	80021bc <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 80020aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b6:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	331c      	adds	r3, #28
 80020be:	f107 0218 	add.w	r2, r7, #24
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fbba 	bl	800283e <hts221_hum_rh_point_0_get>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e072      	b.n	80021bc <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 80020d6:	7e3b      	ldrb	r3, [r7, #24]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	331c      	adds	r3, #28
 80020e8:	f107 0218 	add.w	r2, r7, #24
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fc38 	bl	8002964 <hts221_hum_adc_point_1_get>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e05d      	b.n	80021bc <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8002100:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210c:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	331c      	adds	r3, #28
 8002114:	f107 0218 	add.w	r2, r7, #24
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fba6 	bl	800286c <hts221_hum_rh_point_1_get>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e047      	b.n	80021bc <HTS221_HUM_GetHumidity+0x138>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 800212c:	7e3b      	ldrb	r3, [r7, #24]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002136:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	2202      	movs	r2, #2
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f00c ff13 	bl	800ef6e <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	331c      	adds	r3, #28
 800214c:	f107 021c 	add.w	r2, r7, #28
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fb1a 	bl	800278c <hts221_humidity_raw_get>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e02b      	b.n	80021bc <HTS221_HUM_GetHumidity+0x138>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002164:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f9b7 	bl	80024ec <Linear_Interpolation>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d503      	bpl.n	80021a0 <HTS221_HUM_GetHumidity+0x11c>
  {
    *Value = 0.0f;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021c4 <HTS221_HUM_GetHumidity+0x140>
 80021aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd02      	ble.n	80021ba <HTS221_HUM_GetHumidity+0x136>
  {
    *Value = 100.0f;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HTS221_HUM_GetHumidity+0x144>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	42c80000 	.word	0x42c80000
 80021c8:	42c80000 	.word	0x42c80000

080021cc <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e015      	b.n	800220e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	331c      	adds	r3, #28
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fafd 	bl	80027f2 <hts221_power_on_set>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e004      	b.n	800220e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e015      	b.n	8002258 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	331c      	adds	r3, #28
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fad8 	bl	80027f2 <hts221_power_on_set>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e004      	b.n	8002258 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f89d 	bl	80023ac <HTS221_GetOutputDataRate>
 8002272:	4603      	mov	r3, r0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002288:	ed97 0a00 	vldr	s0, [r7]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f8d1 	bl	8002434 <HTS221_SetOutputDataRate>
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	331c      	adds	r3, #28
 80022aa:	f107 0218 	add.w	r2, r7, #24
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb68 	bl	8002986 <hts221_temp_adc_point_0_get>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	e06f      	b.n	80023a2 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 80022c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	331c      	adds	r3, #28
 80022d6:	f107 0218 	add.w	r2, r7, #24
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fadc 	bl	800289a <hts221_temp_deg_point_0_get>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ec:	e059      	b.n	80023a2 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 80022ee:	7e3b      	ldrb	r3, [r7, #24]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	331c      	adds	r3, #28
 8002300:	f107 0218 	add.w	r2, r7, #24
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fb4e 	bl	80029a8 <hts221_temp_adc_point_1_get>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e044      	b.n	80023a2 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8002318:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	331c      	adds	r3, #28
 800232c:	f107 0218 	add.w	r2, r7, #24
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fadb 	bl	80028ee <hts221_temp_deg_point_1_get>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e02e      	b.n	80023a2 <HTS221_TEMP_GetTemperature+0x106>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8002344:	7e3b      	ldrb	r3, [r7, #24]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	2202      	movs	r2, #2
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00c fe07 	bl	800ef6e <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	331c      	adds	r3, #28
 8002364:	f107 021c 	add.w	r2, r7, #28
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa1f 	bl	80027ae <hts221_temperature_raw_get>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e012      	b.n	80023a2 <HTS221_TEMP_GetTemperature+0x106>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800237c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f8ab 	bl	80024ec <Linear_Interpolation>
 8002396:	eef0 7a40 	vmov.f32	s15, s0
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	331c      	adds	r3, #28
 80023be:	f107 020b 	add.w	r2, r7, #11
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f983 	bl	80026d0 <hts221_data_rate_get>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e025      	b.n	8002422 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d81d      	bhi.n	8002418 <HTS221_GetOutputDataRate+0x6c>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HTS221_GetOutputDataRate+0x38>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	080023ff 	.word	0x080023ff
 80023ec:	08002409 	.word	0x08002409
 80023f0:	08002411 	.word	0x08002411
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
      break;
 80023fc:	e010      	b.n	8002420 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002404:	601a      	str	r2, [r3, #0]
      break;
 8002406:	e00b      	b.n	8002420 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HTS221_GetOutputDataRate+0x80>)
 800240c:	601a      	str	r2, [r3, #0]
      break;
 800240e:	e007      	b.n	8002420 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HTS221_GetOutputDataRate+0x84>)
 8002414:	601a      	str	r2, [r3, #0]
      break;
 8002416:	e003      	b.n	8002420 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	60fb      	str	r3, [r7, #12]
      break;
 800241e:	bf00      	nop
  }

  return ret;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40e00000 	.word	0x40e00000
 8002430:	41480000 	.word	0x41480000

08002434 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002440:	edd7 7a00 	vldr	s15, [r7]
 8002444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002450:	d801      	bhi.n	8002456 <HTS221_SetOutputDataRate+0x22>
 8002452:	2301      	movs	r3, #1
 8002454:	e00b      	b.n	800246e <HTS221_SetOutputDataRate+0x3a>
 8002456:	edd7 7a00 	vldr	s15, [r7]
 800245a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800245e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d801      	bhi.n	800246c <HTS221_SetOutputDataRate+0x38>
 8002468:	2302      	movs	r3, #2
 800246a:	e000      	b.n	800246e <HTS221_SetOutputDataRate+0x3a>
 800246c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800246e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	331c      	adds	r3, #28
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f902 	bl	8002682 <hts221_data_rate_set>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e000      	b.n	800248c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	331c      	adds	r3, #28
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f9a5 	bl	80027f2 <hts221_power_on_set>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e017      	b.n	80024e4 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	331c      	adds	r3, #28
 80024b8:	2101      	movs	r1, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f940 	bl	8002740 <hts221_block_data_update_set>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e00b      	b.n	80024e4 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80024cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ffaf 	bl	8002434 <HTS221_SetOutputDataRate>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	e000      	b.n	80024e4 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	edd3 7a01 	vldr	s15, [r3, #4]
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	edd7 7a00 	vldr	s15, [r7]
 800250c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 6a02 	vldr	s13, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	edd3 7a01 	vldr	s15, [r3, #4]
 800251c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	ed93 6a00 	vldr	s12, [r3]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 7a03 	vldr	s15, [r3, #12]
 800252c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002530:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	edd3 6a02 	vldr	s13, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002548:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800254c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002550:	eeb0 0a67 	vmov.f32	s0, s15
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800255e:	b590      	push	{r4, r7, lr}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	461a      	mov	r2, r3
 800256a:	460b      	mov	r3, r1
 800256c:	72fb      	strb	r3, [r7, #11]
 800256e:	4613      	mov	r3, r2
 8002570:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	695c      	ldr	r4, [r3, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	7b1b      	ldrb	r3, [r3, #12]
 8002586:	b298      	uxth	r0, r3
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800258e:	b2db      	uxtb	r3, r3
 8002590:	b299      	uxth	r1, r3
 8002592:	893b      	ldrh	r3, [r7, #8]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	47a0      	blx	r4
 8002598:	4603      	mov	r3, r0
 800259a:	e00d      	b.n	80025b8 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	695c      	ldr	r4, [r3, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	7b1b      	ldrb	r3, [r3, #12]
 80025a4:	b298      	uxth	r0, r3
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	b299      	uxth	r1, r3
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	47a0      	blx	r4
 80025b6:	4603      	mov	r3, r0
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	72fb      	strb	r3, [r7, #11]
 80025d0:	4613      	mov	r3, r2
 80025d2:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10e      	bne.n	80025fe <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	691c      	ldr	r4, [r3, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
 80025e8:	b298      	uxth	r0, r3
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	b299      	uxth	r1, r3
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	47a0      	blx	r4
 80025fa:	4603      	mov	r3, r0
 80025fc:	e00d      	b.n	800261a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	691c      	ldr	r4, [r3, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	7b1b      	ldrb	r3, [r3, #12]
 8002606:	b298      	uxth	r0, r3
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260e:	b2db      	uxtb	r3, r3
 8002610:	b299      	uxth	r1, r3
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	47a0      	blx	r4
 8002618:	4603      	mov	r3, r0
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}

08002622 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8002622:	b590      	push	{r4, r7, lr}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	461a      	mov	r2, r3
 800262e:	460b      	mov	r3, r1
 8002630:	72fb      	strb	r3, [r7, #11]
 8002632:	4613      	mov	r3, r2
 8002634:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685c      	ldr	r4, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6898      	ldr	r0, [r3, #8]
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	7af9      	ldrb	r1, [r7, #11]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	47a0      	blx	r4
 8002646:	6178      	str	r0, [r7, #20]
  return ret;
 8002648:	697b      	ldr	r3, [r7, #20]
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002652:	b590      	push	{r4, r7, lr}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	461a      	mov	r2, r3
 800265e:	460b      	mov	r3, r1
 8002660:	72fb      	strb	r3, [r7, #11]
 8002662:	4613      	mov	r3, r2
 8002664:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681c      	ldr	r4, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6898      	ldr	r0, [r3, #8]
 800266e:	893b      	ldrh	r3, [r7, #8]
 8002670:	7af9      	ldrb	r1, [r7, #11]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	47a0      	blx	r4
 8002676:	6178      	str	r0, [r7, #20]
  return ret;
 8002678:	697b      	ldr	r3, [r7, #20]
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800268e:	f107 0208 	add.w	r2, r7, #8
 8002692:	2301      	movs	r3, #1
 8002694:	2120      	movs	r1, #32
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffc3 	bl	8002622 <hts221_read_reg>
 800269c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	7a3b      	ldrb	r3, [r7, #8]
 80026ae:	f362 0301 	bfi	r3, r2, #0, #2
 80026b2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80026b4:	f107 0208 	add.w	r2, r7, #8
 80026b8:	2301      	movs	r3, #1
 80026ba:	2120      	movs	r1, #32
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffc8 	bl	8002652 <hts221_write_reg>
 80026c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80026da:	f107 0208 	add.w	r2, r7, #8
 80026de:	2301      	movs	r3, #1
 80026e0:	2120      	movs	r1, #32
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff9d 	bl	8002622 <hts221_read_reg>
 80026e8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80026ea:	7a3b      	ldrb	r3, [r7, #8]
 80026ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d81a      	bhi.n	800272c <hts221_data_rate_get+0x5c>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <hts221_data_rate_get+0x2c>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002715 	.word	0x08002715
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002725 	.word	0x08002725
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
      break;
 8002712:	e00f      	b.n	8002734 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
      break;
 800271a:	e00b      	b.n	8002734 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
      break;
 8002722:	e007      	b.n	8002734 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2203      	movs	r2, #3
 8002728:	701a      	strb	r2, [r3, #0]
      break;
 800272a:	e003      	b.n	8002734 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2204      	movs	r2, #4
 8002730:	701a      	strb	r2, [r3, #0]
      break;
 8002732:	bf00      	nop
  }

  return ret;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop

08002740 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800274c:	f107 0208 	add.w	r2, r7, #8
 8002750:	2301      	movs	r3, #1
 8002752:	2120      	movs	r1, #32
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff64 	bl	8002622 <hts221_read_reg>
 800275a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10f      	bne.n	8002782 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	7a3b      	ldrb	r3, [r7, #8]
 800276c:	f362 0382 	bfi	r3, r2, #2, #1
 8002770:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002772:	f107 0208 	add.w	r2, r7, #8
 8002776:	2301      	movs	r3, #1
 8002778:	2120      	movs	r1, #32
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff69 	bl	8002652 <hts221_write_reg>
 8002780:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002796:	2302      	movs	r3, #2
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	2128      	movs	r1, #40	; 0x28
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff40 	bl	8002622 <hts221_read_reg>
 80027a2:	60f8      	str	r0, [r7, #12]
  return ret;
 80027a4:	68fb      	ldr	r3, [r7, #12]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80027b8:	2302      	movs	r3, #2
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	212a      	movs	r1, #42	; 0x2a
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff2f 	bl	8002622 <hts221_read_reg>
 80027c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80027da:	2301      	movs	r3, #1
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	210f      	movs	r1, #15
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff1e 	bl	8002622 <hts221_read_reg>
 80027e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80027e8:	68fb      	ldr	r3, [r7, #12]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80027fe:	f107 0208 	add.w	r2, r7, #8
 8002802:	2301      	movs	r3, #1
 8002804:	2120      	movs	r1, #32
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff0b 	bl	8002622 <hts221_read_reg>
 800280c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <hts221_power_on_set+0x42>
    reg.pd = val;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	7a3b      	ldrb	r3, [r7, #8]
 800281e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002822:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002824:	f107 0208 	add.w	r2, r7, #8
 8002828:	2301      	movs	r3, #1
 800282a:	2120      	movs	r1, #32
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff10 	bl	8002652 <hts221_write_reg>
 8002832:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002834:	68fb      	ldr	r3, [r7, #12]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8002848:	2301      	movs	r3, #1
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	2130      	movs	r1, #48	; 0x30
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fee7 	bl	8002622 <hts221_read_reg>
 8002854:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	701a      	strb	r2, [r3, #0]

  return ret;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8002876:	2301      	movs	r3, #1
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	2131      	movs	r1, #49	; 0x31
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fed0 	bl	8002622 <hts221_read_reg>
 8002882:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	701a      	strb	r2, [r3, #0]

  return ret;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80028a4:	f107 020f 	add.w	r2, r7, #15
 80028a8:	2301      	movs	r3, #1
 80028aa:	2132      	movs	r1, #50	; 0x32
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff feb8 	bl	8002622 <hts221_read_reg>
 80028b2:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d114      	bne.n	80028e4 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80028ba:	f107 0210 	add.w	r2, r7, #16
 80028be:	2301      	movs	r3, #1
 80028c0:	2135      	movs	r1, #53	; 0x35
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fead 	bl	8002622 <hts221_read_reg>
 80028c8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80028ca:	7c3b      	ldrb	r3, [r7, #16]
 80028cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	4413      	add	r3, r2
 80028dc:	10db      	asrs	r3, r3, #3
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80028e4:	697b      	ldr	r3, [r7, #20]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80028f8:	f107 020f 	add.w	r2, r7, #15
 80028fc:	2301      	movs	r3, #1
 80028fe:	2133      	movs	r1, #51	; 0x33
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe8e 	bl	8002622 <hts221_read_reg>
 8002906:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d114      	bne.n	8002938 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800290e:	f107 0210 	add.w	r2, r7, #16
 8002912:	2301      	movs	r3, #1
 8002914:	2135      	movs	r1, #53	; 0x35
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fe83 	bl	8002622 <hts221_read_reg>
 800291c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800291e:	7c3b      	ldrb	r3, [r7, #16]
 8002920:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	4413      	add	r3, r2
 8002930:	10db      	asrs	r3, r3, #3
 8002932:	b2da      	uxtb	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002938:	697b      	ldr	r3, [r7, #20]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 800294c:	2302      	movs	r3, #2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	2136      	movs	r1, #54	; 0x36
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fe65 	bl	8002622 <hts221_read_reg>
 8002958:	60f8      	str	r0, [r7, #12]
  return ret;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 800296e:	2302      	movs	r3, #2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	213a      	movs	r1, #58	; 0x3a
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff fe54 	bl	8002622 <hts221_read_reg>
 800297a:	60f8      	str	r0, [r7, #12]
  return ret;
 800297c:	68fb      	ldr	r3, [r7, #12]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8002990:	2302      	movs	r3, #2
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	213c      	movs	r1, #60	; 0x3c
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fe43 	bl	8002622 <hts221_read_reg>
 800299c:	60f8      	str	r0, [r7, #12]
  return ret;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 80029b2:	2302      	movs	r3, #2
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	213e      	movs	r1, #62	; 0x3e
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fe32 	bl	8002622 <hts221_read_reg>
 80029be:	60f8      	str	r0, [r7, #12]
  return ret;
 80029c0:	68fb      	ldr	r3, [r7, #12]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e04d      	b.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7b1a      	ldrb	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <LPS22HB_RegisterBusIO+0xc4>)
 8002a24:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <LPS22HB_RegisterBusIO+0xc8>)
 8002a2a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e020      	b.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4798      	blx	r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e016      	b.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d112      	bne.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2110      	movs	r1, #16
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9df 	bl	8002e36 <LPS22HB_Write_Reg>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002a84:	68fb      	ldr	r3, [r7, #12]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	080030f7 	.word	0x080030f7
 8002a94:	0800317d 	.word	0x0800317d

08002a98 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 faca 	bl	8003044 <LPS22HB_Initialize>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e004      	b.n	8002ac6 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d111      	bne.n	8002b04 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f877 	bl	8002bd4 <LPS22HB_PRESS_Disable>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	e00d      	b.n	8002b0e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f918 	bl	8002d28 <LPS22HB_TEMP_Disable>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e004      	b.n	8002b0e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	331c      	adds	r3, #28
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fca6 	bl	8003478 <lps22hb_device_id_get>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e000      	b.n	8002b3a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <LPS22HB_GetCapabilities+0x44>)
 8002b72:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <LPS22HB_GetCapabilities+0x44>)
 8002b78:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	42960000 	.word	0x42960000

08002b8c <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e014      	b.n	8002bcc <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 021c 	add.w	r2, r3, #28
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 fbd5 	bl	8003360 <lps22hb_data_rate_set>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e004      	b.n	8002bcc <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e024      	b.n	8002c34 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11a      	bne.n	8002c2a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 021c 	add.w	r2, r3, #28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	332b      	adds	r3, #43	; 0x2b
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 fbd3 	bl	80033ac <lps22hb_data_rate_get>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	e010      	b.n	8002c34 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	331c      	adds	r3, #28
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fba1 	bl	8003360 <lps22hb_data_rate_set>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
 8002c28:	e004      	b.n	8002c34 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f90f 	bl	8002e6c <LPS22HB_GetOutputDataRate>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c6e:	ed97 0a00 	vldr	s0, [r7]
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f94e 	bl	8002f14 <LPS22HB_SetOutputDataRate_When_Enabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	e005      	b.n	8002c88 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c7c:	ed97 0a00 	vldr	s0, [r7]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f99f 	bl	8002fc4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8002c86:	4603      	mov	r3, r0
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f00c f963 	bl	800ef6e <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	331c      	adds	r3, #28
 8002cac:	f107 020c 	add.w	r2, r7, #12
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fbbe 	bl	8003434 <lps22hb_pressure_raw_get>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 facc 	bl	8003264 <lps22hb_from_lsb_to_hpa>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e014      	b.n	8002d20 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f103 021c 	add.w	r2, r3, #28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f000 fb2b 	bl	8003360 <lps22hb_data_rate_set>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	e004      	b.n	8002d20 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e024      	b.n	8002d88 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11a      	bne.n	8002d7e <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f103 021c 	add.w	r2, r3, #28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	332b      	adds	r3, #43	; 0x2b
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 fb29 	bl	80033ac <lps22hb_data_rate_get>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e010      	b.n	8002d88 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	331c      	adds	r3, #28
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 faf7 	bl	8003360 <lps22hb_data_rate_set>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	e004      	b.n	8002d88 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f865 	bl	8002e6c <LPS22HB_GetOutputDataRate>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d106      	bne.n	8002dd0 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002dc2:	ed97 0a00 	vldr	s0, [r7]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8a4 	bl	8002f14 <LPS22HB_SetOutputDataRate_When_Enabled>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	e005      	b.n	8002ddc <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002dd0:	ed97 0a00 	vldr	s0, [r7]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8f5 	bl	8002fc4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8002dda:	4603      	mov	r3, r0
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	2202      	movs	r2, #2
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f00c f8b9 	bl	800ef6e <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	331c      	adds	r3, #28
 8002e00:	f107 020c 	add.w	r2, r7, #12
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fb25 	bl	8003456 <lps22hb_temperature_raw_get>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e00a      	b.n	8002e2e <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002e18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fa39 	bl	8003294 <lps22hb_from_lsb_to_degc>
 8002e22:	eef0 7a40 	vmov.f32	s15, s0
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
 8002e42:	4613      	mov	r3, r2
 8002e44:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 001c 	add.w	r0, r3, #28
 8002e4c:	1cba      	adds	r2, r7, #2
 8002e4e:	78f9      	ldrb	r1, [r7, #3]
 8002e50:	2301      	movs	r3, #1
 8002e52:	f000 f9ee 	bl	8003232 <lps22hb_write_reg>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	e000      	b.n	8002e64 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	331c      	adds	r3, #28
 8002e7e:	f107 020b 	add.w	r2, r7, #11
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fa91 	bl	80033ac <lps22hb_data_rate_get>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e031      	b.n	8002efa <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d829      	bhi.n	8002ef0 <LPS22HB_GetOutputDataRate+0x84>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <LPS22HB_GetOutputDataRate+0x38>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ebd 	.word	0x08002ebd
 8002ea8:	08002ec7 	.word	0x08002ec7
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	08002ee9 	.word	0x08002ee9
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
      break;
 8002ec4:	e018      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ecc:	601a      	str	r2, [r3, #0]
      break;
 8002ece:	e013      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <LPS22HB_GetOutputDataRate+0x98>)
 8002ed4:	601a      	str	r2, [r3, #0]
      break;
 8002ed6:	e00f      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <LPS22HB_GetOutputDataRate+0x9c>)
 8002edc:	601a      	str	r2, [r3, #0]
      break;
 8002ede:	e00b      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LPS22HB_GetOutputDataRate+0xa0>)
 8002ee4:	601a      	str	r2, [r3, #0]
      break;
 8002ee6:	e007      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <LPS22HB_GetOutputDataRate+0xa4>)
 8002eec:	601a      	str	r2, [r3, #0]
      break;
 8002eee:	e003      	b.n	8002ef8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	60fb      	str	r3, [r7, #12]
      break;
 8002ef6:	bf00      	nop
  }

  return ret;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	41200000 	.word	0x41200000
 8002f08:	41c80000 	.word	0x41c80000
 8002f0c:	42480000 	.word	0x42480000
 8002f10:	42960000 	.word	0x42960000

08002f14 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002f20:	edd7 7a00 	vldr	s15, [r7]
 8002f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	d801      	bhi.n	8002f36 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e021      	b.n	8002f7a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002f36:	edd7 7a00 	vldr	s15, [r7]
 8002f3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d801      	bhi.n	8002f4c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e016      	b.n	8002f7a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002f4c:	edd7 7a00 	vldr	s15, [r7]
 8002f50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d801      	bhi.n	8002f62 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00b      	b.n	8002f7a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002f62:	edd7 7a00 	vldr	s15, [r7]
 8002f66:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002fc0 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8002f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d801      	bhi.n	8002f78 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e000      	b.n	8002f7a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002f78:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002f7a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	331c      	adds	r3, #28
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f9eb 	bl	8003360 <lps22hb_data_rate_set>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
 8002f94:	e00f      	b.n	8002fb6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f103 021c 	add.w	r2, r3, #28
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	332b      	adds	r3, #43	; 0x2b
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fa02 	bl	80033ac <lps22hb_data_rate_get>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e000      	b.n	8002fb6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	42480000 	.word	0x42480000

08002fc4 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002fd0:	edd7 7a00 	vldr	s15, [r7]
 8002fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	d801      	bhi.n	8002fe6 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e021      	b.n	800302a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002fe6:	edd7 7a00 	vldr	s15, [r7]
 8002fea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	d801      	bhi.n	8002ffc <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e016      	b.n	800302a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002ffc:	edd7 7a00 	vldr	s15, [r7]
 8003000:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d801      	bhi.n	8003012 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800300e:	2303      	movs	r3, #3
 8003010:	e00b      	b.n	800302a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003012:	edd7 7a00 	vldr	s15, [r7]
 8003016:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003040 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800301a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d801      	bhi.n	8003028 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8003024:	2304      	movs	r3, #4
 8003026:	e000      	b.n	800302a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003028:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	42480000 	.word	0x42480000

08003044 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	331c      	adds	r3, #28
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa21 	bl	800349a <lps22hb_low_power_set>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e044      	b.n	80030ee <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	331c      	adds	r3, #28
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f978 	bl	8003360 <lps22hb_data_rate_set>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e038      	b.n	80030ee <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	331c      	adds	r3, #28
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f946 	bl	8003314 <lps22hb_low_pass_filter_mode_set>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	e02c      	b.n	80030ee <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	331c      	adds	r3, #28
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f914 	bl	80032c8 <lps22hb_block_data_update_set>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	e020      	b.n	80030ee <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	331c      	adds	r3, #28
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa13 	bl	80034e6 <lps22hb_auto_add_inc_set>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e010      	b.n	80030ee <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	331c      	adds	r3, #28
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa07 	bl	80034e6 <lps22hb_auto_add_inc_set>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	e004      	b.n	80030ee <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030f6:	b590      	push	{r4, r7, lr}
 80030f8:	b089      	sub	sp, #36	; 0x24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	461a      	mov	r2, r3
 8003102:	460b      	mov	r3, r1
 8003104:	72fb      	strb	r3, [r7, #11]
 8003106:	4613      	mov	r3, r2
 8003108:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	83fb      	strh	r3, [r7, #30]
 800311e:	e018      	b.n	8003152 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	695c      	ldr	r4, [r3, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	7b1b      	ldrb	r3, [r3, #12]
 8003128:	b298      	uxth	r0, r3
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	b29a      	uxth	r2, r3
 800312e:	8bfb      	ldrh	r3, [r7, #30]
 8003130:	4413      	add	r3, r2
 8003132:	b299      	uxth	r1, r3
 8003134:	8bfb      	ldrh	r3, [r7, #30]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	441a      	add	r2, r3
 800313a:	2301      	movs	r3, #1
 800313c:	47a0      	blx	r4
 800313e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e013      	b.n	8003174 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800314c:	8bfb      	ldrh	r3, [r7, #30]
 800314e:	3301      	adds	r3, #1
 8003150:	83fb      	strh	r3, [r7, #30]
 8003152:	8bfa      	ldrh	r2, [r7, #30]
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3e2      	bcc.n	8003120 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	e00a      	b.n	8003174 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	695c      	ldr	r4, [r3, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	7b1b      	ldrb	r3, [r3, #12]
 8003166:	b298      	uxth	r0, r3
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	b299      	uxth	r1, r3
 800316c:	893b      	ldrh	r3, [r7, #8]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	47a0      	blx	r4
 8003172:	4603      	mov	r3, r0
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3724      	adds	r7, #36	; 0x24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d121      	bne.n	80031e4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	83fb      	strh	r3, [r7, #30]
 80031a4:	e018      	b.n	80031d8 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	691c      	ldr	r4, [r3, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	7b1b      	ldrb	r3, [r3, #12]
 80031ae:	b298      	uxth	r0, r3
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	8bfb      	ldrh	r3, [r7, #30]
 80031b6:	4413      	add	r3, r2
 80031b8:	b299      	uxth	r1, r3
 80031ba:	8bfb      	ldrh	r3, [r7, #30]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	441a      	add	r2, r3
 80031c0:	2301      	movs	r3, #1
 80031c2:	47a0      	blx	r4
 80031c4:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e013      	b.n	80031fa <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80031d2:	8bfb      	ldrh	r3, [r7, #30]
 80031d4:	3301      	adds	r3, #1
 80031d6:	83fb      	strh	r3, [r7, #30]
 80031d8:	8bfa      	ldrh	r2, [r7, #30]
 80031da:	893b      	ldrh	r3, [r7, #8]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3e2      	bcc.n	80031a6 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	e00a      	b.n	80031fa <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	691c      	ldr	r4, [r3, #16]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	b298      	uxth	r0, r3
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	b299      	uxth	r1, r3
 80031f2:	893b      	ldrh	r3, [r7, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	47a0      	blx	r4
 80031f8:	4603      	mov	r3, r0
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	; 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003202:	b590      	push	{r4, r7, lr}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	461a      	mov	r2, r3
 800320e:	460b      	mov	r3, r1
 8003210:	72fb      	strb	r3, [r7, #11]
 8003212:	4613      	mov	r3, r2
 8003214:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685c      	ldr	r4, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6898      	ldr	r0, [r3, #8]
 800321e:	893b      	ldrh	r3, [r7, #8]
 8003220:	7af9      	ldrb	r1, [r7, #11]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	47a0      	blx	r4
 8003226:	6178      	str	r0, [r7, #20]
  return ret;
 8003228:	697b      	ldr	r3, [r7, #20]
}
 800322a:	4618      	mov	r0, r3
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}

08003232 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	461a      	mov	r2, r3
 800323e:	460b      	mov	r3, r1
 8003240:	72fb      	strb	r3, [r7, #11]
 8003242:	4613      	mov	r3, r2
 8003244:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681c      	ldr	r4, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6898      	ldr	r0, [r3, #8]
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	7af9      	ldrb	r1, [r7, #11]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	47a0      	blx	r4
 8003256:	6178      	str	r0, [r7, #20]
  return ret;
 8003258:	697b      	ldr	r3, [r7, #20]
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
	...

08003264 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003276:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003290 <lps22hb_from_lsb_to_hpa+0x2c>
 800327a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800327e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	45800000 	.word	0x45800000

08003294 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800329e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80032c4 <lps22hb_from_lsb_to_degc+0x30>
 80032ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	42c80000 	.word	0x42c80000

080032c8 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	2301      	movs	r3, #1
 80032da:	2110      	movs	r1, #16
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff90 	bl	8003202 <lps22hb_read_reg>
 80032e2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	7a3b      	ldrb	r3, [r7, #8]
 80032f4:	f362 0341 	bfi	r3, r2, #1, #1
 80032f8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80032fa:	f107 0208 	add.w	r2, r7, #8
 80032fe:	2301      	movs	r3, #1
 8003300:	2110      	movs	r1, #16
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff95 	bl	8003232 <lps22hb_write_reg>
 8003308:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800330a:	68fb      	ldr	r3, [r7, #12]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003320:	f107 0208 	add.w	r2, r7, #8
 8003324:	2301      	movs	r3, #1
 8003326:	2110      	movs	r1, #16
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff6a 	bl	8003202 <lps22hb_read_reg>
 800332e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	7a3b      	ldrb	r3, [r7, #8]
 8003340:	f362 0383 	bfi	r3, r2, #2, #2
 8003344:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003346:	f107 0208 	add.w	r2, r7, #8
 800334a:	2301      	movs	r3, #1
 800334c:	2110      	movs	r1, #16
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff6f 	bl	8003232 <lps22hb_write_reg>
 8003354:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800336c:	f107 0208 	add.w	r2, r7, #8
 8003370:	2301      	movs	r3, #1
 8003372:	2110      	movs	r1, #16
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff44 	bl	8003202 <lps22hb_read_reg>
 800337a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	b2da      	uxtb	r2, r3
 800338a:	7a3b      	ldrb	r3, [r7, #8]
 800338c:	f362 1306 	bfi	r3, r2, #4, #3
 8003390:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003392:	f107 0208 	add.w	r2, r7, #8
 8003396:	2301      	movs	r3, #1
 8003398:	2110      	movs	r1, #16
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff49 	bl	8003232 <lps22hb_write_reg>
 80033a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80033b6:	f107 0208 	add.w	r2, r7, #8
 80033ba:	2301      	movs	r3, #1
 80033bc:	2110      	movs	r1, #16
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff1f 	bl	8003202 <lps22hb_read_reg>
 80033c4:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 80033c6:	7a3b      	ldrb	r3, [r7, #8]
 80033c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d826      	bhi.n	8003420 <lps22hb_data_rate_get+0x74>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <lps22hb_data_rate_get+0x2c>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	08003401 	.word	0x08003401
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
      break;
 80033f6:	e017      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
      break;
 80033fe:	e013      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
      break;
 8003406:	e00f      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2203      	movs	r2, #3
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e00b      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2204      	movs	r2, #4
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e007      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2205      	movs	r2, #5
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e003      	b.n	8003428 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	bf00      	nop
  }

  return ret;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop

08003434 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 800343e:	2303      	movs	r3, #3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	2128      	movs	r1, #40	; 0x28
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fedc 	bl	8003202 <lps22hb_read_reg>
 800344a:	60f8      	str	r0, [r7, #12]
  return ret;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8003460:	2302      	movs	r3, #2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	212b      	movs	r1, #43	; 0x2b
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fecb 	bl	8003202 <lps22hb_read_reg>
 800346c:	60f8      	str	r0, [r7, #12]
  return ret;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8003482:	2301      	movs	r3, #1
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	210f      	movs	r1, #15
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff feba 	bl	8003202 <lps22hb_read_reg>
 800348e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 80034a6:	f107 0208 	add.w	r2, r7, #8
 80034aa:	2301      	movs	r3, #1
 80034ac:	211a      	movs	r1, #26
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fea7 	bl	8003202 <lps22hb_read_reg>
 80034b4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	7a3b      	ldrb	r3, [r7, #8]
 80034c6:	f362 0300 	bfi	r3, r2, #0, #1
 80034ca:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 80034cc:	f107 0208 	add.w	r2, r7, #8
 80034d0:	2301      	movs	r3, #1
 80034d2:	211a      	movs	r1, #26
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff feac 	bl	8003232 <lps22hb_write_reg>
 80034da:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80034f2:	f107 0208 	add.w	r2, r7, #8
 80034f6:	2301      	movs	r3, #1
 80034f8:	2111      	movs	r1, #17
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fe81 	bl	8003202 <lps22hb_read_reg>
 8003500:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	b2da      	uxtb	r2, r3
 8003510:	7a3b      	ldrb	r3, [r7, #8]
 8003512:	f362 1304 	bfi	r3, r2, #4, #1
 8003516:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8003518:	f107 0208 	add.w	r2, r7, #8
 800351c:	2301      	movs	r3, #1
 800351e:	2111      	movs	r1, #17
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fe86 	bl	8003232 <lps22hb_write_reg>
 8003526:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e04d      	b.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	7b1a      	ldrb	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 800358c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8003592:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e020      	b.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4798      	blx	r3
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e016      	b.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d112      	bne.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80035d0:	2301      	movs	r3, #1
 80035d2:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2123      	movs	r1, #35	; 0x23
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb52 	bl	8003c84 <LSM303AGR_ACC_Write_Reg>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	e000      	b.n	80035ee <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80035ec:	68fb      	ldr	r3, [r7, #12]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	08004495 	.word	0x08004495
 80035fc:	080044f7 	.word	0x080044f7

08003600 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	331c      	adds	r3, #28
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f948 	bl	80048a4 <lsm303agr_xl_block_data_update_set>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e02c      	b.n	800367a <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	331c      	adds	r3, #28
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fa77 	bl	8004b1a <lsm303agr_xl_fifo_mode_set>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	e020      	b.n	800367a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	331c      	adds	r3, #28
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f001 f84c 	bl	80046e4 <lsm303agr_xl_data_rate_set>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	e010      	b.n	800367a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	331c      	adds	r3, #28
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f8c2 	bl	80047e8 <lsm303agr_xl_full_scale_set>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e004      	b.n	800367a <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f87c 	bl	8003788 <LSM303AGR_ACC_Disable>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	e008      	b.n	80036ae <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	331c      	adds	r3, #28
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f9df 	bl	8004a8a <lsm303agr_xl_device_id_get>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e000      	b.n	80036da <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4a06      	ldr	r2, [pc, #24]	; (800373c <LSM303AGR_ACC_GetCapabilities+0x58>)
 8003724:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	43c80000 	.word	0x43c80000

08003740 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e014      	b.n	8003780 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 021c 	add.w	r2, r3, #28
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 ffbd 	bl	80046e4 <lsm303agr_xl_data_rate_set>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e004      	b.n	8003780 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e01f      	b.n	80037de <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f103 021c 	add.w	r2, r3, #28
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	332a      	adds	r3, #42	; 0x2a
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 ffc0 	bl	8004730 <lsm303agr_xl_data_rate_get>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e010      	b.n	80037de <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	331c      	adds	r3, #28
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 ff8e 	bl	80046e4 <lsm303agr_xl_data_rate_set>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e004      	b.n	80037de <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	331c      	adds	r3, #28
 80037f8:	f107 020b 	add.w	r2, r7, #11
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ff3c 	bl	800467c <lsm303agr_xl_operating_mode_get>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e02e      	b.n	800386e <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00d      	beq.n	8003832 <LSM303AGR_ACC_GetSensitivity+0x4c>
 8003816:	2b02      	cmp	r3, #2
 8003818:	d015      	beq.n	8003846 <LSM303AGR_ACC_GetSensitivity+0x60>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fca9 	bl	8004178 <LSM303AGR_ACC_GetSensitivityHR>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01a      	beq.n	8003862 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e01d      	b.n	800386e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fce5 	bl	8004204 <LSM303AGR_ACC_GetSensitivityNM>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e013      	b.n	800386e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fd21 	bl	8004290 <LSM303AGR_ACC_GetSensitivityLP>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	e009      	b.n	800386e <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	60fb      	str	r3, [r7, #12]
      break;
 8003860:	e004      	b.n	800386c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800386a:	bf00      	nop
  }

  return ret;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	331c      	adds	r3, #28
 800388a:	f107 020b 	add.w	r2, r7, #11
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fef3 	bl	800467c <lsm303agr_xl_operating_mode_get>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	e09f      	b.n	80039e2 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	331c      	adds	r3, #28
 80038a6:	f107 020a 	add.w	r2, r7, #10
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ff3f 	bl	8004730 <lsm303agr_xl_data_rate_get>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
 80038bc:	e091      	b.n	80039e2 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d148      	bne.n	8003956 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 80038c4:	7abb      	ldrb	r3, [r7, #10]
 80038c6:	2b09      	cmp	r3, #9
 80038c8:	d840      	bhi.n	800394c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003903 	.word	0x08003903
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	08003915 	.word	0x08003915
 80038e0:	0800391d 	.word	0x0800391d
 80038e4:	08003925 	.word	0x08003925
 80038e8:	0800392d 	.word	0x0800392d
 80038ec:	08003935 	.word	0x08003935
 80038f0:	0800393d 	.word	0x0800393d
 80038f4:	08003945 	.word	0x08003945
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
        break;
 8003900:	e06e      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003908:	601a      	str	r2, [r3, #0]
        break;
 800390a:	e069      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4a37      	ldr	r2, [pc, #220]	; (80039ec <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003910:	601a      	str	r2, [r3, #0]
        break;
 8003912:	e065      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4a36      	ldr	r2, [pc, #216]	; (80039f0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003918:	601a      	str	r2, [r3, #0]
        break;
 800391a:	e061      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4a35      	ldr	r2, [pc, #212]	; (80039f4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003920:	601a      	str	r2, [r3, #0]
        break;
 8003922:	e05d      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003928:	601a      	str	r2, [r3, #0]
        break;
 800392a:	e059      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4a33      	ldr	r2, [pc, #204]	; (80039fc <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003930:	601a      	str	r2, [r3, #0]
        break;
 8003932:	e055      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8003938:	601a      	str	r2, [r3, #0]
        break;
 800393a:	e051      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8003940:	601a      	str	r2, [r3, #0]
        break;
 8003942:	e04d      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8003948:	601a      	str	r2, [r3, #0]
        break;
 800394a:	e049      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	60fb      	str	r3, [r7, #12]
        break;
 8003952:	bf00      	nop
 8003954:	e044      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8003956:	7abb      	ldrb	r3, [r7, #10]
 8003958:	2b09      	cmp	r3, #9
 800395a:	d83d      	bhi.n	80039d8 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	0800398d 	.word	0x0800398d
 8003968:	08003997 	.word	0x08003997
 800396c:	080039a1 	.word	0x080039a1
 8003970:	080039a9 	.word	0x080039a9
 8003974:	080039b1 	.word	0x080039b1
 8003978:	080039b9 	.word	0x080039b9
 800397c:	080039c1 	.word	0x080039c1
 8003980:	080039c9 	.word	0x080039c9
 8003984:	080039d9 	.word	0x080039d9
 8003988:	080039d1 	.word	0x080039d1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
        break;
 8003994:	e024      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800399c:	601a      	str	r2, [r3, #0]
        break;
 800399e:	e01f      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80039a4:	601a      	str	r2, [r3, #0]
        break;
 80039a6:	e01b      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80039ac:	601a      	str	r2, [r3, #0]
        break;
 80039ae:	e017      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80039b4:	601a      	str	r2, [r3, #0]
        break;
 80039b6:	e013      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80039bc:	601a      	str	r2, [r3, #0]
        break;
 80039be:	e00f      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80039c4:	601a      	str	r2, [r3, #0]
        break;
 80039c6:	e00b      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80039cc:	601a      	str	r2, [r3, #0]
        break;
 80039ce:	e007      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 80039d4:	601a      	str	r2, [r3, #0]
        break;
 80039d6:	e003      	b.n	80039e0 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	60fb      	str	r3, [r7, #12]
        break;
 80039de:	bf00      	nop
    }
  }

  return ret;
 80039e0:	68fb      	ldr	r3, [r7, #12]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	41200000 	.word	0x41200000
 80039f0:	41c80000 	.word	0x41c80000
 80039f4:	42480000 	.word	0x42480000
 80039f8:	42c80000 	.word	0x42c80000
 80039fc:	43480000 	.word	0x43480000
 8003a00:	43c80000 	.word	0x43c80000
 8003a04:	44ca8000 	.word	0x44ca8000
 8003a08:	45a80000 	.word	0x45a80000
 8003a0c:	44a80000 	.word	0x44a80000

08003a10 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d106      	bne.n	8003a34 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003a26:	ed97 0a00 	vldr	s0, [r7]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fc76 	bl	800431c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	e005      	b.n	8003a40 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003a34:	ed97 0a00 	vldr	s0, [r7]
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fcd1 	bl	80043e0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8003a3e:	4603      	mov	r3, r0
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	331c      	adds	r3, #28
 8003a5a:	f107 020b 	add.w	r2, r7, #11
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fee7 	bl	8004834 <lsm303agr_xl_full_scale_get>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	e023      	b.n	8003aba <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003a72:	7afb      	ldrb	r3, [r7, #11]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d81b      	bhi.n	8003ab0 <LSM303AGR_ACC_GetFullScale+0x68>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <LSM303AGR_ACC_GetFullScale+0x38>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a99 	.word	0x08003a99
 8003a88:	08003aa1 	.word	0x08003aa1
 8003a8c:	08003aa9 	.word	0x08003aa9
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	601a      	str	r2, [r3, #0]
      break;
 8003a96:	e00f      	b.n	8003ab8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]
      break;
 8003a9e:	e00b      	b.n	8003ab8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
      break;
 8003aa6:	e007      	b.n	8003ab8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2210      	movs	r2, #16
 8003aac:	601a      	str	r2, [r3, #0]
      break;
 8003aae:	e003      	b.n	8003ab8 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab4:	60fb      	str	r3, [r7, #12]
      break;
 8003ab6:	bf00      	nop
  }

  return ret;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop

08003ac4 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	dd0b      	ble.n	8003aec <LSM303AGR_ACC_SetFullScale+0x28>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	dd06      	ble.n	8003ae8 <LSM303AGR_ACC_SetFullScale+0x24>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	dc01      	bgt.n	8003ae4 <LSM303AGR_ACC_SetFullScale+0x20>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e004      	b.n	8003aee <LSM303AGR_ACC_SetFullScale+0x2a>
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e002      	b.n	8003aee <LSM303AGR_ACC_SetFullScale+0x2a>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LSM303AGR_ACC_SetFullScale+0x2a>
 8003aec:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8003aee:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	331c      	adds	r3, #28
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fe75 	bl	80047e8 <lsm303agr_xl_full_scale_set>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	e000      	b.n	8003b0c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	331c      	adds	r3, #28
 8003b2a:	f107 020f 	add.w	r2, r7, #15
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fda3 	bl	800467c <lsm303agr_xl_operating_mode_get>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e047      	b.n	8003bd2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d006      	beq.n	8003b56 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d007      	beq.n	8003b5c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8003b50:	2310      	movs	r3, #16
 8003b52:	83fb      	strh	r3, [r7, #30]
      break;
 8003b54:	e00a      	b.n	8003b6c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003b56:	2340      	movs	r3, #64	; 0x40
 8003b58:	83fb      	strh	r3, [r7, #30]
      break;
 8003b5a:	e007      	b.n	8003b6c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8003b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b60:	83fb      	strh	r3, [r7, #30]
      break;
 8003b62:	e003      	b.n	8003b6c <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	61bb      	str	r3, [r7, #24]
      break;
 8003b6a:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d101      	bne.n	8003b78 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	e02c      	b.n	8003bd2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	331c      	adds	r3, #28
 8003b7c:	f107 0210 	add.w	r2, r7, #16
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 feb4 	bl	80048f0 <lsm303agr_acceleration_raw_get>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	e01e      	b.n	8003bd2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8003b94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8003ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8003bbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	809a      	strh	r2, [r3, #4]

  return ret;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003bea:	f107 0310 	add.w	r3, r7, #16
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff8f 	bl	8003b14 <LSM303AGR_ACC_GetAxesRaw>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	e03c      	b.n	8003c7c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fdec 	bl	80037e6 <LSM303AGR_ACC_GetSensitivity>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	e030      	b.n	8003c7c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003c1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c32:	ee17 2a90 	vmov	r2, s15
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003c3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003c5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c72:	ee17 2a90 	vmov	r2, s15
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
 8003c90:	4613      	mov	r3, r2
 8003c92:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f103 001c 	add.w	r0, r3, #28
 8003c9a:	1cba      	adds	r2, r7, #2
 8003c9c:	78f9      	ldrb	r1, [r7, #3]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 fcd4 	bl	800464c <lsm303agr_write_reg>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e000      	b.n	8003cb2 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e04b      	b.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	7b1a      	ldrb	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003d14:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003d1a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e01e      	b.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4798      	blx	r3
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e014      	b.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	331c      	adds	r3, #28
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 ff01 	bl	8004b66 <lsm303agr_mag_i2c_interface_set>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e000      	b.n	8003d72 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08004559 	.word	0x08004559
 8003d80:	080045bb 	.word	0x080045bb

08003d84 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	331c      	adds	r3, #28
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe42 	bl	8004a1c <lsm303agr_mag_block_data_update_set>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	e028      	b.n	8003df6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	331c      	adds	r3, #28
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fdb1 	bl	8004912 <lsm303agr_mag_operating_mode_set>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	e01c      	b.n	8003df6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	331c      	adds	r3, #28
 8003dc0:	2103      	movs	r1, #3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fdcb 	bl	800495e <lsm303agr_mag_data_rate_set>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e010      	b.n	8003df6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	331c      	adds	r3, #28
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fe77 	bl	8004ace <lsm303agr_mag_self_test_set>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e004      	b.n	8003df6 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f874 	bl	8003ef4 <LSM303AGR_MAG_Disable>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	e004      	b.n	8003e22 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	331c      	adds	r3, #28
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fe36 	bl	8004aac <lsm303agr_mag_device_id_get>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	e000      	b.n	8003e4e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2201      	movs	r2, #1
 8003e72:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2232      	movs	r2, #50	; 0x32
 8003e8a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003ea0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	42c80000 	.word	0x42c80000

08003eb4 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e010      	b.n	8003eec <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	331c      	adds	r3, #28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fd1e 	bl	8004912 <lsm303agr_mag_operating_mode_set>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	e004      	b.n	8003eec <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e010      	b.n	8003f2c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	331c      	adds	r3, #28
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fcfe 	bl	8004912 <lsm303agr_mag_operating_mode_set>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	e004      	b.n	8003f2c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003f44:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	331c      	adds	r3, #28
 8003f66:	f107 020b 	add.w	r2, r7, #11
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd1d 	bl	80049ac <lsm303agr_mag_data_rate_get>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e023      	b.n	8003fc6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d81b      	bhi.n	8003fbc <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fa5 	.word	0x08003fa5
 8003f94:	08003fad 	.word	0x08003fad
 8003f98:	08003fb5 	.word	0x08003fb5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003fa0:	601a      	str	r2, [r3, #0]
      break;
 8003fa2:	e00f      	b.n	8003fc4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003fa8:	601a      	str	r2, [r3, #0]
      break;
 8003faa:	e00b      	b.n	8003fc4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003fb0:	601a      	str	r2, [r3, #0]
      break;
 8003fb2:	e007      	b.n	8003fc4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003fb8:	601a      	str	r2, [r3, #0]
      break;
 8003fba:	e003      	b.n	8003fc4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	60fb      	str	r3, [r7, #12]
      break;
 8003fc2:	bf00      	nop
  }

  return ret;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	41200000 	.word	0x41200000
 8003fd4:	41a00000 	.word	0x41a00000
 8003fd8:	42480000 	.word	0x42480000
 8003fdc:	42c80000 	.word	0x42c80000

08003fe0 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003fec:	edd7 7a00 	vldr	s15, [r7]
 8003ff0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	d801      	bhi.n	8004002 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003ffe:	2300      	movs	r3, #0
 8004000:	e016      	b.n	8004030 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8004002:	edd7 7a00 	vldr	s15, [r7]
 8004006:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d801      	bhi.n	8004018 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8004014:	2301      	movs	r3, #1
 8004016:	e00b      	b.n	8004030 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8004018:	edd7 7a00 	vldr	s15, [r7]
 800401c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004058 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8004020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	d801      	bhi.n	800402e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800402a:	2302      	movs	r3, #2
 800402c:	e000      	b.n	8004030 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800402e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8004030:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	331c      	adds	r3, #28
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fc8f 	bl	800495e <lsm303agr_mag_data_rate_set>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e000      	b.n	800404e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	42480000 	.word	0x42480000

0800405c <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2232      	movs	r2, #50	; 0x32
 800406a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	331c      	adds	r3, #28
 80040a0:	f107 0208 	add.w	r2, r7, #8
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fcde 	bl	8004a68 <lsm303agr_magnetic_raw_get>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e00c      	b.n	80040d2 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80040b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80040c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80040c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	331c      	adds	r3, #28
 80040e8:	f107 0210 	add.w	r2, r7, #16
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fcba 	bl	8004a68 <lsm303agr_magnetic_raw_get>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	e036      	b.n	800416e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff14 	bl	8003f34 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800410c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004118:	edd7 7a03 	vldr	s15, [r7, #12]
 800411c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004124:	ee17 2a90 	vmov	r2, s15
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800412c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004138:	edd7 7a03 	vldr	s15, [r7, #12]
 800413c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004144:	ee17 2a90 	vmov	r2, s15
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800414c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004158:	edd7 7a03 	vldr	s15, [r7, #12]
 800415c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004164:	ee17 2a90 	vmov	r2, s15
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	331c      	adds	r3, #28
 800418a:	f107 020b 	add.w	r2, r7, #11
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fb4f 	bl	8004834 <lsm303agr_xl_full_scale_get>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 800419c:	f04f 33ff 	mov.w	r3, #4294967295
 80041a0:	e023      	b.n	80041ea <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80041a2:	7afb      	ldrb	r3, [r7, #11]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d81b      	bhi.n	80041e0 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041c9 	.word	0x080041c9
 80041b8:	080041d1 	.word	0x080041d1
 80041bc:	080041d9 	.word	0x080041d9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80041c4:	601a      	str	r2, [r3, #0]
      break;
 80041c6:	e00f      	b.n	80041e8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80041cc:	601a      	str	r2, [r3, #0]
      break;
 80041ce:	e00b      	b.n	80041e8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80041d4:	601a      	str	r2, [r3, #0]
      break;
 80041d6:	e007      	b.n	80041e8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80041dc:	601a      	str	r2, [r3, #0]
      break;
 80041de:	e003      	b.n	80041e8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	60fb      	str	r3, [r7, #12]
      break;
 80041e6:	bf00      	nop
  }

  return ret;
 80041e8:	68fb      	ldr	r3, [r7, #12]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	3f7ae148 	.word	0x3f7ae148
 80041f8:	3ff9999a 	.word	0x3ff9999a
 80041fc:	4079999a 	.word	0x4079999a
 8004200:	413b851f 	.word	0x413b851f

08004204 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	331c      	adds	r3, #28
 8004216:	f107 020b 	add.w	r2, r7, #11
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fb09 	bl	8004834 <lsm303agr_xl_full_scale_get>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	e023      	b.n	8004276 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d81b      	bhi.n	800426c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004255 	.word	0x08004255
 8004244:	0800425d 	.word	0x0800425d
 8004248:	08004265 	.word	0x08004265
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8004250:	601a      	str	r2, [r3, #0]
      break;
 8004252:	e00f      	b.n	8004274 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8004258:	601a      	str	r2, [r3, #0]
      break;
 800425a:	e00b      	b.n	8004274 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8004260:	601a      	str	r2, [r3, #0]
      break;
 8004262:	e007      	b.n	8004274 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8004268:	601a      	str	r2, [r3, #0]
      break;
 800426a:	e003      	b.n	8004274 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	60fb      	str	r3, [r7, #12]
      break;
 8004272:	bf00      	nop
  }

  return ret;
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	4079999a 	.word	0x4079999a
 8004284:	40fa3d71 	.word	0x40fa3d71
 8004288:	417a147b 	.word	0x417a147b
 800428c:	423b999a 	.word	0x423b999a

08004290 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	331c      	adds	r3, #28
 80042a2:	f107 020b 	add.w	r2, r7, #11
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fac3 	bl	8004834 <lsm303agr_xl_full_scale_get>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	e023      	b.n	8004302 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d81b      	bhi.n	80042f8 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	080042e9 	.word	0x080042e9
 80042d4:	080042f1 	.word	0x080042f1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80042dc:	601a      	str	r2, [r3, #0]
      break;
 80042de:	e00f      	b.n	8004300 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80042e4:	601a      	str	r2, [r3, #0]
      break;
 80042e6:	e00b      	b.n	8004300 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80042ec:	601a      	str	r2, [r3, #0]
      break;
 80042ee:	e007      	b.n	8004300 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80042f4:	601a      	str	r2, [r3, #0]
      break;
 80042f6:	e003      	b.n	8004300 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80042f8:	f04f 33ff 	mov.w	r3, #4294967295
 80042fc:	60fb      	str	r3, [r7, #12]
      break;
 80042fe:	bf00      	nop
  }

  return ret;
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	417a147b 	.word	0x417a147b
 8004310:	41fa147b 	.word	0x41fa147b
 8004314:	427a147b 	.word	0x427a147b
 8004318:	433b947b 	.word	0x433b947b

0800431c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8004328:	edd7 7a00 	vldr	s15, [r7]
 800432c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	d801      	bhi.n	800433e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800433a:	2301      	movs	r3, #1
 800433c:	e037      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800433e:	edd7 7a00 	vldr	s15, [r7]
 8004342:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	d801      	bhi.n	8004354 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004350:	2302      	movs	r3, #2
 8004352:	e02c      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004354:	edd7 7a00 	vldr	s15, [r7]
 8004358:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800435c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d801      	bhi.n	800436a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004366:	2303      	movs	r3, #3
 8004368:	e021      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800436a:	edd7 7a00 	vldr	s15, [r7]
 800436e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80043d4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8004372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d801      	bhi.n	8004380 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 800437c:	2304      	movs	r3, #4
 800437e:	e016      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004380:	edd7 7a00 	vldr	s15, [r7]
 8004384:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80043d8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	d801      	bhi.n	8004396 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004392:	2305      	movs	r3, #5
 8004394:	e00b      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004396:	edd7 7a00 	vldr	s15, [r7]
 800439a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80043dc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800439e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d801      	bhi.n	80043ac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80043a8:	2306      	movs	r3, #6
 80043aa:	e000      	b.n	80043ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80043ac:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80043ae:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	331c      	adds	r3, #28
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f993 	bl	80046e4 <lsm303agr_xl_data_rate_set>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	e000      	b.n	80043cc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	42480000 	.word	0x42480000
 80043d8:	42c80000 	.word	0x42c80000
 80043dc:	43480000 	.word	0x43480000

080043e0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80043ec:	edd7 7a00 	vldr	s15, [r7]
 80043f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	d801      	bhi.n	8004402 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80043fe:	2301      	movs	r3, #1
 8004400:	e037      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004402:	edd7 7a00 	vldr	s15, [r7]
 8004406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800440a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d801      	bhi.n	8004418 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004414:	2302      	movs	r3, #2
 8004416:	e02c      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004418:	edd7 7a00 	vldr	s15, [r7]
 800441c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d801      	bhi.n	800442e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800442a:	2303      	movs	r3, #3
 800442c:	e021      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800442e:	edd7 7a00 	vldr	s15, [r7]
 8004432:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004488 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	d801      	bhi.n	8004444 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004440:	2304      	movs	r3, #4
 8004442:	e016      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004444:	edd7 7a00 	vldr	s15, [r7]
 8004448:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800448c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800444c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d801      	bhi.n	800445a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004456:	2305      	movs	r3, #5
 8004458:	e00b      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800445a:	edd7 7a00 	vldr	s15, [r7]
 800445e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004490 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	d801      	bhi.n	8004470 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800446c:	2306      	movs	r3, #6
 800446e:	e000      	b.n	8004472 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004470:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	42480000 	.word	0x42480000
 800448c:	42c80000 	.word	0x42c80000
 8004490:	43480000 	.word	0x43480000

08004494 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	460b      	mov	r3, r1
 80044a2:	72fb      	strb	r3, [r7, #11]
 80044a4:	4613      	mov	r3, r2
 80044a6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10e      	bne.n	80044d2 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	695c      	ldr	r4, [r3, #20]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	7b1b      	ldrb	r3, [r3, #12]
 80044bc:	b298      	uxth	r0, r3
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	b299      	uxth	r1, r3
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	47a0      	blx	r4
 80044ce:	4603      	mov	r3, r0
 80044d0:	e00d      	b.n	80044ee <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	695c      	ldr	r4, [r3, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	7b1b      	ldrb	r3, [r3, #12]
 80044da:	b298      	uxth	r0, r3
 80044dc:	7afb      	ldrb	r3, [r7, #11]
 80044de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	b299      	uxth	r1, r3
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	47a0      	blx	r4
 80044ec:	4603      	mov	r3, r0
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}

080044f6 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	461a      	mov	r2, r3
 8004502:	460b      	mov	r3, r1
 8004504:	72fb      	strb	r3, [r7, #11]
 8004506:	4613      	mov	r3, r2
 8004508:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10e      	bne.n	8004534 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	691c      	ldr	r4, [r3, #16]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	7b1b      	ldrb	r3, [r3, #12]
 800451e:	b298      	uxth	r0, r3
 8004520:	7afb      	ldrb	r3, [r7, #11]
 8004522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004526:	b2db      	uxtb	r3, r3
 8004528:	b299      	uxth	r1, r3
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	47a0      	blx	r4
 8004530:	4603      	mov	r3, r0
 8004532:	e00d      	b.n	8004550 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	691c      	ldr	r4, [r3, #16]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	7b1b      	ldrb	r3, [r3, #12]
 800453c:	b298      	uxth	r0, r3
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004544:	b2db      	uxtb	r3, r3
 8004546:	b299      	uxth	r1, r3
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	47a0      	blx	r4
 800454e:	4603      	mov	r3, r0
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}

08004558 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	460b      	mov	r3, r1
 8004566:	72fb      	strb	r3, [r7, #11]
 8004568:	4613      	mov	r3, r2
 800456a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10e      	bne.n	8004596 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	695c      	ldr	r4, [r3, #20]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	7b1b      	ldrb	r3, [r3, #12]
 8004580:	b298      	uxth	r0, r3
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004588:	b2db      	uxtb	r3, r3
 800458a:	b299      	uxth	r1, r3
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	47a0      	blx	r4
 8004592:	4603      	mov	r3, r0
 8004594:	e00d      	b.n	80045b2 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	695c      	ldr	r4, [r3, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	7b1b      	ldrb	r3, [r3, #12]
 800459e:	b298      	uxth	r0, r3
 80045a0:	7afb      	ldrb	r3, [r7, #11]
 80045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	b299      	uxth	r1, r3
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	47a0      	blx	r4
 80045b0:	4603      	mov	r3, r0
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}

080045ba <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045ba:	b590      	push	{r4, r7, lr}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	461a      	mov	r2, r3
 80045c6:	460b      	mov	r3, r1
 80045c8:	72fb      	strb	r3, [r7, #11]
 80045ca:	4613      	mov	r3, r2
 80045cc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	691c      	ldr	r4, [r3, #16]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	7b1b      	ldrb	r3, [r3, #12]
 80045e2:	b298      	uxth	r0, r3
 80045e4:	7afb      	ldrb	r3, [r7, #11]
 80045e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	b299      	uxth	r1, r3
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	47a0      	blx	r4
 80045f4:	4603      	mov	r3, r0
 80045f6:	e00d      	b.n	8004614 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	691c      	ldr	r4, [r3, #16]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	7b1b      	ldrb	r3, [r3, #12]
 8004600:	b298      	uxth	r0, r3
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004608:	b2db      	uxtb	r3, r3
 800460a:	b299      	uxth	r1, r3
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	47a0      	blx	r4
 8004612:	4603      	mov	r3, r0
  }
}
 8004614:	4618      	mov	r0, r3
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd90      	pop	{r4, r7, pc}

0800461c <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	461a      	mov	r2, r3
 8004628:	460b      	mov	r3, r1
 800462a:	72fb      	strb	r3, [r7, #11]
 800462c:	4613      	mov	r3, r2
 800462e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685c      	ldr	r4, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6898      	ldr	r0, [r3, #8]
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	7af9      	ldrb	r1, [r7, #11]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	47a0      	blx	r4
 8004640:	6178      	str	r0, [r7, #20]
  return ret;
 8004642:	697b      	ldr	r3, [r7, #20]
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	461a      	mov	r2, r3
 8004658:	460b      	mov	r3, r1
 800465a:	72fb      	strb	r3, [r7, #11]
 800465c:	4613      	mov	r3, r2
 800465e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681c      	ldr	r4, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6898      	ldr	r0, [r3, #8]
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	7af9      	ldrb	r1, [r7, #11]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	47a0      	blx	r4
 8004670:	6178      	str	r0, [r7, #20]
  return ret;
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004686:	f107 020c 	add.w	r2, r7, #12
 800468a:	2301      	movs	r3, #1
 800468c:	2120      	movs	r1, #32
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ffc4 	bl	800461c <lsm303agr_read_reg>
 8004694:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	2301      	movs	r3, #1
 80046a2:	2123      	movs	r1, #35	; 0x23
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ffb9 	bl	800461c <lsm303agr_read_reg>
 80046aa:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 80046ac:	7b3b      	ldrb	r3, [r7, #12]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e00c      	b.n	80046da <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80046c0:	7c3b      	ldrb	r3, [r7, #16]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80046f0:	f107 0208 	add.w	r2, r7, #8
 80046f4:	2301      	movs	r3, #1
 80046f6:	2120      	movs	r1, #32
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff8f 	bl	800461c <lsm303agr_read_reg>
 80046fe:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	b2da      	uxtb	r2, r3
 800470e:	7a3b      	ldrb	r3, [r7, #8]
 8004710:	f362 1307 	bfi	r3, r2, #4, #4
 8004714:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	2301      	movs	r3, #1
 800471c:	2120      	movs	r1, #32
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff94 	bl	800464c <lsm303agr_write_reg>
 8004724:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800473a:	f107 0208 	add.w	r2, r7, #8
 800473e:	2301      	movs	r3, #1
 8004740:	2120      	movs	r1, #32
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff6a 	bl	800461c <lsm303agr_read_reg>
 8004748:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 800474a:	7a3b      	ldrb	r3, [r7, #8]
 800474c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b09      	cmp	r3, #9
 8004754:	d83e      	bhi.n	80047d4 <lsm303agr_xl_data_rate_get+0xa4>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <lsm303agr_xl_data_rate_get+0x2c>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004785 	.word	0x08004785
 8004760:	0800478d 	.word	0x0800478d
 8004764:	08004795 	.word	0x08004795
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047a5 	.word	0x080047a5
 8004770:	080047ad 	.word	0x080047ad
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047bd 	.word	0x080047bd
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047cd 	.word	0x080047cd
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
      break;
 800478a:	e027      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
      break;
 8004792:	e023      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]
      break;
 800479a:	e01f      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2203      	movs	r2, #3
 80047a0:	701a      	strb	r2, [r3, #0]
      break;
 80047a2:	e01b      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	701a      	strb	r2, [r3, #0]
      break;
 80047aa:	e017      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2205      	movs	r2, #5
 80047b0:	701a      	strb	r2, [r3, #0]
      break;
 80047b2:	e013      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2206      	movs	r2, #6
 80047b8:	701a      	strb	r2, [r3, #0]
      break;
 80047ba:	e00f      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2207      	movs	r2, #7
 80047c0:	701a      	strb	r2, [r3, #0]
      break;
 80047c2:	e00b      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2208      	movs	r2, #8
 80047c8:	701a      	strb	r2, [r3, #0]
      break;
 80047ca:	e007      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2209      	movs	r2, #9
 80047d0:	701a      	strb	r2, [r3, #0]
      break;
 80047d2:	e003      	b.n	80047dc <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
      break;
 80047da:	bf00      	nop
  }

  return ret;
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop

080047e8 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80047f4:	f107 0208 	add.w	r2, r7, #8
 80047f8:	2301      	movs	r3, #1
 80047fa:	2123      	movs	r1, #35	; 0x23
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff0d 	bl	800461c <lsm303agr_read_reg>
 8004802:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	b2da      	uxtb	r2, r3
 8004812:	7a3b      	ldrb	r3, [r7, #8]
 8004814:	f362 1305 	bfi	r3, r2, #4, #2
 8004818:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800481a:	f107 0208 	add.w	r2, r7, #8
 800481e:	2301      	movs	r3, #1
 8004820:	2123      	movs	r1, #35	; 0x23
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff12 	bl	800464c <lsm303agr_write_reg>
 8004828:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800483e:	f107 0208 	add.w	r2, r7, #8
 8004842:	2301      	movs	r3, #1
 8004844:	2123      	movs	r1, #35	; 0x23
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff fee8 	bl	800461c <lsm303agr_read_reg>
 800484c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 800484e:	7a3b      	ldrb	r3, [r7, #8]
 8004850:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d81a      	bhi.n	8004890 <lsm303agr_xl_full_scale_get+0x5c>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <lsm303agr_xl_full_scale_get+0x2c>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004871 	.word	0x08004871
 8004864:	08004879 	.word	0x08004879
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e00f      	b.n	8004898 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
      break;
 800487e:	e00b      	b.n	8004898 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	e007      	b.n	8004898 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2203      	movs	r2, #3
 800488c:	701a      	strb	r2, [r3, #0]
      break;
 800488e:	e003      	b.n	8004898 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
      break;
 8004896:	bf00      	nop
  }
  return ret;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop

080048a4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80048b0:	f107 0208 	add.w	r2, r7, #8
 80048b4:	2301      	movs	r3, #1
 80048b6:	2123      	movs	r1, #35	; 0x23
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff feaf 	bl	800461c <lsm303agr_read_reg>
 80048be:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	7a3b      	ldrb	r3, [r7, #8]
 80048d0:	f362 13c7 	bfi	r3, r2, #7, #1
 80048d4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80048d6:	f107 0208 	add.w	r2, r7, #8
 80048da:	2301      	movs	r3, #1
 80048dc:	2123      	movs	r1, #35	; 0x23
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff feb4 	bl	800464c <lsm303agr_write_reg>
 80048e4:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80048fa:	2306      	movs	r3, #6
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	2128      	movs	r1, #40	; 0x28
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fe8b 	bl	800461c <lsm303agr_read_reg>
 8004906:	60f8      	str	r0, [r7, #12]
  return ret;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800491e:	f107 0208 	add.w	r2, r7, #8
 8004922:	2301      	movs	r3, #1
 8004924:	2160      	movs	r1, #96	; 0x60
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fe78 	bl	800461c <lsm303agr_read_reg>
 800492c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10f      	bne.n	8004954 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	b2da      	uxtb	r2, r3
 800493c:	7a3b      	ldrb	r3, [r7, #8]
 800493e:	f362 0301 	bfi	r3, r2, #0, #2
 8004942:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004944:	f107 0208 	add.w	r2, r7, #8
 8004948:	2301      	movs	r3, #1
 800494a:	2160      	movs	r1, #96	; 0x60
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fe7d 	bl	800464c <lsm303agr_write_reg>
 8004952:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8004954:	68fb      	ldr	r3, [r7, #12]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800496a:	f107 0208 	add.w	r2, r7, #8
 800496e:	2301      	movs	r3, #1
 8004970:	2160      	movs	r1, #96	; 0x60
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fe52 	bl	800461c <lsm303agr_read_reg>
 8004978:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10f      	bne.n	80049a0 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	b2da      	uxtb	r2, r3
 8004988:	7a3b      	ldrb	r3, [r7, #8]
 800498a:	f362 0383 	bfi	r3, r2, #2, #2
 800498e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004990:	f107 0208 	add.w	r2, r7, #8
 8004994:	2301      	movs	r3, #1
 8004996:	2160      	movs	r1, #96	; 0x60
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff fe57 	bl	800464c <lsm303agr_write_reg>
 800499e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80049b6:	f107 0208 	add.w	r2, r7, #8
 80049ba:	2301      	movs	r3, #1
 80049bc:	2160      	movs	r1, #96	; 0x60
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fe2c 	bl	800461c <lsm303agr_read_reg>
 80049c4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 80049c6:	7a3b      	ldrb	r3, [r7, #8]
 80049c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d81a      	bhi.n	8004a08 <lsm303agr_mag_data_rate_get+0x5c>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <lsm303agr_mag_data_rate_get+0x2c>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f1 	.word	0x080049f1
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
      break;
 80049ee:	e00f      	b.n	8004a10 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
      break;
 80049f6:	e00b      	b.n	8004a10 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
      break;
 80049fe:	e007      	b.n	8004a10 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e003      	b.n	8004a10 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	bf00      	nop
  }
  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop

08004a1c <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004a28:	f107 0208 	add.w	r2, r7, #8
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	2162      	movs	r1, #98	; 0x62
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fdf3 	bl	800461c <lsm303agr_read_reg>
 8004a36:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	7a3b      	ldrb	r3, [r7, #8]
 8004a48:	f362 1304 	bfi	r3, r2, #4, #1
 8004a4c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004a4e:	f107 0208 	add.w	r2, r7, #8
 8004a52:	2301      	movs	r3, #1
 8004a54:	2162      	movs	r1, #98	; 0x62
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fdf8 	bl	800464c <lsm303agr_write_reg>
 8004a5c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004a72:	2306      	movs	r3, #6
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	2168      	movs	r1, #104	; 0x68
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fdcf 	bl	800461c <lsm303agr_read_reg>
 8004a7e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8004a94:	2301      	movs	r3, #1
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	210f      	movs	r1, #15
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fdbe 	bl	800461c <lsm303agr_read_reg>
 8004aa0:	60f8      	str	r0, [r7, #12]
  return ret;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	214f      	movs	r1, #79	; 0x4f
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fdad 	bl	800461c <lsm303agr_read_reg>
 8004ac2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004ada:	f107 0208 	add.w	r2, r7, #8
 8004ade:	2301      	movs	r3, #1
 8004ae0:	2162      	movs	r1, #98	; 0x62
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fd9a 	bl	800461c <lsm303agr_read_reg>
 8004ae8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	7a3b      	ldrb	r3, [r7, #8]
 8004afa:	f362 0341 	bfi	r3, r2, #1, #1
 8004afe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004b00:	f107 0208 	add.w	r2, r7, #8
 8004b04:	2301      	movs	r3, #1
 8004b06:	2162      	movs	r1, #98	; 0x62
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd9f 	bl	800464c <lsm303agr_write_reg>
 8004b0e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004b26:	f107 0208 	add.w	r2, r7, #8
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	212e      	movs	r1, #46	; 0x2e
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fd74 	bl	800461c <lsm303agr_read_reg>
 8004b34:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	7a3b      	ldrb	r3, [r7, #8]
 8004b46:	f362 1387 	bfi	r3, r2, #6, #2
 8004b4a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004b4c:	f107 0208 	add.w	r2, r7, #8
 8004b50:	2301      	movs	r3, #1
 8004b52:	212e      	movs	r1, #46	; 0x2e
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fd79 	bl	800464c <lsm303agr_write_reg>
 8004b5a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004b72:	f107 0208 	add.w	r2, r7, #8
 8004b76:	2301      	movs	r3, #1
 8004b78:	2162      	movs	r1, #98	; 0x62
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fd4e 	bl	800461c <lsm303agr_read_reg>
 8004b80:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10f      	bne.n	8004ba8 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	7a3b      	ldrb	r3, [r7, #8]
 8004b92:	f362 1345 	bfi	r3, r2, #5, #1
 8004b96:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004b98:	f107 0208 	add.w	r2, r7, #8
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	2162      	movs	r1, #98	; 0x62
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fd53 	bl	800464c <lsm303agr_write_reg>
 8004ba6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e04d      	b.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	7b1a      	ldrb	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <LSM6DSL_RegisterBusIO+0xc4>)
 8004c0c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <LSM6DSL_RegisterBusIO+0xc8>)
 8004c12:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e020      	b.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4798      	blx	r3
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e016      	b.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d112      	bne.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004c50:	230c      	movs	r3, #12
 8004c52:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	461a      	mov	r2, r3
 8004c58:	2112      	movs	r1, #18
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fd2d 	bl	80056ba <LSM6DSL_Write_Reg>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08005b29 	.word	0x08005b29
 8004c7c:	08005b5f 	.word	0x08005b5f

08004c80 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	331c      	adds	r3, #28
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f9e5 	bl	800605e <lsm6dsl_auto_increment_set>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e054      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	331c      	adds	r3, #28
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f980 	bl	8005fac <lsm6dsl_block_data_update_set>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	e048      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	331c      	adds	r3, #28
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f9f3 	bl	80060aa <lsm6dsl_fifo_mode_set>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	e03c      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	331c      	adds	r3, #28
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ffe6 	bl	8005cb0 <lsm6dsl_xl_data_rate_set>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	e02c      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	331c      	adds	r3, #28
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 ff7c 	bl	8005bf4 <lsm6dsl_xl_full_scale_set>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	e020      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	331c      	adds	r3, #28
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f8c0 	bl	8005e9c <lsm6dsl_gy_data_rate_set>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e010      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	331c      	adds	r3, #28
 8004d2c:	2106      	movs	r1, #6
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f84c 	bl	8005dcc <lsm6dsl_gy_full_scale_set>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	e004      	b.n	8004d4a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f888 	bl	8004e70 <LSM6DSL_ACC_Disable>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6a:	e015      	b.n	8004d98 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fa9a 	bl	80052a6 <LSM6DSL_GYRO_Disable>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	e00c      	b.n	8004d98 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	331c      	adds	r3, #28
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f943 	bl	800603c <lsm6dsl_device_id_get>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc0:	e000      	b.n	8004dc4 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2200      	movs	r2, #0
 8004de6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004df4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2210      	movs	r2, #16
 8004dfa:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <LSM6DSL_GetCapabilities+0x58>)
 8004e06:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <LSM6DSL_GetCapabilities+0x58>)
 8004e0c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	45d02000 	.word	0x45d02000

08004e28 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e014      	b.n	8004e68 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f103 021c 	add.w	r2, r3, #28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 ff2f 	bl	8005cb0 <lsm6dsl_xl_data_rate_set>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e004      	b.n	8004e68 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e01f      	b.n	8004ec6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 021c 	add.w	r2, r3, #28
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	332b      	adds	r3, #43	; 0x2b
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 ff32 	bl	8005cfc <lsm6dsl_xl_data_rate_get>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e010      	b.n	8004ec6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	331c      	adds	r3, #28
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 ff00 	bl	8005cb0 <lsm6dsl_xl_data_rate_set>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e004      	b.n	8004ec6 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	331c      	adds	r3, #28
 8004ee2:	f107 020b 	add.w	r2, r7, #11
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fea9 	bl	8005c40 <lsm6dsl_xl_full_scale_get>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	e023      	b.n	8004f42 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d81b      	bhi.n	8004f38 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f29 	.word	0x08004f29
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004f1c:	601a      	str	r2, [r3, #0]
      break;
 8004f1e:	e00f      	b.n	8004f40 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004f24:	601a      	str	r2, [r3, #0]
      break;
 8004f26:	e00b      	b.n	8004f40 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004f2c:	601a      	str	r2, [r3, #0]
      break;
 8004f2e:	e007      	b.n	8004f40 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004f34:	601a      	str	r2, [r3, #0]
      break;
 8004f36:	e003      	b.n	8004f40 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	60fb      	str	r3, [r7, #12]
      break;
 8004f3e:	bf00      	nop
  }

  return ret;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	3d79db23 	.word	0x3d79db23
 8004f50:	3df9db23 	.word	0x3df9db23
 8004f54:	3e79db23 	.word	0x3e79db23
 8004f58:	3ef9db23 	.word	0x3ef9db23

08004f5c <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	331c      	adds	r3, #28
 8004f6e:	f107 020b 	add.w	r2, r7, #11
 8004f72:	4611      	mov	r1, r2
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fec1 	bl	8005cfc <lsm6dsl_xl_data_rate_get>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004f80:	f04f 33ff 	mov.w	r3, #4294967295
 8004f84:	e054      	b.n	8005030 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004f86:	7afb      	ldrb	r3, [r7, #11]
 8004f88:	2b0b      	cmp	r3, #11
 8004f8a:	d84c      	bhi.n	8005026 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fc5 	.word	0x08004fc5
 8004f98:	08004fd7 	.word	0x08004fd7
 8004f9c:	08004fdf 	.word	0x08004fdf
 8004fa0:	08004fe7 	.word	0x08004fe7
 8004fa4:	08004fef 	.word	0x08004fef
 8004fa8:	08004ff7 	.word	0x08004ff7
 8004fac:	08004fff 	.word	0x08004fff
 8004fb0:	08005007 	.word	0x08005007
 8004fb4:	0800500f 	.word	0x0800500f
 8004fb8:	08005017 	.word	0x08005017
 8004fbc:	0800501f 	.word	0x0800501f
 8004fc0:	08004fcf 	.word	0x08004fcf
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
      break;
 8004fcc:	e02f      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004fd2:	601a      	str	r2, [r3, #0]
      break;
 8004fd4:	e02b      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	; (800503c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004fda:	601a      	str	r2, [r3, #0]
      break;
 8004fdc:	e027      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	; (8005040 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004fe2:	601a      	str	r2, [r3, #0]
      break;
 8004fe4:	e023      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4a16      	ldr	r2, [pc, #88]	; (8005044 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004fea:	601a      	str	r2, [r3, #0]
      break;
 8004fec:	e01f      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4a15      	ldr	r2, [pc, #84]	; (8005048 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004ff2:	601a      	str	r2, [r3, #0]
      break;
 8004ff4:	e01b      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	; (800504c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004ffa:	601a      	str	r2, [r3, #0]
      break;
 8004ffc:	e017      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8005002:	601a      	str	r2, [r3, #0]
      break;
 8005004:	e013      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800500a:	601a      	str	r2, [r3, #0]
      break;
 800500c:	e00f      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4a11      	ldr	r2, [pc, #68]	; (8005058 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8005012:	601a      	str	r2, [r3, #0]
      break;
 8005014:	e00b      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	4a10      	ldr	r2, [pc, #64]	; (800505c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800501a:	601a      	str	r2, [r3, #0]
      break;
 800501c:	e007      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8005022:	601a      	str	r2, [r3, #0]
      break;
 8005024:	e003      	b.n	800502e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	60fb      	str	r3, [r7, #12]
      break;
 800502c:	bf00      	nop
  }

  return ret;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	3fcccccd 	.word	0x3fcccccd
 800503c:	41480000 	.word	0x41480000
 8005040:	41d00000 	.word	0x41d00000
 8005044:	42500000 	.word	0x42500000
 8005048:	42d00000 	.word	0x42d00000
 800504c:	43500000 	.word	0x43500000
 8005050:	43d00000 	.word	0x43d00000
 8005054:	44504000 	.word	0x44504000
 8005058:	44cf8000 	.word	0x44cf8000
 800505c:	45502000 	.word	0x45502000
 8005060:	45d02000 	.word	0x45d02000

08005064 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005076:	2b01      	cmp	r3, #1
 8005078:	d106      	bne.n	8005088 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800507a:	ed97 0a00 	vldr	s0, [r7]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fb36 	bl	80056f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8005084:	4603      	mov	r3, r0
 8005086:	e005      	b.n	8005094 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005088:	ed97 0a00 	vldr	s0, [r7]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fbbb 	bl	8005808 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8005092:	4603      	mov	r3, r0
  }
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	331c      	adds	r3, #28
 80050ae:	f107 020b 	add.w	r2, r7, #11
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fdc3 	bl	8005c40 <lsm6dsl_xl_full_scale_get>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	e023      	b.n	800510e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80050c6:	7afb      	ldrb	r3, [r7, #11]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d81b      	bhi.n	8005104 <LSM6DSL_ACC_GetFullScale+0x68>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <LSM6DSL_ACC_GetFullScale+0x38>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050f5 	.word	0x080050f5
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2202      	movs	r2, #2
 80050e8:	601a      	str	r2, [r3, #0]
      break;
 80050ea:	e00f      	b.n	800510c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2204      	movs	r2, #4
 80050f0:	601a      	str	r2, [r3, #0]
      break;
 80050f2:	e00b      	b.n	800510c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2208      	movs	r2, #8
 80050f8:	601a      	str	r2, [r3, #0]
      break;
 80050fa:	e007      	b.n	800510c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2210      	movs	r2, #16
 8005100:	601a      	str	r2, [r3, #0]
      break;
 8005102:	e003      	b.n	800510c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	60fb      	str	r3, [r7, #12]
      break;
 800510a:	bf00      	nop
  }

  return ret;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop

08005118 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	dd0b      	ble.n	8005140 <LSM6DSL_ACC_SetFullScale+0x28>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	dd06      	ble.n	800513c <LSM6DSL_ACC_SetFullScale+0x24>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	dc01      	bgt.n	8005138 <LSM6DSL_ACC_SetFullScale+0x20>
 8005134:	2303      	movs	r3, #3
 8005136:	e004      	b.n	8005142 <LSM6DSL_ACC_SetFullScale+0x2a>
 8005138:	2301      	movs	r3, #1
 800513a:	e002      	b.n	8005142 <LSM6DSL_ACC_SetFullScale+0x2a>
 800513c:	2302      	movs	r3, #2
 800513e:	e000      	b.n	8005142 <LSM6DSL_ACC_SetFullScale+0x2a>
 8005140:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8005142:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	331c      	adds	r3, #28
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fd51 	bl	8005bf4 <lsm6dsl_xl_full_scale_set>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e000      	b.n	8005160 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	331c      	adds	r3, #28
 8005176:	f107 0208 	add.w	r2, r7, #8
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f000 ff4c 	bl	800601a <lsm6dsl_acceleration_raw_get>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8005188:	f04f 33ff 	mov.w	r3, #4294967295
 800518c:	e00c      	b.n	80051a8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800518e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005196:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800519e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	331c      	adds	r3, #28
 80051c4:	f107 0210 	add.w	r2, r7, #16
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 ff25 	bl	800601a <lsm6dsl_acceleration_raw_get>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e03c      	b.n	8005256 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fe74 	bl	8004ed0 <LSM6DSL_ACC_GetSensitivity>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e030      	b.n	8005256 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80051f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005200:	edd7 7a03 	vldr	s15, [r7, #12]
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 2a90 	vmov	r2, s15
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005220:	edd7 7a03 	vldr	s15, [r7, #12]
 8005224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800522c:	ee17 2a90 	vmov	r2, s15
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005234:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005240:	edd7 7a03 	vldr	s15, [r7, #12]
 8005244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800524c:	ee17 2a90 	vmov	r2, s15
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e014      	b.n	800529e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f103 021c 	add.w	r2, r3, #28
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f000 fe0a 	bl	8005e9c <lsm6dsl_gy_data_rate_set>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e004      	b.n	800529e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e01f      	b.n	80052fc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f103 021c 	add.w	r2, r3, #28
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	332c      	adds	r3, #44	; 0x2c
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 fe0d 	bl	8005ee8 <lsm6dsl_gy_data_rate_get>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e010      	b.n	80052fc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	331c      	adds	r3, #28
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fddb 	bl	8005e9c <lsm6dsl_gy_data_rate_set>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	e004      	b.n	80052fc <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	331c      	adds	r3, #28
 8005316:	f107 020b 	add.w	r2, r7, #11
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fd7b 	bl	8005e18 <lsm6dsl_gy_full_scale_get>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8005328:	f04f 33ff 	mov.w	r3, #4294967295
 800532c:	e02d      	b.n	800538a <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d825      	bhi.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	08005359 	.word	0x08005359
 8005344:	08005369 	.word	0x08005369
 8005348:	08005381 	.word	0x08005381
 800534c:	08005371 	.word	0x08005371
 8005350:	08005381 	.word	0x08005381
 8005354:	08005379 	.word	0x08005379
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800535c:	601a      	str	r2, [r3, #0]
      break;
 800535e:	e013      	b.n	8005388 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8005364:	601a      	str	r2, [r3, #0]
      break;
 8005366:	e00f      	b.n	8005388 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4a0c      	ldr	r2, [pc, #48]	; (800539c <LSM6DSL_GYRO_GetSensitivity+0x98>)
 800536c:	601a      	str	r2, [r3, #0]
      break;
 800536e:	e00b      	b.n	8005388 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8005374:	601a      	str	r2, [r3, #0]
      break;
 8005376:	e007      	b.n	8005388 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 800537c:	601a      	str	r2, [r3, #0]
      break;
 800537e:	e003      	b.n	8005388 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005380:	f04f 33ff 	mov.w	r3, #4294967295
 8005384:	60fb      	str	r3, [r7, #12]
      break;
 8005386:	bf00      	nop
  }

  return ret;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	408c0000 	.word	0x408c0000
 8005398:	410c0000 	.word	0x410c0000
 800539c:	418c0000 	.word	0x418c0000
 80053a0:	420c0000 	.word	0x420c0000
 80053a4:	428c0000 	.word	0x428c0000

080053a8 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	331c      	adds	r3, #28
 80053ba:	f107 020b 	add.w	r2, r7, #11
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fd91 	bl	8005ee8 <lsm6dsl_gy_data_rate_get>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	e04e      	b.n	8005470 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	2b0a      	cmp	r3, #10
 80053d6:	d846      	bhi.n	8005466 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005417 	.word	0x08005417
 80053e8:	0800541f 	.word	0x0800541f
 80053ec:	08005427 	.word	0x08005427
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	08005437 	.word	0x08005437
 80053f8:	0800543f 	.word	0x0800543f
 80053fc:	08005447 	.word	0x08005447
 8005400:	0800544f 	.word	0x0800544f
 8005404:	08005457 	.word	0x08005457
 8005408:	0800545f 	.word	0x0800545f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
      break;
 8005414:	e02b      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800541a:	601a      	str	r2, [r3, #0]
      break;
 800541c:	e027      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8005422:	601a      	str	r2, [r3, #0]
      break;
 8005424:	e023      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800542a:	601a      	str	r2, [r3, #0]
      break;
 800542c:	e01f      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8005432:	601a      	str	r2, [r3, #0]
      break;
 8005434:	e01b      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800543a:	601a      	str	r2, [r3, #0]
      break;
 800543c:	e017      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8005442:	601a      	str	r2, [r3, #0]
      break;
 8005444:	e013      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800544a:	601a      	str	r2, [r3, #0]
      break;
 800544c:	e00f      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4a10      	ldr	r2, [pc, #64]	; (8005494 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8005452:	601a      	str	r2, [r3, #0]
      break;
 8005454:	e00b      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4a0f      	ldr	r2, [pc, #60]	; (8005498 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800545a:	601a      	str	r2, [r3, #0]
      break;
 800545c:	e007      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8005462:	601a      	str	r2, [r3, #0]
      break;
 8005464:	e003      	b.n	800546e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	60fb      	str	r3, [r7, #12]
      break;
 800546c:	bf00      	nop
  }

  return ret;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	41480000 	.word	0x41480000
 800547c:	41d00000 	.word	0x41d00000
 8005480:	42500000 	.word	0x42500000
 8005484:	42d00000 	.word	0x42d00000
 8005488:	43500000 	.word	0x43500000
 800548c:	43d00000 	.word	0x43d00000
 8005490:	44504000 	.word	0x44504000
 8005494:	44cf8000 	.word	0x44cf8000
 8005498:	45502000 	.word	0x45502000
 800549c:	45d02000 	.word	0x45d02000

080054a0 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d106      	bne.n	80054c4 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80054b6:	ed97 0a00 	vldr	s0, [r7]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa26 	bl	800590c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80054c0:	4603      	mov	r3, r0
 80054c2:	e005      	b.n	80054d0 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80054c4:	ed97 0a00 	vldr	s0, [r7]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 faab 	bl	8005a24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80054ce:	4603      	mov	r3, r0
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	331c      	adds	r3, #28
 80054ea:	f107 020b 	add.w	r2, r7, #11
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fc91 	bl	8005e18 <lsm6dsl_gy_full_scale_get>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e030      	b.n	8005564 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d828      	bhi.n	800555a <LSM6DSL_GYRO_GetFullScale+0x82>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005535 	.word	0x08005535
 8005514:	0800552d 	.word	0x0800552d
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555b 	.word	0x0800555b
 8005520:	08005547 	.word	0x08005547
 8005524:	0800555b 	.word	0x0800555b
 8005528:	08005551 	.word	0x08005551
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	227d      	movs	r2, #125	; 0x7d
 8005530:	601a      	str	r2, [r3, #0]
      break;
 8005532:	e016      	b.n	8005562 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	22fa      	movs	r2, #250	; 0xfa
 8005538:	601a      	str	r2, [r3, #0]
      break;
 800553a:	e012      	b.n	8005562 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005542:	601a      	str	r2, [r3, #0]
      break;
 8005544:	e00d      	b.n	8005562 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800554c:	601a      	str	r2, [r3, #0]
      break;
 800554e:	e008      	b.n	8005562 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005556:	601a      	str	r2, [r3, #0]
      break;
 8005558:	e003      	b.n	8005562 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	60fb      	str	r3, [r7, #12]
      break;
 8005560:	bf00      	nop
  }

  return ret;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b7d      	cmp	r3, #125	; 0x7d
 800557a:	dd12      	ble.n	80055a2 <LSM6DSL_GYRO_SetFullScale+0x36>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2bfa      	cmp	r3, #250	; 0xfa
 8005580:	dd0d      	ble.n	800559e <LSM6DSL_GYRO_SetFullScale+0x32>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005588:	dd07      	ble.n	800559a <LSM6DSL_GYRO_SetFullScale+0x2e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005590:	dc01      	bgt.n	8005596 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8005592:	2304      	movs	r3, #4
 8005594:	e006      	b.n	80055a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005596:	2306      	movs	r3, #6
 8005598:	e004      	b.n	80055a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800559a:	2302      	movs	r3, #2
 800559c:	e002      	b.n	80055a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80055a2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80055a4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	331c      	adds	r3, #28
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fc0c 	bl	8005dcc <lsm6dsl_gy_full_scale_set>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e000      	b.n	80055c2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	331c      	adds	r3, #28
 80055d8:	f107 0208 	add.w	r2, r7, #8
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fd0a 	bl	8005ff8 <lsm6dsl_angular_rate_raw_get>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
 80055ee:	e00c      	b.n	800560a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80055f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80055f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005600:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	331c      	adds	r3, #28
 8005620:	f107 0210 	add.w	r2, r7, #16
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fce6 	bl	8005ff8 <lsm6dsl_angular_rate_raw_get>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	e03c      	b.n	80056b2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe60 	bl	8005304 <LSM6DSL_GYRO_GetSensitivity>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800564a:	f04f 33ff 	mov.w	r3, #4294967295
 800564e:	e030      	b.n	80056b2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800565c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005668:	ee17 2a90 	vmov	r2, s15
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800567c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005688:	ee17 2a90 	vmov	r2, s15
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800569c:	edd7 7a03 	vldr	s15, [r7, #12]
 80056a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a8:	ee17 2a90 	vmov	r2, s15
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]
 80056c6:	4613      	mov	r3, r2
 80056c8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f103 001c 	add.w	r0, r3, #28
 80056d0:	1cba      	adds	r2, r7, #2
 80056d2:	78f9      	ldrb	r1, [r7, #3]
 80056d4:	2301      	movs	r3, #1
 80056d6:	f000 fa75 	bl	8005bc4 <lsm6dsl_write_reg>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	e000      	b.n	80056e8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80056fc:	edd7 7a00 	vldr	s15, [r7]
 8005700:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	d801      	bhi.n	8005712 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800570e:	2301      	movs	r3, #1
 8005710:	e058      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005712:	edd7 7a00 	vldr	s15, [r7]
 8005716:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800571a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005722:	d801      	bhi.n	8005728 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005724:	2302      	movs	r3, #2
 8005726:	e04d      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005728:	edd7 7a00 	vldr	s15, [r7]
 800572c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80057ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	d801      	bhi.n	800573e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800573a:	2303      	movs	r3, #3
 800573c:	e042      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800573e:	edd7 7a00 	vldr	s15, [r7]
 8005742:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80057f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d801      	bhi.n	8005754 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005750:	2304      	movs	r3, #4
 8005752:	e037      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005754:	edd7 7a00 	vldr	s15, [r7]
 8005758:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800575c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	d801      	bhi.n	800576a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005766:	2305      	movs	r3, #5
 8005768:	e02c      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800576a:	edd7 7a00 	vldr	s15, [r7]
 800576e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80057f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	d801      	bhi.n	8005780 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800577c:	2306      	movs	r3, #6
 800577e:	e021      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005780:	edd7 7a00 	vldr	s15, [r7]
 8005784:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80057fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	d801      	bhi.n	8005796 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005792:	2307      	movs	r3, #7
 8005794:	e016      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005796:	edd7 7a00 	vldr	s15, [r7]
 800579a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005800 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800579e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	d801      	bhi.n	80057ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80057a8:	2308      	movs	r3, #8
 80057aa:	e00b      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80057ac:	edd7 7a00 	vldr	s15, [r7]
 80057b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80057b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	d801      	bhi.n	80057c2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80057be:	2309      	movs	r3, #9
 80057c0:	e000      	b.n	80057c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80057c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80057c4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	331c      	adds	r3, #28
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa6e 	bl	8005cb0 <lsm6dsl_xl_data_rate_set>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	e000      	b.n	80057e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	42500000 	.word	0x42500000
 80057f0:	42d00000 	.word	0x42d00000
 80057f4:	43500000 	.word	0x43500000
 80057f8:	43d00000 	.word	0x43d00000
 80057fc:	44504000 	.word	0x44504000
 8005800:	44cf8000 	.word	0x44cf8000
 8005804:	45502000 	.word	0x45502000

08005808 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005814:	edd7 7a00 	vldr	s15, [r7]
 8005818:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	d801      	bhi.n	800582a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005826:	2301      	movs	r3, #1
 8005828:	e058      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800582a:	edd7 7a00 	vldr	s15, [r7]
 800582e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	d801      	bhi.n	8005840 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800583c:	2302      	movs	r3, #2
 800583e:	e04d      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005840:	edd7 7a00 	vldr	s15, [r7]
 8005844:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80058f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	d801      	bhi.n	8005856 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005852:	2303      	movs	r3, #3
 8005854:	e042      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005856:	edd7 7a00 	vldr	s15, [r7]
 800585a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80058f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800585e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d801      	bhi.n	800586c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005868:	2304      	movs	r3, #4
 800586a:	e037      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800586c:	edd7 7a00 	vldr	s15, [r7]
 8005870:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	d801      	bhi.n	8005882 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800587e:	2305      	movs	r3, #5
 8005880:	e02c      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005882:	edd7 7a00 	vldr	s15, [r7]
 8005886:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80058fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800588a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	d801      	bhi.n	8005898 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005894:	2306      	movs	r3, #6
 8005896:	e021      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005898:	edd7 7a00 	vldr	s15, [r7]
 800589c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005900 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80058a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	d801      	bhi.n	80058ae <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80058aa:	2307      	movs	r3, #7
 80058ac:	e016      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80058ae:	edd7 7a00 	vldr	s15, [r7]
 80058b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005904 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80058b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	d801      	bhi.n	80058c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80058c0:	2308      	movs	r3, #8
 80058c2:	e00b      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80058c4:	edd7 7a00 	vldr	s15, [r7]
 80058c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005908 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80058cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d4:	d801      	bhi.n	80058da <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80058d6:	2309      	movs	r3, #9
 80058d8:	e000      	b.n	80058dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80058da:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	42500000 	.word	0x42500000
 80058f4:	42d00000 	.word	0x42d00000
 80058f8:	43500000 	.word	0x43500000
 80058fc:	43d00000 	.word	0x43d00000
 8005900:	44504000 	.word	0x44504000
 8005904:	44cf8000 	.word	0x44cf8000
 8005908:	45502000 	.word	0x45502000

0800590c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005918:	edd7 7a00 	vldr	s15, [r7]
 800591c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005928:	d801      	bhi.n	800592e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800592a:	2301      	movs	r3, #1
 800592c:	e058      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800592e:	edd7 7a00 	vldr	s15, [r7]
 8005932:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800593a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593e:	d801      	bhi.n	8005944 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005940:	2302      	movs	r3, #2
 8005942:	e04d      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005944:	edd7 7a00 	vldr	s15, [r7]
 8005948:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005a08 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800594c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	d801      	bhi.n	800595a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005956:	2303      	movs	r3, #3
 8005958:	e042      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800595a:	edd7 7a00 	vldr	s15, [r7]
 800595e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005a0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596a:	d801      	bhi.n	8005970 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800596c:	2304      	movs	r3, #4
 800596e:	e037      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005970:	edd7 7a00 	vldr	s15, [r7]
 8005974:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005a10 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005980:	d801      	bhi.n	8005986 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005982:	2305      	movs	r3, #5
 8005984:	e02c      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005986:	edd7 7a00 	vldr	s15, [r7]
 800598a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005a14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800598e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	d801      	bhi.n	800599c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005998:	2306      	movs	r3, #6
 800599a:	e021      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800599c:	edd7 7a00 	vldr	s15, [r7]
 80059a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005a18 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80059a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	d801      	bhi.n	80059b2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80059ae:	2307      	movs	r3, #7
 80059b0:	e016      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80059b2:	edd7 7a00 	vldr	s15, [r7]
 80059b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005a1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80059ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d801      	bhi.n	80059c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80059c4:	2308      	movs	r3, #8
 80059c6:	e00b      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80059c8:	edd7 7a00 	vldr	s15, [r7]
 80059cc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80059d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d8:	d801      	bhi.n	80059de <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80059da:	2309      	movs	r3, #9
 80059dc:	e000      	b.n	80059e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80059de:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80059e0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	331c      	adds	r3, #28
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fa56 	bl	8005e9c <lsm6dsl_gy_data_rate_set>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	e000      	b.n	80059fe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	42500000 	.word	0x42500000
 8005a0c:	42d00000 	.word	0x42d00000
 8005a10:	43500000 	.word	0x43500000
 8005a14:	43d00000 	.word	0x43d00000
 8005a18:	44504000 	.word	0x44504000
 8005a1c:	44cf8000 	.word	0x44cf8000
 8005a20:	45502000 	.word	0x45502000

08005a24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005a30:	edd7 7a00 	vldr	s15, [r7]
 8005a34:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	d801      	bhi.n	8005a46 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e058      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a46:	edd7 7a00 	vldr	s15, [r7]
 8005a4a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	d801      	bhi.n	8005a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e04d      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a5c:	edd7 7a00 	vldr	s15, [r7]
 8005a60:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005b0c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6c:	d801      	bhi.n	8005a72 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e042      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a72:	edd7 7a00 	vldr	s15, [r7]
 8005a76:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005b10 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	d801      	bhi.n	8005a88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005a84:	2304      	movs	r3, #4
 8005a86:	e037      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a88:	edd7 7a00 	vldr	s15, [r7]
 8005a8c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a98:	d801      	bhi.n	8005a9e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	e02c      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a9e:	edd7 7a00 	vldr	s15, [r7]
 8005aa2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005b18 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aae:	d801      	bhi.n	8005ab4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005ab0:	2306      	movs	r3, #6
 8005ab2:	e021      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005ab4:	edd7 7a00 	vldr	s15, [r7]
 8005ab8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005b1c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	d801      	bhi.n	8005aca <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005ac6:	2307      	movs	r3, #7
 8005ac8:	e016      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005aca:	edd7 7a00 	vldr	s15, [r7]
 8005ace:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005b20 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ada:	d801      	bhi.n	8005ae0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005adc:	2308      	movs	r3, #8
 8005ade:	e00b      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005ae0:	edd7 7a00 	vldr	s15, [r7]
 8005ae4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005b24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af0:	d801      	bhi.n	8005af6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005af2:	2309      	movs	r3, #9
 8005af4:	e000      	b.n	8005af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005af6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	42500000 	.word	0x42500000
 8005b10:	42d00000 	.word	0x42d00000
 8005b14:	43500000 	.word	0x43500000
 8005b18:	43d00000 	.word	0x43d00000
 8005b1c:	44504000 	.word	0x44504000
 8005b20:	44cf8000 	.word	0x44cf8000
 8005b24:	45502000 	.word	0x45502000

08005b28 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	461a      	mov	r2, r3
 8005b34:	460b      	mov	r3, r1
 8005b36:	72fb      	strb	r3, [r7, #11]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	695c      	ldr	r4, [r3, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	7b1b      	ldrb	r3, [r3, #12]
 8005b48:	b298      	uxth	r0, r3
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	b299      	uxth	r1, r3
 8005b4e:	893b      	ldrh	r3, [r7, #8]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	47a0      	blx	r4
 8005b54:	4603      	mov	r3, r0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd90      	pop	{r4, r7, pc}

08005b5e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b5e:	b590      	push	{r4, r7, lr}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	72fb      	strb	r3, [r7, #11]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	691c      	ldr	r4, [r3, #16]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	7b1b      	ldrb	r3, [r3, #12]
 8005b7e:	b298      	uxth	r0, r3
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	b299      	uxth	r1, r3
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	47a0      	blx	r4
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd90      	pop	{r4, r7, pc}

08005b94 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	72fb      	strb	r3, [r7, #11]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685c      	ldr	r4, [r3, #4]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6898      	ldr	r0, [r3, #8]
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	7af9      	ldrb	r1, [r7, #11]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	47a0      	blx	r4
 8005bb8:	6178      	str	r0, [r7, #20]
  return ret;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd90      	pop	{r4, r7, pc}

08005bc4 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	72fb      	strb	r3, [r7, #11]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6898      	ldr	r0, [r3, #8]
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	7af9      	ldrb	r1, [r7, #11]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	47a0      	blx	r4
 8005be8:	6178      	str	r0, [r7, #20]
  return ret;
 8005bea:	697b      	ldr	r3, [r7, #20]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd90      	pop	{r4, r7, pc}

08005bf4 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005c00:	f107 0208 	add.w	r2, r7, #8
 8005c04:	2301      	movs	r3, #1
 8005c06:	2110      	movs	r1, #16
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff ffc3 	bl	8005b94 <lsm6dsl_read_reg>
 8005c0e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10f      	bne.n	8005c36 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	7a3b      	ldrb	r3, [r7, #8]
 8005c20:	f362 0383 	bfi	r3, r2, #2, #2
 8005c24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	2110      	movs	r1, #16
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffc8 	bl	8005bc4 <lsm6dsl_write_reg>
 8005c34:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005c36:	68fb      	ldr	r3, [r7, #12]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005c4a:	f107 0208 	add.w	r2, r7, #8
 8005c4e:	2301      	movs	r3, #1
 8005c50:	2110      	movs	r1, #16
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff ff9e 	bl	8005b94 <lsm6dsl_read_reg>
 8005c58:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8005c5a:	7a3b      	ldrb	r3, [r7, #8]
 8005c5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d81a      	bhi.n	8005c9c <lsm6dsl_xl_full_scale_get+0x5c>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <lsm6dsl_xl_full_scale_get+0x2c>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c85 	.word	0x08005c85
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c95 	.word	0x08005c95
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
      break;
 8005c82:	e00f      	b.n	8005ca4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]
      break;
 8005c8a:	e00b      	b.n	8005ca4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	701a      	strb	r2, [r3, #0]
      break;
 8005c92:	e007      	b.n	8005ca4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2203      	movs	r2, #3
 8005c98:	701a      	strb	r2, [r3, #0]
      break;
 8005c9a:	e003      	b.n	8005ca4 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	701a      	strb	r2, [r3, #0]
      break;
 8005ca2:	bf00      	nop
  }

  return ret;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop

08005cb0 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005cbc:	f107 0208 	add.w	r2, r7, #8
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ff65 	bl	8005b94 <lsm6dsl_read_reg>
 8005cca:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	7a3b      	ldrb	r3, [r7, #8]
 8005cdc:	f362 1307 	bfi	r3, r2, #4, #4
 8005ce0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005ce2:	f107 0208 	add.w	r2, r7, #8
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	2110      	movs	r1, #16
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff6a 	bl	8005bc4 <lsm6dsl_write_reg>
 8005cf0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff40 	bl	8005b94 <lsm6dsl_read_reg>
 8005d14:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8005d16:	7a3b      	ldrb	r3, [r7, #8]
 8005d18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b0b      	cmp	r3, #11
 8005d20:	d84a      	bhi.n	8005db8 <lsm6dsl_xl_data_rate_get+0xbc>
 8005d22:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <lsm6dsl_xl_data_rate_get+0x2c>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d59 	.word	0x08005d59
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d71 	.word	0x08005d71
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d81 	.word	0x08005d81
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005db1 	.word	0x08005db1
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
      break;
 8005d5e:	e02f      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
      break;
 8005d66:	e02b      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	701a      	strb	r2, [r3, #0]
      break;
 8005d6e:	e027      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2203      	movs	r2, #3
 8005d74:	701a      	strb	r2, [r3, #0]
      break;
 8005d76:	e023      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	701a      	strb	r2, [r3, #0]
      break;
 8005d7e:	e01f      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2205      	movs	r2, #5
 8005d84:	701a      	strb	r2, [r3, #0]
      break;
 8005d86:	e01b      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2206      	movs	r2, #6
 8005d8c:	701a      	strb	r2, [r3, #0]
      break;
 8005d8e:	e017      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2207      	movs	r2, #7
 8005d94:	701a      	strb	r2, [r3, #0]
      break;
 8005d96:	e013      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	701a      	strb	r2, [r3, #0]
      break;
 8005d9e:	e00f      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2209      	movs	r2, #9
 8005da4:	701a      	strb	r2, [r3, #0]
      break;
 8005da6:	e00b      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	220a      	movs	r2, #10
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	e007      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	220b      	movs	r2, #11
 8005db4:	701a      	strb	r2, [r3, #0]
      break;
 8005db6:	e003      	b.n	8005dc0 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	220c      	movs	r2, #12
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	bf00      	nop
  }

  return ret;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop

08005dcc <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	2301      	movs	r3, #1
 8005dde:	2111      	movs	r1, #17
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fed7 	bl	8005b94 <lsm6dsl_read_reg>
 8005de6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	7a3b      	ldrb	r3, [r7, #8]
 8005df8:	f362 0343 	bfi	r3, r2, #1, #3
 8005dfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005dfe:	f107 0208 	add.w	r2, r7, #8
 8005e02:	2301      	movs	r3, #1
 8005e04:	2111      	movs	r1, #17
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fedc 	bl	8005bc4 <lsm6dsl_write_reg>
 8005e0c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	2301      	movs	r3, #1
 8005e28:	2111      	movs	r1, #17
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff feb2 	bl	8005b94 <lsm6dsl_read_reg>
 8005e30:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8005e32:	7a3b      	ldrb	r3, [r7, #8]
 8005e34:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d824      	bhi.n	8005e88 <lsm6dsl_gy_full_scale_get+0x70>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e61 	.word	0x08005e61
 8005e48:	08005e69 	.word	0x08005e69
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e89 	.word	0x08005e89
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e89 	.word	0x08005e89
 8005e5c:	08005e81 	.word	0x08005e81
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
      break;
 8005e66:	e013      	b.n	8005e90 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
      break;
 8005e6e:	e00f      	b.n	8005e90 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2202      	movs	r2, #2
 8005e74:	701a      	strb	r2, [r3, #0]
      break;
 8005e76:	e00b      	b.n	8005e90 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	701a      	strb	r2, [r3, #0]
      break;
 8005e7e:	e007      	b.n	8005e90 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2206      	movs	r2, #6
 8005e84:	701a      	strb	r2, [r3, #0]
      break;
 8005e86:	e003      	b.n	8005e90 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	701a      	strb	r2, [r3, #0]
      break;
 8005e8e:	bf00      	nop
  }

  return ret;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005ea8:	f107 0208 	add.w	r2, r7, #8
 8005eac:	2301      	movs	r3, #1
 8005eae:	2111      	movs	r1, #17
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fe6f 	bl	8005b94 <lsm6dsl_read_reg>
 8005eb6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	7a3b      	ldrb	r3, [r7, #8]
 8005ec8:	f362 1307 	bfi	r3, r2, #4, #4
 8005ecc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005ece:	f107 0208 	add.w	r2, r7, #8
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	2111      	movs	r1, #17
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fe74 	bl	8005bc4 <lsm6dsl_write_reg>
 8005edc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005ef2:	f107 0208 	add.w	r2, r7, #8
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	2111      	movs	r1, #17
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff fe4a 	bl	8005b94 <lsm6dsl_read_reg>
 8005f00:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8005f02:	7a3b      	ldrb	r3, [r7, #8]
 8005f04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b0a      	cmp	r3, #10
 8005f0c:	d844      	bhi.n	8005f98 <lsm6dsl_gy_data_rate_get+0xb0>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f41 	.word	0x08005f41
 8005f18:	08005f49 	.word	0x08005f49
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f61 	.word	0x08005f61
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f79 	.word	0x08005f79
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f91 	.word	0x08005f91
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
      break;
 8005f46:	e02b      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	e027      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2202      	movs	r2, #2
 8005f54:	701a      	strb	r2, [r3, #0]
      break;
 8005f56:	e023      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	701a      	strb	r2, [r3, #0]
      break;
 8005f5e:	e01f      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	701a      	strb	r2, [r3, #0]
      break;
 8005f66:	e01b      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	701a      	strb	r2, [r3, #0]
      break;
 8005f6e:	e017      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2206      	movs	r2, #6
 8005f74:	701a      	strb	r2, [r3, #0]
      break;
 8005f76:	e013      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2207      	movs	r2, #7
 8005f7c:	701a      	strb	r2, [r3, #0]
      break;
 8005f7e:	e00f      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2208      	movs	r2, #8
 8005f84:	701a      	strb	r2, [r3, #0]
      break;
 8005f86:	e00b      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2209      	movs	r2, #9
 8005f8c:	701a      	strb	r2, [r3, #0]
      break;
 8005f8e:	e007      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	220a      	movs	r2, #10
 8005f94:	701a      	strb	r2, [r3, #0]
      break;
 8005f96:	e003      	b.n	8005fa0 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	220b      	movs	r2, #11
 8005f9c:	701a      	strb	r2, [r3, #0]
      break;
 8005f9e:	bf00      	nop
  }

  return ret;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop

08005fac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	2112      	movs	r1, #18
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fde7 	bl	8005b94 <lsm6dsl_read_reg>
 8005fc6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7a3b      	ldrb	r3, [r7, #8]
 8005fd8:	f362 1386 	bfi	r3, r2, #6, #1
 8005fdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005fde:	f107 0208 	add.w	r2, r7, #8
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	2112      	movs	r1, #18
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fdec 	bl	8005bc4 <lsm6dsl_write_reg>
 8005fec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8006002:	2306      	movs	r3, #6
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	2122      	movs	r1, #34	; 0x22
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fdc3 	bl	8005b94 <lsm6dsl_read_reg>
 800600e:	60f8      	str	r0, [r7, #12]
  return ret;
 8006010:	68fb      	ldr	r3, [r7, #12]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8006024:	2306      	movs	r3, #6
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	2128      	movs	r1, #40	; 0x28
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff fdb2 	bl	8005b94 <lsm6dsl_read_reg>
 8006030:	60f8      	str	r0, [r7, #12]
  return ret;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8006046:	2301      	movs	r3, #1
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	210f      	movs	r1, #15
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff fda1 	bl	8005b94 <lsm6dsl_read_reg>
 8006052:	60f8      	str	r0, [r7, #12]
  return ret;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800606a:	f107 0208 	add.w	r2, r7, #8
 800606e:	2301      	movs	r3, #1
 8006070:	2112      	movs	r1, #18
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fd8e 	bl	8005b94 <lsm6dsl_read_reg>
 8006078:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	7a3b      	ldrb	r3, [r7, #8]
 800608a:	f362 0382 	bfi	r3, r2, #2, #1
 800608e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006090:	f107 0208 	add.w	r2, r7, #8
 8006094:	2301      	movs	r3, #1
 8006096:	2112      	movs	r1, #18
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fd93 	bl	8005bc4 <lsm6dsl_write_reg>
 800609e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80060b6:	f107 0208 	add.w	r2, r7, #8
 80060ba:	2301      	movs	r3, #1
 80060bc:	210a      	movs	r1, #10
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fd68 	bl	8005b94 <lsm6dsl_read_reg>
 80060c4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	7a3b      	ldrb	r3, [r7, #8]
 80060d6:	f362 0302 	bfi	r3, r2, #0, #3
 80060da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80060dc:	f107 0208 	add.w	r2, r7, #8
 80060e0:	2301      	movs	r3, #1
 80060e2:	210a      	movs	r1, #10
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fd6d 	bl	8005bc4 <lsm6dsl_write_reg>
 80060ea:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8006106:	2301      	movs	r3, #1
 8006108:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <IKS01A2_ENV_SENSOR_Init+0x22>
 8006114:	2b01      	cmp	r3, #1
 8006116:	d032      	beq.n	800617e <IKS01A2_ENV_SENSOR_Init+0x86>
 8006118:	e063      	b.n	80061e2 <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800611a:	6838      	ldr	r0, [r7, #0]
 800611c:	f000 f8ac 	bl	8006278 <HTS221_0_Probe>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
 800612a:	e098      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800612c:	4a4e      	ldr	r2, [pc, #312]	; (8006268 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	494d      	ldr	r1, [pc, #308]	; (800626c <IKS01A2_ENV_SENSOR_Init+0x174>)
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800613e:	f107 0108 	add.w	r1, r7, #8
 8006142:	4610      	mov	r0, r2
 8006144:	4798      	blx	r3
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800614c:	f06f 0306 	mvn.w	r3, #6
 8006150:	e085      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8006152:	7a3b      	ldrb	r3, [r7, #8]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d103      	bne.n	8006160 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8006160:	7abb      	ldrb	r3, [r7, #10]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d103      	bne.n	800616e <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f043 0304 	orr.w	r3, r3, #4
 800616c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800616e:	7a7b      	ldrb	r3, [r7, #9]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d13a      	bne.n	80061ea <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f043 0302 	orr.w	r3, r3, #2
 800617a:	61bb      	str	r3, [r7, #24]
      }
      break;
 800617c:	e035      	b.n	80061ea <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800617e:	6838      	ldr	r0, [r7, #0]
 8006180:	f000 f934 	bl	80063ec <LPS22HB_0_Probe>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	e066      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006190:	4a35      	ldr	r2, [pc, #212]	; (8006268 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	4934      	ldr	r1, [pc, #208]	; (800626c <IKS01A2_ENV_SENSOR_Init+0x174>)
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80061a2:	f107 0108 	add.w	r1, r7, #8
 80061a6:	4610      	mov	r0, r2
 80061a8:	4798      	blx	r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80061b0:	f06f 0306 	mvn.w	r3, #6
 80061b4:	e053      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 80061b6:	7a3b      	ldrb	r3, [r7, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d103      	bne.n	80061c4 <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80061c4:	7abb      	ldrb	r3, [r7, #10]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d103      	bne.n	80061d2 <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f043 0304 	orr.w	r3, r3, #4
 80061d0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80061d2:	7a7b      	ldrb	r3, [r7, #9]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10a      	bne.n	80061ee <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f043 0302 	orr.w	r3, r3, #2
 80061de:	61bb      	str	r3, [r7, #24]
      }
      break;
 80061e0:	e005      	b.n	80061ee <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80061e2:	f06f 0301 	mvn.w	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80061e8:	e002      	b.n	80061f0 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80061ea:	bf00      	nop
 80061ec:	e000      	b.n	80061f0 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 80061ee:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	e031      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e02a      	b.n	8006256 <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	401a      	ands	r2, r3
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	429a      	cmp	r2, r3
 800620a:	d11e      	bne.n	800624a <IKS01A2_ENV_SENSOR_Init+0x152>
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	401a      	ands	r2, r3
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	429a      	cmp	r2, r3
 8006216:	d118      	bne.n	800624a <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006220:	4814      	ldr	r0, [pc, #80]	; (8006274 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	440b      	add	r3, r1
 800622c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	490e      	ldr	r1, [pc, #56]	; (800626c <IKS01A2_ENV_SENSOR_Init+0x174>)
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800623a:	4610      	mov	r0, r2
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006244:	f06f 0304 	mvn.w	r3, #4
 8006248:	e009      	b.n	800625e <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d9d1      	bls.n	8006200 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800625e:	4618      	mov	r0, r3
 8006260:	3728      	adds	r7, #40	; 0x28
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000370 	.word	0x20000370
 800626c:	200006b8 	.word	0x200006b8
 8006270:	20000138 	.word	0x20000138
 8006274:	20000358 	.word	0x20000358

08006278 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b090      	sub	sp, #64	; 0x40
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8006284:	2300      	movs	r3, #0
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006288:	23bf      	movs	r3, #191	; 0xbf
 800628a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800628e:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <HTS221_0_Probe+0x13c>)
 8006290:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006292:	4b49      	ldr	r3, [pc, #292]	; (80063b8 <HTS221_0_Probe+0x140>)
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006296:	4b49      	ldr	r3, [pc, #292]	; (80063bc <HTS221_0_Probe+0x144>)
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800629a:	4b49      	ldr	r3, [pc, #292]	; (80063c0 <HTS221_0_Probe+0x148>)
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800629e:	4b49      	ldr	r3, [pc, #292]	; (80063c4 <HTS221_0_Probe+0x14c>)
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80062a2:	f107 0320 	add.w	r3, r7, #32
 80062a6:	4619      	mov	r1, r3
 80062a8:	4847      	ldr	r0, [pc, #284]	; (80063c8 <HTS221_0_Probe+0x150>)
 80062aa:	f7fb fdc3 	bl	8001e34 <HTS221_RegisterBusIO>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062b4:	f06f 0306 	mvn.w	r3, #6
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ba:	e076      	b.n	80063aa <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80062bc:	f107 031f 	add.w	r3, r7, #31
 80062c0:	4619      	mov	r1, r3
 80062c2:	4841      	ldr	r0, [pc, #260]	; (80063c8 <HTS221_0_Probe+0x150>)
 80062c4:	f7fb fe3b 	bl	8001f3e <HTS221_ReadID>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062ce:	f06f 0306 	mvn.w	r3, #6
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d4:	e069      	b.n	80063aa <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	2bbc      	cmp	r3, #188	; 0xbc
 80062da:	d003      	beq.n	80062e4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062dc:	f06f 0306 	mvn.w	r3, #6
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e2:	e062      	b.n	80063aa <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	4837      	ldr	r0, [pc, #220]	; (80063c8 <HTS221_0_Probe+0x150>)
 80062ec:	f7fb fe3e 	bl	8001f6c <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80062f0:	7b3b      	ldrb	r3, [r7, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	7b7b      	ldrb	r3, [r7, #13]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80062fe:	4313      	orrs	r3, r2
 8006300:	4a32      	ldr	r2, [pc, #200]	; (80063cc <HTS221_0_Probe+0x154>)
 8006302:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <HTS221_0_Probe+0x158>)
 8006306:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <HTS221_0_Probe+0x150>)
 8006308:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800630a:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <HTS221_0_Probe+0x15c>)
 800630c:	4a32      	ldr	r2, [pc, #200]	; (80063d8 <HTS221_0_Probe+0x160>)
 800630e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8006310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11d      	bne.n	8006352 <HTS221_0_Probe+0xda>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d018      	beq.n	8006352 <HTS221_0_Probe+0xda>
 8006320:	7b3b      	ldrb	r3, [r7, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d115      	bne.n	8006352 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006326:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <HTS221_0_Probe+0x164>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4a2d      	ldr	r2, [pc, #180]	; (80063e0 <HTS221_0_Probe+0x168>)
 800632c:	492d      	ldr	r1, [pc, #180]	; (80063e4 <HTS221_0_Probe+0x16c>)
 800632e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8006332:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <HTS221_0_Probe+0x15c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HTS221_0_Probe+0x158>)
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006346:	f06f 0304 	mvn.w	r3, #4
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	e001      	b.n	8006352 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11d      	bne.n	8006394 <HTS221_0_Probe+0x11c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d018      	beq.n	8006394 <HTS221_0_Probe+0x11c>
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d115      	bne.n	8006394 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8006368:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HTS221_0_Probe+0x164>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HTS221_0_Probe+0x168>)
 800636e:	491e      	ldr	r1, [pc, #120]	; (80063e8 <HTS221_0_Probe+0x170>)
 8006370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8006374:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <HTS221_0_Probe+0x15c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <HTS221_0_Probe+0x158>)
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006388:	f06f 0304 	mvn.w	r3, #4
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800638e:	e001      	b.n	8006394 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <HTS221_0_Probe+0x132>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063a4:	f06f 0304 	mvn.w	r3, #4
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3740      	adds	r7, #64	; 0x40
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	08000741 	.word	0x08000741
 80063b8:	080007bd 	.word	0x080007bd
 80063bc:	08000871 	.word	0x08000871
 80063c0:	0800080d 	.word	0x0800080d
 80063c4:	080008d5 	.word	0x080008d5
 80063c8:	20000380 	.word	0x20000380
 80063cc:	20000378 	.word	0x20000378
 80063d0:	200006b8 	.word	0x200006b8
 80063d4:	20000370 	.word	0x20000370
 80063d8:	20000008 	.word	0x20000008
 80063dc:	20000138 	.word	0x20000138
 80063e0:	20000358 	.word	0x20000358
 80063e4:	2000002c 	.word	0x2000002c
 80063e8:	20000018 	.word	0x20000018

080063ec <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b090      	sub	sp, #64	; 0x40
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80063f8:	2300      	movs	r3, #0
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80063fc:	23bb      	movs	r3, #187	; 0xbb
 80063fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006402:	4b4a      	ldr	r3, [pc, #296]	; (800652c <LPS22HB_0_Probe+0x140>)
 8006404:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006406:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <LPS22HB_0_Probe+0x144>)
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800640a:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <LPS22HB_0_Probe+0x148>)
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800640e:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <LPS22HB_0_Probe+0x14c>)
 8006410:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006412:	4b4a      	ldr	r3, [pc, #296]	; (800653c <LPS22HB_0_Probe+0x150>)
 8006414:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8006416:	f107 0320 	add.w	r3, r7, #32
 800641a:	4619      	mov	r1, r3
 800641c:	4848      	ldr	r0, [pc, #288]	; (8006540 <LPS22HB_0_Probe+0x154>)
 800641e:	f7fc fad5 	bl	80029cc <LPS22HB_RegisterBusIO>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006428:	f06f 0306 	mvn.w	r3, #6
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	e078      	b.n	8006522 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8006430:	f107 031f 	add.w	r3, r7, #31
 8006434:	4619      	mov	r1, r3
 8006436:	4842      	ldr	r0, [pc, #264]	; (8006540 <LPS22HB_0_Probe+0x154>)
 8006438:	f7fc fb6d 	bl	8002b16 <LPS22HB_ReadID>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006442:	f06f 0306 	mvn.w	r3, #6
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006448:	e06b      	b.n	8006522 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800644a:	7ffb      	ldrb	r3, [r7, #31]
 800644c:	2bb1      	cmp	r3, #177	; 0xb1
 800644e:	d003      	beq.n	8006458 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006450:	f06f 0306 	mvn.w	r3, #6
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006456:	e064      	b.n	8006522 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4619      	mov	r1, r3
 800645e:	4838      	ldr	r0, [pc, #224]	; (8006540 <LPS22HB_0_Probe+0x154>)
 8006460:	f7fc fb70 	bl	8002b44 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006464:	7b3b      	ldrb	r3, [r7, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	7b7b      	ldrb	r3, [r7, #13]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006472:	4313      	orrs	r3, r2
 8006474:	4a33      	ldr	r2, [pc, #204]	; (8006544 <LPS22HB_0_Probe+0x158>)
 8006476:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <LPS22HB_0_Probe+0x15c>)
 800647a:	4a31      	ldr	r2, [pc, #196]	; (8006540 <LPS22HB_0_Probe+0x154>)
 800647c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800647e:	4b33      	ldr	r3, [pc, #204]	; (800654c <LPS22HB_0_Probe+0x160>)
 8006480:	4a33      	ldr	r2, [pc, #204]	; (8006550 <LPS22HB_0_Probe+0x164>)
 8006482:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11e      	bne.n	80064c8 <LPS22HB_0_Probe+0xdc>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d019      	beq.n	80064c8 <LPS22HB_0_Probe+0xdc>
 8006494:	7b3b      	ldrb	r3, [r7, #12]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d116      	bne.n	80064c8 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800649a:	4b2e      	ldr	r3, [pc, #184]	; (8006554 <LPS22HB_0_Probe+0x168>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <LPS22HB_0_Probe+0x16c>)
 80064a0:	3303      	adds	r3, #3
 80064a2:	492e      	ldr	r1, [pc, #184]	; (800655c <LPS22HB_0_Probe+0x170>)
 80064a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <LPS22HB_0_Probe+0x160>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a26      	ldr	r2, [pc, #152]	; (8006548 <LPS22HB_0_Probe+0x15c>)
 80064b0:	6852      	ldr	r2, [r2, #4]
 80064b2:	4610      	mov	r0, r2
 80064b4:	4798      	blx	r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064bc:	f06f 0304 	mvn.w	r3, #4
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c2:	e001      	b.n	80064c8 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d11e      	bne.n	800650c <LPS22HB_0_Probe+0x120>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d019      	beq.n	800650c <LPS22HB_0_Probe+0x120>
 80064d8:	7b7b      	ldrb	r3, [r7, #13]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d116      	bne.n	800650c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <LPS22HB_0_Probe+0x168>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <LPS22HB_0_Probe+0x16c>)
 80064e4:	3303      	adds	r3, #3
 80064e6:	491e      	ldr	r1, [pc, #120]	; (8006560 <LPS22HB_0_Probe+0x174>)
 80064e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <LPS22HB_0_Probe+0x160>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <LPS22HB_0_Probe+0x15c>)
 80064f4:	6852      	ldr	r2, [r2, #4]
 80064f6:	4610      	mov	r0, r2
 80064f8:	4798      	blx	r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006500:	f06f 0304 	mvn.w	r3, #4
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006506:	e001      	b.n	800650c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800650c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d107      	bne.n	8006522 <LPS22HB_0_Probe+0x136>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800651c:	f06f 0304 	mvn.w	r3, #4
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006524:	4618      	mov	r0, r3
 8006526:	3740      	adds	r7, #64	; 0x40
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08000741 	.word	0x08000741
 8006530:	080007bd 	.word	0x080007bd
 8006534:	08000871 	.word	0x08000871
 8006538:	0800080d 	.word	0x0800080d
 800653c:	080008d5 	.word	0x080008d5
 8006540:	200003ac 	.word	0x200003ac
 8006544:	20000378 	.word	0x20000378
 8006548:	200006b8 	.word	0x200006b8
 800654c:	20000370 	.word	0x20000370
 8006550:	20000040 	.word	0x20000040
 8006554:	20000138 	.word	0x20000138
 8006558:	20000358 	.word	0x20000358
 800655c:	20000064 	.word	0x20000064
 8006560:	20000050 	.word	0x20000050

08006564 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08e      	sub	sp, #56	; 0x38
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800656e:	2300      	movs	r3, #0
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006572:	2301      	movs	r3, #1
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d036      	beq.n	80065ee <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8006580:	2b01      	cmp	r3, #1
 8006582:	d302      	bcc.n	800658a <IKS01A2_MOTION_SENSOR_Init+0x26>
 8006584:	2b02      	cmp	r3, #2
 8006586:	d064      	beq.n	8006652 <IKS01A2_MOTION_SENSOR_Init+0xee>
 8006588:	e095      	b.n	80066b6 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800658a:	6838      	ldr	r0, [r7, #0]
 800658c:	f000 f922 	bl	80067d4 <LSM6DSL_0_Probe>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
 800659a:	e0cc      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800659c:	4a68      	ldr	r2, [pc, #416]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4967      	ldr	r1, [pc, #412]	; (8006744 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065ae:	f107 010c 	add.w	r1, r7, #12
 80065b2:	4610      	mov	r0, r2
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065bc:	f06f 0306 	mvn.w	r3, #6
 80065c0:	e0b9      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80065c2:	7b3b      	ldrb	r3, [r7, #12]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d103      	bne.n	80065d0 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f043 0302 	orr.w	r3, r3, #2
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80065d0:	7b7b      	ldrb	r3, [r7, #13]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d103      	bne.n	80065de <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d16c      	bne.n	80066be <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f043 0304 	orr.w	r3, r3, #4
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80065ec:	e067      	b.n	80066be <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	f000 f9ac 	bl	800694c <LSM303AGR_ACC_0_Probe>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	e09a      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006600:	4a4f      	ldr	r2, [pc, #316]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	494e      	ldr	r1, [pc, #312]	; (8006744 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006612:	f107 010c 	add.w	r1, r7, #12
 8006616:	4610      	mov	r0, r2
 8006618:	4798      	blx	r3
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006620:	f06f 0306 	mvn.w	r3, #6
 8006624:	e087      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8006626:	7b3b      	ldrb	r3, [r7, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d103      	bne.n	8006634 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f043 0302 	orr.w	r3, r3, #2
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006634:	7b7b      	ldrb	r3, [r7, #13]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d103      	bne.n	8006642 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d13c      	bne.n	80066c2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006650:	e037      	b.n	80066c2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8006652:	6838      	ldr	r0, [r7, #0]
 8006654:	f000 fa1e 	bl	8006a94 <LSM303AGR_MAG_0_Probe>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	e068      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006664:	4a36      	ldr	r2, [pc, #216]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4935      	ldr	r1, [pc, #212]	; (8006744 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006676:	f107 010c 	add.w	r1, r7, #12
 800667a:	4610      	mov	r0, r2
 800667c:	4798      	blx	r3
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006684:	f06f 0306 	mvn.w	r3, #6
 8006688:	e055      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800668a:	7b3b      	ldrb	r3, [r7, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d103      	bne.n	8006698 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006698:	7b7b      	ldrb	r3, [r7, #13]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d103      	bne.n	80066a6 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d10c      	bne.n	80066c6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	f043 0304 	orr.w	r3, r3, #4
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80066b4:	e007      	b.n	80066c6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80066b6:	f06f 0301 	mvn.w	r3, #1
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80066bc:	e004      	b.n	80066c8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80066be:	bf00      	nop
 80066c0:	e002      	b.n	80066c8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80066c6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	e031      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	e02a      	b.n	800672e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	401a      	ands	r2, r3
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d11e      	bne.n	8006722 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 80066e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	401a      	ands	r2, r3
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d118      	bne.n	8006722 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066f8:	4814      	ldr	r0, [pc, #80]	; (800674c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	4413      	add	r3, r2
 8006702:	440b      	add	r3, r1
 8006704:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	490e      	ldr	r1, [pc, #56]	; (8006744 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006712:	4610      	mov	r0, r2
 8006714:	4798      	blx	r3
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800671c:	f06f 0304 	mvn.w	r3, #4
 8006720:	e009      	b.n	8006736 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	3301      	adds	r3, #1
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	2b02      	cmp	r3, #2
 8006732:	d9d1      	bls.n	80066d8 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006736:	4618      	mov	r0, r3
 8006738:	3738      	adds	r7, #56	; 0x38
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200003fc 	.word	0x200003fc
 8006744:	200006c0 	.word	0x200006c0
 8006748:	2000014c 	.word	0x2000014c
 800674c:	200003d8 	.word	0x200003d8

08006750 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d903      	bls.n	8006768 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006760:	f06f 0301 	mvn.w	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	e028      	b.n	80067ba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	401a      	ands	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d11c      	bne.n	80067b4 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006782:	4812      	ldr	r0, [pc, #72]	; (80067cc <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4413      	add	r3, r2
 800678c:	440b      	add	r3, r1
 800678e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	490e      	ldr	r1, [pc, #56]	; (80067d0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067a6:	f06f 0304 	mvn.w	r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e005      	b.n	80067ba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e002      	b.n	80067ba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80067b4:	f06f 0301 	mvn.w	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80067ba:	68fb      	ldr	r3, [r7, #12]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000408 	.word	0x20000408
 80067c8:	2000014c 	.word	0x2000014c
 80067cc:	200003d8 	.word	0x200003d8
 80067d0:	200006c0 	.word	0x200006c0

080067d4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b092      	sub	sp, #72	; 0x48
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80067dc:	2300      	movs	r3, #0
 80067de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80067e0:	2300      	movs	r3, #0
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80067e4:	23d7      	movs	r3, #215	; 0xd7
 80067e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80067ea:	4b4a      	ldr	r3, [pc, #296]	; (8006914 <LSM6DSL_0_Probe+0x140>)
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <LSM6DSL_0_Probe+0x144>)
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80067f2:	4b4a      	ldr	r3, [pc, #296]	; (800691c <LSM6DSL_0_Probe+0x148>)
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <LSM6DSL_0_Probe+0x14c>)
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80067fa:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <LSM6DSL_0_Probe+0x150>)
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80067fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006802:	4619      	mov	r1, r3
 8006804:	4848      	ldr	r0, [pc, #288]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006806:	f7fe f9d5 	bl	8004bb4 <LSM6DSL_RegisterBusIO>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006810:	f06f 0306 	mvn.w	r3, #6
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	e077      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8006818:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800681c:	4619      	mov	r1, r3
 800681e:	4842      	ldr	r0, [pc, #264]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006820:	f7fe fabe 	bl	8004da0 <LSM6DSL_ReadID>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800682a:	f06f 0306 	mvn.w	r3, #6
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	e06a      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8006832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006836:	2b6a      	cmp	r3, #106	; 0x6a
 8006838:	d003      	beq.n	8006842 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800683a:	f06f 0306 	mvn.w	r3, #6
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	e062      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4619      	mov	r1, r3
 8006848:	4837      	ldr	r0, [pc, #220]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 800684a:	f7fe fabf 	bl	8004dcc <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800684e:	7a7b      	ldrb	r3, [r7, #9]
 8006850:	461a      	mov	r2, r3
 8006852:	7a3b      	ldrb	r3, [r7, #8]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	431a      	orrs	r2, r3
 8006858:	7abb      	ldrb	r3, [r7, #10]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4313      	orrs	r3, r2
 800685e:	4a33      	ldr	r2, [pc, #204]	; (800692c <LSM6DSL_0_Probe+0x158>)
 8006860:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 8006864:	4a30      	ldr	r2, [pc, #192]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006866:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8006868:	4b32      	ldr	r3, [pc, #200]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 800686a:	4a33      	ldr	r2, [pc, #204]	; (8006938 <LSM6DSL_0_Probe+0x164>)
 800686c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800686e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11d      	bne.n	80068b0 <LSM6DSL_0_Probe+0xdc>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <LSM6DSL_0_Probe+0xdc>
 800687e:	7a7b      	ldrb	r3, [r7, #9]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d115      	bne.n	80068b0 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <LSM6DSL_0_Probe+0x168>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <LSM6DSL_0_Probe+0x16c>)
 800688a:	492e      	ldr	r1, [pc, #184]	; (8006944 <LSM6DSL_0_Probe+0x170>)
 800688c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006890:	4b28      	ldr	r3, [pc, #160]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a26      	ldr	r2, [pc, #152]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068a4:	f06f 0304 	mvn.w	r3, #4
 80068a8:	647b      	str	r3, [r7, #68]	; 0x44
 80068aa:	e001      	b.n	80068b0 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80068b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11d      	bne.n	80068f2 <LSM6DSL_0_Probe+0x11e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d018      	beq.n	80068f2 <LSM6DSL_0_Probe+0x11e>
 80068c0:	7a3b      	ldrb	r3, [r7, #8]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d115      	bne.n	80068f2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <LSM6DSL_0_Probe+0x168>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <LSM6DSL_0_Probe+0x16c>)
 80068cc:	491e      	ldr	r1, [pc, #120]	; (8006948 <LSM6DSL_0_Probe+0x174>)
 80068ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80068d2:	4b18      	ldr	r3, [pc, #96]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068e6:	f06f 0304 	mvn.w	r3, #4
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
 80068ec:	e001      	b.n	80068f2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80068f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d107      	bne.n	8006908 <LSM6DSL_0_Probe+0x134>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006902:	f06f 0304 	mvn.w	r3, #4
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800690a:	4618      	mov	r0, r3
 800690c:	3748      	adds	r7, #72	; 0x48
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08000741 	.word	0x08000741
 8006918:	080007bd 	.word	0x080007bd
 800691c:	08000871 	.word	0x08000871
 8006920:	0800080d 	.word	0x0800080d
 8006924:	080008d5 	.word	0x080008d5
 8006928:	20000414 	.word	0x20000414
 800692c:	20000408 	.word	0x20000408
 8006930:	200006c0 	.word	0x200006c0
 8006934:	200003fc 	.word	0x200003fc
 8006938:	200000e0 	.word	0x200000e0
 800693c:	2000014c 	.word	0x2000014c
 8006940:	200003d8 	.word	0x200003d8
 8006944:	20000114 	.word	0x20000114
 8006948:	200000f0 	.word	0x200000f0

0800694c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b092      	sub	sp, #72	; 0x48
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006954:	2300      	movs	r3, #0
 8006956:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006958:	2300      	movs	r3, #0
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800695c:	2333      	movs	r3, #51	; 0x33
 800695e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006962:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <LSM303AGR_ACC_0_Probe+0x114>)
 8006964:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006966:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <LSM303AGR_ACC_0_Probe+0x118>)
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800696a:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <LSM303AGR_ACC_0_Probe+0x11c>)
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800696e:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <LSM303AGR_ACC_0_Probe+0x120>)
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006972:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <LSM303AGR_ACC_0_Probe+0x124>)
 8006974:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800697a:	4619      	mov	r1, r3
 800697c:	483d      	ldr	r0, [pc, #244]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 800697e:	f7fc fdd9 	bl	8003534 <LSM303AGR_ACC_RegisterBusIO>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006988:	f06f 0306 	mvn.w	r3, #6
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
 800698e:	e062      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006990:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006994:	4619      	mov	r1, r3
 8006996:	4837      	ldr	r0, [pc, #220]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 8006998:	f7fc fe8d 	bl	80036b6 <LSM303AGR_ACC_ReadID>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069a2:	f06f 0306 	mvn.w	r3, #6
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44
 80069a8:	e055      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80069aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ae:	2b33      	cmp	r3, #51	; 0x33
 80069b0:	d003      	beq.n	80069ba <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069b2:	f06f 0306 	mvn.w	r3, #6
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	e04d      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80069ba:	f107 0308 	add.w	r3, r7, #8
 80069be:	4619      	mov	r1, r3
 80069c0:	482c      	ldr	r0, [pc, #176]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 80069c2:	f7fc fe8f 	bl	80036e4 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80069c6:	7a7b      	ldrb	r3, [r7, #9]
 80069c8:	461a      	mov	r2, r3
 80069ca:	7a3b      	ldrb	r3, [r7, #8]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80069d0:	7abb      	ldrb	r3, [r7, #10]
 80069d2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80069d4:	4313      	orrs	r3, r2
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <LSM303AGR_ACC_0_Probe+0x12c>)
 80069d8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80069da:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <LSM303AGR_ACC_0_Probe+0x130>)
 80069dc:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 80069de:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <LSM303AGR_ACC_0_Probe+0x134>)
 80069e2:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <LSM303AGR_ACC_0_Probe+0x138>)
 80069e4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11e      	bne.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d019      	beq.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
 80069f6:	7a3b      	ldrb	r3, [r7, #8]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d116      	bne.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069fc:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <LSM303AGR_ACC_0_Probe+0x13c>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <LSM303AGR_ACC_0_Probe+0x140>)
 8006a02:	3303      	adds	r3, #3
 8006a04:	4922      	ldr	r1, [pc, #136]	; (8006a90 <LSM303AGR_ACC_0_Probe+0x144>)
 8006a06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <LSM303AGR_ACC_0_Probe+0x134>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <LSM303AGR_ACC_0_Probe+0x130>)
 8006a12:	6852      	ldr	r2, [r2, #4]
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a1e:	f06f 0304 	mvn.w	r3, #4
 8006a22:	647b      	str	r3, [r7, #68]	; 0x44
 8006a24:	e001      	b.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d107      	bne.n	8006a40 <LSM303AGR_ACC_0_Probe+0xf4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a3a:	f06f 0304 	mvn.w	r3, #4
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a50:	f06f 0304 	mvn.w	r3, #4
 8006a54:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3748      	adds	r7, #72	; 0x48
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	08000741 	.word	0x08000741
 8006a64:	080007bd 	.word	0x080007bd
 8006a68:	08000871 	.word	0x08000871
 8006a6c:	0800080d 	.word	0x0800080d
 8006a70:	080008d5 	.word	0x080008d5
 8006a74:	20000444 	.word	0x20000444
 8006a78:	20000408 	.word	0x20000408
 8006a7c:	200006c0 	.word	0x200006c0
 8006a80:	200003fc 	.word	0x200003fc
 8006a84:	20000078 	.word	0x20000078
 8006a88:	2000014c 	.word	0x2000014c
 8006a8c:	200003d8 	.word	0x200003d8
 8006a90:	20000088 	.word	0x20000088

08006a94 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b092      	sub	sp, #72	; 0x48
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006aa4:	233d      	movs	r3, #61	; 0x3d
 8006aa6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006aaa:	4b3f      	ldr	r3, [pc, #252]	; (8006ba8 <LSM303AGR_MAG_0_Probe+0x114>)
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006aae:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <LSM303AGR_MAG_0_Probe+0x118>)
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006ab6:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <LSM303AGR_MAG_0_Probe+0x120>)
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006aba:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <LSM303AGR_MAG_0_Probe+0x124>)
 8006abc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	483d      	ldr	r0, [pc, #244]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006ac6:	f7fd f8f9 	bl	8003cbc <LSM303AGR_MAG_RegisterBusIO>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ad0:	f06f 0306 	mvn.w	r3, #6
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	e062      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006ad8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006adc:	4619      	mov	r1, r3
 8006ade:	4837      	ldr	r0, [pc, #220]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006ae0:	f7fd f9a3 	bl	8003e2a <LSM303AGR_MAG_ReadID>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006aea:	f06f 0306 	mvn.w	r3, #6
 8006aee:	647b      	str	r3, [r7, #68]	; 0x44
 8006af0:	e055      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8006af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d003      	beq.n	8006b02 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006afa:	f06f 0306 	mvn.w	r3, #6
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
 8006b00:	e04d      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	482c      	ldr	r0, [pc, #176]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006b0a:	f7fd f9a5 	bl	8003e58 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006b0e:	7a7b      	ldrb	r3, [r7, #9]
 8006b10:	461a      	mov	r2, r3
 8006b12:	7a3b      	ldrb	r3, [r7, #8]
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006b18:	7abb      	ldrb	r3, [r7, #10]
 8006b1a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	4a28      	ldr	r2, [pc, #160]	; (8006bc0 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006b20:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006b22:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <LSM303AGR_MAG_0_Probe+0x130>)
 8006b24:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006b26:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006b28:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <LSM303AGR_MAG_0_Probe+0x134>)
 8006b2a:	4a28      	ldr	r2, [pc, #160]	; (8006bcc <LSM303AGR_MAG_0_Probe+0x138>)
 8006b2c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11e      	bne.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
 8006b3e:	7abb      	ldrb	r3, [r7, #10]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d116      	bne.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <LSM303AGR_MAG_0_Probe+0x140>)
 8006b4a:	3306      	adds	r3, #6
 8006b4c:	4922      	ldr	r1, [pc, #136]	; (8006bd8 <LSM303AGR_MAG_0_Probe+0x144>)
 8006b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <LSM303AGR_MAG_0_Probe+0x134>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <LSM303AGR_MAG_0_Probe+0x130>)
 8006b5a:	6892      	ldr	r2, [r2, #8]
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b66:	f06f 0304 	mvn.w	r3, #4
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6c:	e001      	b.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <LSM303AGR_MAG_0_Probe+0xf4>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b82:	f06f 0304 	mvn.w	r3, #4
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b98:	f06f 0304 	mvn.w	r3, #4
 8006b9c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3748      	adds	r7, #72	; 0x48
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	08000741 	.word	0x08000741
 8006bac:	080007bd 	.word	0x080007bd
 8006bb0:	08000871 	.word	0x08000871
 8006bb4:	0800080d 	.word	0x0800080d
 8006bb8:	080008d5 	.word	0x080008d5
 8006bbc:	20000470 	.word	0x20000470
 8006bc0:	20000408 	.word	0x20000408
 8006bc4:	200006c0 	.word	0x200006c0
 8006bc8:	200003fc 	.word	0x200003fc
 8006bcc:	200000ac 	.word	0x200000ac
 8006bd0:	2000014c 	.word	0x2000014c
 8006bd4:	200003d8 	.word	0x200003d8
 8006bd8:	200000bc 	.word	0x200000bc

08006bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006be6:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <HAL_Init+0x3c>)
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <HAL_Init+0x3c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf2:	2003      	movs	r0, #3
 8006bf4:	f000 f9a2 	bl	8006f3c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f000 f80f 	bl	8006c1c <HAL_InitTick>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	71fb      	strb	r3, [r7, #7]
 8006c08:	e001      	b.n	8006c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c0a:	f7fa ff68 	bl	8001ade <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	58004000 	.word	0x58004000

08006c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <HAL_InitTick+0x6c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d023      	beq.n	8006c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8006c30:	f002 fb66 	bl	8009300 <HAL_RCC_GetHCLKFreq>
 8006c34:	4601      	mov	r1, r0
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <HAL_InitTick+0x6c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f9b9 	bl	8006fbe <HAL_SYSTICK_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10f      	bne.n	8006c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b0f      	cmp	r3, #15
 8006c56:	d809      	bhi.n	8006c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c58:	2200      	movs	r2, #0
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	f000 f977 	bl	8006f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c64:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <HAL_InitTick+0x70>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e007      	b.n	8006c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
 8006c70:	e004      	b.n	8006c7c <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
 8006c76:	e001      	b.n	8006c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000164 	.word	0x20000164
 8006c8c:	20000160 	.word	0x20000160

08006c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <HAL_IncTick+0x1c>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_IncTick+0x20>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4a03      	ldr	r2, [pc, #12]	; (8006cac <HAL_IncTick+0x1c>)
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	200006cc 	.word	0x200006cc
 8006cb0:	20000164 	.word	0x20000164

08006cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <HAL_GetTick+0x14>)
 8006cba:	681b      	ldr	r3, [r3, #0]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	200006cc 	.word	0x200006cc

08006ccc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006cd0:	4b03      	ldr	r3, [pc, #12]	; (8006ce0 <HAL_GetTickPrio+0x14>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000160 	.word	0x20000160

08006ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <__NVIC_SetPriorityGrouping+0x44>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d00:	4013      	ands	r3, r2
 8006d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d16:	4a04      	ldr	r2, [pc, #16]	; (8006d28 <__NVIC_SetPriorityGrouping+0x44>)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	60d3      	str	r3, [r2, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	e000ed00 	.word	0xe000ed00

08006d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d30:	4b04      	ldr	r3, [pc, #16]	; (8006d44 <__NVIC_GetPriorityGrouping+0x18>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	f003 0307 	and.w	r3, r3, #7
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	e000ed00 	.word	0xe000ed00

08006d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db0b      	blt.n	8006d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d5a:	4909      	ldr	r1, [pc, #36]	; (8006d80 <__NVIC_EnableIRQ+0x38>)
 8006d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	79fa      	ldrb	r2, [r7, #7]
 8006d64:	f002 021f 	and.w	r2, r2, #31
 8006d68:	2001      	movs	r0, #1
 8006d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e100 	.word	0xe000e100

08006d84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	db10      	blt.n	8006db8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d96:	490b      	ldr	r1, [pc, #44]	; (8006dc4 <__NVIC_DisableIRQ+0x40>)
 8006d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	f002 021f 	and.w	r2, r2, #31
 8006da4:	2001      	movs	r0, #1
 8006da6:	fa00 f202 	lsl.w	r2, r0, r2
 8006daa:	3320      	adds	r3, #32
 8006dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006db4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	e000e100 	.word	0xe000e100

08006dc8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	db0c      	blt.n	8006df4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dda:	4909      	ldr	r1, [pc, #36]	; (8006e00 <__NVIC_SetPendingIRQ+0x38>)
 8006ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	79fa      	ldrb	r2, [r7, #7]
 8006de4:	f002 021f 	and.w	r2, r2, #31
 8006de8:	2001      	movs	r0, #1
 8006dea:	fa00 f202 	lsl.w	r2, r0, r2
 8006dee:	3340      	adds	r3, #64	; 0x40
 8006df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	e000e100 	.word	0xe000e100

08006e04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db0c      	blt.n	8006e30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <__NVIC_ClearPendingIRQ+0x38>)
 8006e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	79fa      	ldrb	r2, [r7, #7]
 8006e20:	f002 021f 	and.w	r2, r2, #31
 8006e24:	2001      	movs	r0, #1
 8006e26:	fa00 f202 	lsl.w	r2, r0, r2
 8006e2a:	3360      	adds	r3, #96	; 0x60
 8006e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	e000e100 	.word	0xe000e100

08006e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db0a      	blt.n	8006e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e54:	490d      	ldr	r1, [pc, #52]	; (8006e8c <__NVIC_SetPriority+0x4c>)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	440b      	add	r3, r1
 8006e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e68:	e00a      	b.n	8006e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6a:	4909      	ldr	r1, [pc, #36]	; (8006e90 <__NVIC_SetPriority+0x50>)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3b04      	subs	r3, #4
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	0112      	lsls	r2, r2, #4
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	761a      	strb	r2, [r3, #24]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000e100 	.word	0xe000e100
 8006e90:	e000ed00 	.word	0xe000ed00

08006e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	bf28      	it	cs
 8006eb2:	2304      	movcs	r3, #4
 8006eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d902      	bls.n	8006ec4 <NVIC_EncodePriority+0x30>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3b03      	subs	r3, #3
 8006ec2:	e000      	b.n	8006ec6 <NVIC_EncodePriority+0x32>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	2201      	movs	r2, #1
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eda:	2101      	movs	r1, #1
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	1e59      	subs	r1, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee8:	4313      	orrs	r3, r2
         );
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3724      	adds	r7, #36	; 0x24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f08:	d301      	bcc.n	8006f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e00f      	b.n	8006f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <SysTick_Config+0x40>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f16:	210f      	movs	r1, #15
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	f7ff ff90 	bl	8006e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <SysTick_Config+0x40>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <SysTick_Config+0x40>)
 8006f28:	2207      	movs	r2, #7
 8006f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	e000e010 	.word	0xe000e010

08006f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fecd 	bl	8006ce4 <__NVIC_SetPriorityGrouping>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b086      	sub	sp, #24
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	4603      	mov	r3, r0
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f60:	f7ff fee4 	bl	8006d2c <__NVIC_GetPriorityGrouping>
 8006f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7ff ff92 	bl	8006e94 <NVIC_EncodePriority>
 8006f70:	4602      	mov	r2, r0
 8006f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff61 	bl	8006e40 <__NVIC_SetPriority>
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff fed7 	bl	8006d48 <__NVIC_EnableIRQ>
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fee7 	bl	8006d84 <__NVIC_DisableIRQ>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ff96 	bl	8006ef8 <SysTick_Config>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff feef 	bl	8006dc8 <__NVIC_SetPendingIRQ>
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff feff 	bl	8006e04 <__NVIC_ClearPendingIRQ>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d005      	beq.n	8007032 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2204      	movs	r2, #4
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
 8007030:	e047      	b.n	80070c2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	f022 020e 	bic.w	r2, r2, #14
 8007040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800706a:	f002 021c 	and.w	r2, r2, #28
 800706e:	2101      	movs	r1, #1
 8007070:	fa01 f202 	lsl.w	r2, r1, r2
 8007074:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800707e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00c      	beq.n	80070a2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80070a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
    }
  }
  return status;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070da:	e14c      	b.n	8007376 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	2101      	movs	r1, #1
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	4013      	ands	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 813e 	beq.w	8007370 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d003      	beq.n	8007104 <HAL_GPIO_Init+0x38>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b12      	cmp	r3, #18
 8007102:	d123      	bne.n	800714c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	08da      	lsrs	r2, r3, #3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3208      	adds	r2, #8
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	220f      	movs	r2, #15
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43db      	mvns	r3, r3
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4013      	ands	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	08da      	lsrs	r2, r3, #3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3208      	adds	r2, #8
 8007146:	6939      	ldr	r1, [r7, #16]
 8007148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	2203      	movs	r2, #3
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4013      	ands	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 0203 	and.w	r2, r3, #3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d00b      	beq.n	80071a0 <HAL_GPIO_Init+0xd4>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d007      	beq.n	80071a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007194:	2b11      	cmp	r3, #17
 8007196:	d003      	beq.n	80071a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b12      	cmp	r3, #18
 800719e:	d130      	bne.n	8007202 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	2203      	movs	r2, #3
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	43db      	mvns	r3, r3
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4013      	ands	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071d6:	2201      	movs	r2, #1
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43db      	mvns	r3, r3
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4013      	ands	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	091b      	lsrs	r3, r3, #4
 80071ec:	f003 0201 	and.w	r2, r3, #1
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	2203      	movs	r2, #3
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	43db      	mvns	r3, r3
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4013      	ands	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8098 	beq.w	8007370 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007240:	4a54      	ldr	r2, [pc, #336]	; (8007394 <HAL_GPIO_Init+0x2c8>)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	089b      	lsrs	r3, r3, #2
 8007246:	3302      	adds	r3, #2
 8007248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	220f      	movs	r2, #15
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	43db      	mvns	r3, r3
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4013      	ands	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800726a:	d019      	beq.n	80072a0 <HAL_GPIO_Init+0x1d4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a4a      	ldr	r2, [pc, #296]	; (8007398 <HAL_GPIO_Init+0x2cc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d013      	beq.n	800729c <HAL_GPIO_Init+0x1d0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a49      	ldr	r2, [pc, #292]	; (800739c <HAL_GPIO_Init+0x2d0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00d      	beq.n	8007298 <HAL_GPIO_Init+0x1cc>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a48      	ldr	r2, [pc, #288]	; (80073a0 <HAL_GPIO_Init+0x2d4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <HAL_GPIO_Init+0x1c8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a47      	ldr	r2, [pc, #284]	; (80073a4 <HAL_GPIO_Init+0x2d8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d101      	bne.n	8007290 <HAL_GPIO_Init+0x1c4>
 800728c:	2304      	movs	r3, #4
 800728e:	e008      	b.n	80072a2 <HAL_GPIO_Init+0x1d6>
 8007290:	2307      	movs	r3, #7
 8007292:	e006      	b.n	80072a2 <HAL_GPIO_Init+0x1d6>
 8007294:	2303      	movs	r3, #3
 8007296:	e004      	b.n	80072a2 <HAL_GPIO_Init+0x1d6>
 8007298:	2302      	movs	r3, #2
 800729a:	e002      	b.n	80072a2 <HAL_GPIO_Init+0x1d6>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_GPIO_Init+0x1d6>
 80072a0:	2300      	movs	r3, #0
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	f002 0203 	and.w	r2, r2, #3
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	4093      	lsls	r3, r2
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072b2:	4938      	ldr	r1, [pc, #224]	; (8007394 <HAL_GPIO_Init+0x2c8>)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	089b      	lsrs	r3, r3, #2
 80072b8:	3302      	adds	r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072c0:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 80072c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	43db      	mvns	r3, r3
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4013      	ands	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072e6:	4a30      	ldr	r2, [pc, #192]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80072ee:	4b2e      	ldr	r3, [pc, #184]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	43db      	mvns	r3, r3
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4013      	ands	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007314:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800731c:	4b22      	ldr	r3, [pc, #136]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	43db      	mvns	r3, r3
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4013      	ands	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007340:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007346:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	43db      	mvns	r3, r3
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800736a:	4a0f      	ldr	r2, [pc, #60]	; (80073a8 <HAL_GPIO_Init+0x2dc>)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	3301      	adds	r3, #1
 8007374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	f47f aeab 	bne.w	80070dc <HAL_GPIO_Init+0x10>
  }
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40010000 	.word	0x40010000
 8007398:	48000400 	.word	0x48000400
 800739c:	48000800 	.word	0x48000800
 80073a0:	48000c00 	.word	0x48000c00
 80073a4:	48001000 	.word	0x48001000
 80073a8:	58000800 	.word	0x58000800

080073ac <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80073ba:	e0bb      	b.n	8007534 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80073bc:	2201      	movs	r2, #1
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	409a      	lsls	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4013      	ands	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80af 	beq.w	800752e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 80073d0:	4a5f      	ldr	r2, [pc, #380]	; (8007550 <HAL_GPIO_DeInit+0x1a4>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073dc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	220f      	movs	r2, #15
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4013      	ands	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073f8:	d019      	beq.n	800742e <HAL_GPIO_DeInit+0x82>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a55      	ldr	r2, [pc, #340]	; (8007554 <HAL_GPIO_DeInit+0x1a8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_GPIO_DeInit+0x7e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a54      	ldr	r2, [pc, #336]	; (8007558 <HAL_GPIO_DeInit+0x1ac>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00d      	beq.n	8007426 <HAL_GPIO_DeInit+0x7a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a53      	ldr	r2, [pc, #332]	; (800755c <HAL_GPIO_DeInit+0x1b0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <HAL_GPIO_DeInit+0x76>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a52      	ldr	r2, [pc, #328]	; (8007560 <HAL_GPIO_DeInit+0x1b4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <HAL_GPIO_DeInit+0x72>
 800741a:	2304      	movs	r3, #4
 800741c:	e008      	b.n	8007430 <HAL_GPIO_DeInit+0x84>
 800741e:	2307      	movs	r3, #7
 8007420:	e006      	b.n	8007430 <HAL_GPIO_DeInit+0x84>
 8007422:	2303      	movs	r3, #3
 8007424:	e004      	b.n	8007430 <HAL_GPIO_DeInit+0x84>
 8007426:	2302      	movs	r3, #2
 8007428:	e002      	b.n	8007430 <HAL_GPIO_DeInit+0x84>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_GPIO_DeInit+0x84>
 800742e:	2300      	movs	r3, #0
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	f002 0203 	and.w	r2, r2, #3
 8007436:	0092      	lsls	r2, r2, #2
 8007438:	fa03 f202 	lsl.w	r2, r3, r2
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	429a      	cmp	r2, r3
 8007440:	d136      	bne.n	80074b0 <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	220f      	movs	r2, #15
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007452:	483f      	ldr	r0, [pc, #252]	; (8007550 <HAL_GPIO_DeInit+0x1a4>)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	089b      	lsrs	r3, r3, #2
 8007458:	493d      	ldr	r1, [pc, #244]	; (8007550 <HAL_GPIO_DeInit+0x1a4>)
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	0892      	lsrs	r2, r2, #2
 800745e:	3202      	adds	r2, #2
 8007460:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	43d2      	mvns	r2, r2
 8007468:	400a      	ands	r2, r1
 800746a:	3302      	adds	r3, #2
 800746c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007470:	493c      	ldr	r1, [pc, #240]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007472:	4b3c      	ldr	r3, [pc, #240]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007474:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	43db      	mvns	r3, r3
 800747c:	4013      	ands	r3, r2
 800747e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007482:	4938      	ldr	r1, [pc, #224]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007484:	4b37      	ldr	r3, [pc, #220]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007486:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	43db      	mvns	r3, r3
 800748e:	4013      	ands	r3, r2
 8007490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007494:	4933      	ldr	r1, [pc, #204]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007496:	4b33      	ldr	r3, [pc, #204]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	43db      	mvns	r3, r3
 800749e:	4013      	ands	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80074a2:	4930      	ldr	r1, [pc, #192]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 80074a4:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <HAL_GPIO_DeInit+0x1b8>)
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	43db      	mvns	r3, r3
 80074ac:	4013      	ands	r3, r2
 80074ae:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	2103      	movs	r1, #3
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	08da      	lsrs	r2, r3, #3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	08d9      	lsrs	r1, r3, #3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3108      	adds	r1, #8
 80074d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	200f      	movs	r0, #15
 80074de:	fa00 f303 	lsl.w	r3, r0, r3
 80074e2:	43db      	mvns	r3, r3
 80074e4:	4019      	ands	r1, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3208      	adds	r2, #8
 80074ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	2103      	movs	r1, #3
 80074f8:	fa01 f303 	lsl.w	r3, r1, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	401a      	ands	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	2101      	movs	r1, #1
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	fa01 f303 	lsl.w	r3, r1, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	2103      	movs	r1, #3
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	43db      	mvns	r3, r3
 8007528:	401a      	ands	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	3301      	adds	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	f47f af3d 	bne.w	80073bc <HAL_GPIO_DeInit+0x10>
  }
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	48000400 	.word	0x48000400
 8007558:	48000800 	.word	0x48000800
 800755c:	48000c00 	.word	0x48000c00
 8007560:	48001000 	.word	0x48001000
 8007564:	58000800 	.word	0x58000800

08007568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
 8007574:	4613      	mov	r3, r2
 8007576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007578:	787b      	ldrb	r3, [r7, #1]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800757e:	887a      	ldrh	r2, [r7, #2]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007584:	e002      	b.n	800758c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007586:	887a      	ldrh	r2, [r7, #2]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075b0:	887a      	ldrh	r2, [r7, #2]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80075b6:	e002      	b.n	80075be <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	619a      	str	r2, [r3, #24]
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075d6:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075e2:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f8 ffc0 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	58000800 	.word	0x58000800

080075fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e080      	b.n	8007710 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f8a7 	bl	8007776 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6852      	ldr	r2, [r2, #4]
 8007648:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800764c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	6892      	ldr	r2, [r2, #8]
 8007658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800765c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6892      	ldr	r2, [r2, #8]
 800766e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007672:	609a      	str	r2, [r3, #8]
 8007674:	e006      	b.n	8007684 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6892      	ldr	r2, [r2, #8]
 800767e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007682:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d104      	bne.n	8007696 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007694:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	68d2      	ldr	r2, [r2, #12]
 80076b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6911      	ldr	r1, [r2, #16]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6952      	ldr	r2, [r2, #20]
 80076c6:	4311      	orrs	r1, r2
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6992      	ldr	r2, [r2, #24]
 80076cc:	0212      	lsls	r2, r2, #8
 80076ce:	430a      	orrs	r2, r1
 80076d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	69d1      	ldr	r1, [r2, #28]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6a12      	ldr	r2, [r2, #32]
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e021      	b.n	800776e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2224      	movs	r2, #36	; 0x24
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f821 	bl	800778a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 80f9 	bne.w	80079ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_I2C_Mem_Write+0x34>
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0ed      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_I2C_Mem_Write+0x4e>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0e6      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077f6:	f7ff fa5d 	bl	8006cb4 <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2319      	movs	r3, #25
 8007802:	2201      	movs	r2, #1
 8007804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fadd 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0d1      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2221      	movs	r2, #33	; 0x21
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2240      	movs	r2, #64	; 0x40
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007840:	88f8      	ldrh	r0, [r7, #6]
 8007842:	893a      	ldrh	r2, [r7, #8]
 8007844:	8979      	ldrh	r1, [r7, #10]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4603      	mov	r3, r0
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f9ed 	bl	8007c30 <I2C_RequestMemoryWrite>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0a9      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d90e      	bls.n	8007890 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fbbf 	bl	800800c <I2C_TransferConfig>
 800788e:	e00f      	b.n	80078b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fbae 	bl	800800c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 fac7 	bl	8007e48 <I2C_WaitOnTXISFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e07b      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d034      	beq.n	8007968 <HAL_I2C_Mem_Write+0x1c8>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d130      	bne.n	8007968 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fa59 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e04d      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2bff      	cmp	r3, #255	; 0xff
 8007928:	d90e      	bls.n	8007948 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	8979      	ldrh	r1, [r7, #10]
 8007938:	2300      	movs	r3, #0
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fb63 	bl	800800c <I2C_TransferConfig>
 8007946:	e00f      	b.n	8007968 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	b2da      	uxtb	r2, r3
 8007958:	8979      	ldrh	r1, [r7, #10]
 800795a:	2300      	movs	r3, #0
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fb52 	bl	800800c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d19e      	bne.n	80078b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 faa6 	bl	8007ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e01a      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2220      	movs	r2, #32
 800798c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6859      	ldr	r1, [r3, #4]
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <HAL_I2C_Mem_Write+0x224>)
 800799a:	400b      	ands	r3, r1
 800799c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e000      	b.n	80079bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079ba:	2302      	movs	r3, #2
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	fe00e800 	.word	0xfe00e800

080079c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	817b      	strh	r3, [r7, #10]
 80079da:	460b      	mov	r3, r1
 80079dc:	813b      	strh	r3, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	f040 80fd 	bne.w	8007bea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_I2C_Mem_Read+0x34>
 80079f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0f1      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_I2C_Mem_Read+0x4e>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e0ea      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a1e:	f7ff f949 	bl	8006cb4 <HAL_GetTick>
 8007a22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	2319      	movs	r3, #25
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f9c9 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0d5      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2222      	movs	r2, #34	; 0x22
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2240      	movs	r2, #64	; 0x40
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a3a      	ldr	r2, [r7, #32]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a68:	88f8      	ldrh	r0, [r7, #6]
 8007a6a:	893a      	ldrh	r2, [r7, #8]
 8007a6c:	8979      	ldrh	r1, [r7, #10]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	4603      	mov	r3, r0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f92d 	bl	8007cd8 <I2C_RequestMemoryRead>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0ad      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2bff      	cmp	r3, #255	; 0xff
 8007a98:	d90e      	bls.n	8007ab8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	8979      	ldrh	r1, [r7, #10]
 8007aa8:	4b52      	ldr	r3, [pc, #328]	; (8007bf4 <HAL_I2C_Mem_Read+0x22c>)
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 faab 	bl	800800c <I2C_TransferConfig>
 8007ab6:	e00f      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	8979      	ldrh	r1, [r7, #10]
 8007aca:	4b4a      	ldr	r3, [pc, #296]	; (8007bf4 <HAL_I2C_Mem_Read+0x22c>)
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fa9a 	bl	800800c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2104      	movs	r1, #4
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f970 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e07c      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d034      	beq.n	8007b98 <HAL_I2C_Mem_Read+0x1d0>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d130      	bne.n	8007b98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2180      	movs	r1, #128	; 0x80
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f941 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e04d      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2bff      	cmp	r3, #255	; 0xff
 8007b58:	d90e      	bls.n	8007b78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	22ff      	movs	r2, #255	; 0xff
 8007b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	8979      	ldrh	r1, [r7, #10]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fa4b 	bl	800800c <I2C_TransferConfig>
 8007b76:	e00f      	b.n	8007b98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	8979      	ldrh	r1, [r7, #10]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fa3a 	bl	800800c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d19a      	bne.n	8007ad8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f98e 	bl	8007ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e01a      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6859      	ldr	r1, [r3, #4]
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <HAL_I2C_Mem_Read+0x230>)
 8007bca:	400b      	ands	r3, r1
 8007bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e000      	b.n	8007bec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007bea:	2302      	movs	r3, #2
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	80002400 	.word	0x80002400
 8007bf8:	fe00e800 	.word	0xfe00e800

08007bfc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c0a:	b2db      	uxtb	r3, r3
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	817b      	strh	r3, [r7, #10]
 8007c42:	460b      	mov	r3, r1
 8007c44:	813b      	strh	r3, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	8979      	ldrh	r1, [r7, #10]
 8007c50:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <I2C_RequestMemoryWrite+0xa4>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f9d7 	bl	800800c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	69b9      	ldr	r1, [r7, #24]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f8f0 	bl	8007e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e02c      	b.n	8007ccc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d105      	bne.n	8007c84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	893a      	ldrh	r2, [r7, #8]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	629a      	str	r2, [r3, #40]	; 0x28
 8007c82:	e015      	b.n	8007cb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	893a      	ldrh	r2, [r7, #8]
 8007c8a:	0a12      	lsrs	r2, r2, #8
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f8d6 	bl	8007e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e012      	b.n	8007ccc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	893a      	ldrh	r2, [r7, #8]
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f884 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	80002000 	.word	0x80002000

08007cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	817b      	strh	r3, [r7, #10]
 8007cea:	460b      	mov	r3, r1
 8007cec:	813b      	strh	r3, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	8979      	ldrh	r1, [r7, #10]
 8007cf8:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <I2C_RequestMemoryRead+0xa4>)
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f984 	bl	800800c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	69b9      	ldr	r1, [r7, #24]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f89d 	bl	8007e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e02c      	b.n	8007d72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d105      	bne.n	8007d2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	893a      	ldrh	r2, [r7, #8]
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
 8007d28:	e015      	b.n	8007d56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	893a      	ldrh	r2, [r7, #8]
 8007d30:	0a12      	lsrs	r2, r2, #8
 8007d32:	b292      	uxth	r2, r2
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	69b9      	ldr	r1, [r7, #24]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f883 	bl	8007e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e012      	b.n	8007d72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	893a      	ldrh	r2, [r7, #8]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2140      	movs	r1, #64	; 0x40
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f831 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	80002000 	.word	0x80002000

08007d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d103      	bne.n	8007d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d007      	beq.n	8007dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	6992      	ldr	r2, [r2, #24]
 8007db6:	f042 0201 	orr.w	r2, r2, #1
 8007dba:	619a      	str	r2, [r3, #24]
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dd8:	e022      	b.n	8007e20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d01e      	beq.n	8007e20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de2:	f7fe ff67 	bl	8006cb4 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d802      	bhi.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d113      	bne.n	8007e20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e00f      	b.n	8007e40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	401a      	ands	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d0cd      	beq.n	8007dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e54:	e02c      	b.n	8007eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f870 	bl	8007f40 <I2C_IsAcknowledgeFailed>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e02a      	b.n	8007ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d01e      	beq.n	8007eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fe ff1f 	bl	8006cb4 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d802      	bhi.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d113      	bne.n	8007eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	f043 0220 	orr.w	r2, r3, #32
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e007      	b.n	8007ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d1cb      	bne.n	8007e56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ed4:	e028      	b.n	8007f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f830 	bl	8007f40 <I2C_IsAcknowledgeFailed>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e026      	b.n	8007f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eea:	f7fe fee3 	bl	8006cb4 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d802      	bhi.n	8007f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d113      	bne.n	8007f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e007      	b.n	8007f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d1cf      	bne.n	8007ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d151      	bne.n	8007ffe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f5a:	e022      	b.n	8007fa2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d01e      	beq.n	8007fa2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f64:	f7fe fea6 	bl	8006cb4 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d802      	bhi.n	8007f7a <I2C_IsAcknowledgeFailed+0x3a>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d113      	bne.n	8007fa2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e02e      	b.n	8008000 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d1d5      	bne.n	8007f5c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2210      	movs	r2, #16
 8007fb6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff fedd 	bl	8007d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6859      	ldr	r1, [r3, #4]
 8007fd0:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <I2C_IsAcknowledgeFailed+0xc8>)
 8007fd2:	400b      	ands	r3, r1
 8007fd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f043 0204 	orr.w	r2, r3, #4
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	fe00e800 	.word	0xfe00e800

0800800c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	817b      	strh	r3, [r7, #10]
 800801a:	4613      	mov	r3, r2
 800801c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6859      	ldr	r1, [r3, #4]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	0d5b      	lsrs	r3, r3, #21
 800802c:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <I2C_TransferConfig+0x54>)
 8008032:	4303      	orrs	r3, r0
 8008034:	43db      	mvns	r3, r3
 8008036:	4019      	ands	r1, r3
 8008038:	897b      	ldrh	r3, [r7, #10]
 800803a:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800803e:	7a7b      	ldrb	r3, [r7, #9]
 8008040:	041b      	lsls	r3, r3, #16
 8008042:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008046:	4318      	orrs	r0, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4318      	orrs	r0, r3
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	4303      	orrs	r3, r0
 8008050:	430b      	orrs	r3, r1
 8008052:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	03ff63ff 	.word	0x03ff63ff

08008064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b20      	cmp	r3, #32
 8008078:	d138      	bne.n	80080ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008084:	2302      	movs	r3, #2
 8008086:	e032      	b.n	80080ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2224      	movs	r2, #36	; 0x24
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6812      	ldr	r2, [r2, #0]
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6812      	ldr	r2, [r2, #0]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e000      	b.n	80080ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080ec:	2302      	movs	r3, #2
  }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b20      	cmp	r3, #32
 800810e:	d139      	bne.n	8008184 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800811a:	2302      	movs	r3, #2
 800811c:	e033      	b.n	8008186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2224      	movs	r2, #36	; 0x24
 800812a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6812      	ldr	r2, [r2, #0]
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800814c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008198:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	58000400 	.word	0x58000400

080081b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <HAL_PWREx_GetVoltageRange+0x18>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	58000400 	.word	0x58000400

080081d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80081d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e2:	d101      	bne.n	80081e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <LL_RCC_HSE_EnableBypass>:
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80081f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008206:	6013      	str	r3, [r2, #0]
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <LL_RCC_HSE_DisableBypass>:
{
 8008212:	b480      	push	{r7}
 8008214:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800821a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008224:	6013      	str	r3, [r2, #0]
}
 8008226:	bf00      	nop
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <LL_RCC_HSE_Enable>:
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008242:	6013      	str	r3, [r2, #0]
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_RCC_HSE_Disable>:
{
 800824e:	b480      	push	{r7}
 8008250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008260:	6013      	str	r3, [r2, #0]
}
 8008262:	bf00      	nop
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <LL_RCC_HSE_IsReady>:
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827e:	d101      	bne.n	8008284 <LL_RCC_HSE_IsReady+0x18>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <LL_RCC_HSE_IsReady+0x1a>
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <LL_RCC_HSI_Enable>:
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a2:	6013      	str	r3, [r2, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <LL_RCC_HSI_Disable>:
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80082b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c0:	6013      	str	r3, [r2, #0]
}
 80082c2:	bf00      	nop
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <LL_RCC_HSI_IsReady>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082de:	d101      	bne.n	80082e4 <LL_RCC_HSI_IsReady+0x18>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <LL_RCC_HSI_IsReady+0x1a>
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80082f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	061b      	lsls	r3, r3, #24
 800830a:	4313      	orrs	r3, r2
 800830c:	604b      	str	r3, [r1, #4]
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <LL_RCC_HSI48_Enable>:
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800831e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <LL_RCC_HSI48_Disable>:
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <LL_RCC_HSI48_IsReady>:
{
 800835e:	b480      	push	{r7}
 8008360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b02      	cmp	r3, #2
 8008370:	d101      	bne.n	8008376 <LL_RCC_HSI48_IsReady+0x18>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <LL_RCC_HSI48_IsReady+0x1a>
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <LL_RCC_LSE_Enable>:
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800838a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800839a:	bf00      	nop
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <LL_RCC_LSE_Disable>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80083a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80083bc:	bf00      	nop
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <LL_RCC_LSE_EnableBypass>:
{
 80083c6:	b480      	push	{r7}
 80083c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80083ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	f043 0304 	orr.w	r3, r3, #4
 80083da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <LL_RCC_LSE_DisableBypass>:
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80083ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f023 0304 	bic.w	r3, r3, #4
 80083fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008400:	bf00      	nop
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <LL_RCC_LSE_IsReady>:
{
 800840a:	b480      	push	{r7}
 800840c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800840e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d101      	bne.n	8008422 <LL_RCC_LSE_IsReady+0x18>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <LL_RCC_LSE_IsReady+0x1a>
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <LL_RCC_LSI1_Enable>:
{
 800842e:	b480      	push	{r7}
 8008430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800843a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008446:	bf00      	nop
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <LL_RCC_LSI1_Disable>:
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008468:	bf00      	nop
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <LL_RCC_LSI1_IsReady>:
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800847a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d101      	bne.n	800848a <LL_RCC_LSI1_IsReady+0x18>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <LL_RCC_LSI1_IsReady+0x1a>
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <LL_RCC_LSI2_Enable>:
{
 8008496:	b480      	push	{r7}
 8008498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800849a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800849e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a6:	f043 0304 	orr.w	r3, r3, #4
 80084aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80084ae:	bf00      	nop
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <LL_RCC_LSI2_Disable>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80084bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80084d0:	bf00      	nop
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <LL_RCC_LSI2_IsReady>:
{
 80084da:	b480      	push	{r7}
 80084dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80084de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d101      	bne.n	80084f2 <LL_RCC_LSI2_IsReady+0x18>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <LL_RCC_LSI2_IsReady+0x1a>
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <LL_RCC_LSI2_SetTrimming>:
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008512:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <LL_RCC_MSI_Enable>:
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6013      	str	r3, [r2, #0]
}
 8008540:	bf00      	nop
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <LL_RCC_MSI_Disable>:
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800854e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	6013      	str	r3, [r2, #0]
}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LL_RCC_MSI_IsReady>:
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d101      	bne.n	800857e <LL_RCC_MSI_IsReady+0x16>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <LL_RCC_MSI_IsReady+0x18>
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <LL_RCC_MSI_SetRange>:
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <LL_RCC_MSI_GetRange>:
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085c2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2bb0      	cmp	r3, #176	; 0xb0
 80085c8:	d901      	bls.n	80085ce <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80085ca:	23b0      	movs	r3, #176	; 0xb0
 80085cc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80085ce:	687b      	ldr	r3, [r7, #4]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <LL_RCC_MSI_SetCalibTrimming>:
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80085e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <LL_RCC_SetSysClkSource>:
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800860e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f023 0203 	bic.w	r2, r3, #3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4313      	orrs	r3, r2
 8008620:	608b      	str	r3, [r1, #8]
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <LL_RCC_GetSysClkSource>:
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 030c 	and.w	r3, r3, #12
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_RCC_SetAHBPrescaler>:
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800864e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4313      	orrs	r3, r2
 8008660:	608b      	str	r3, [r1, #8]
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <LL_C2_RCC_SetAHBPrescaler>:
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800867a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <LL_RCC_SetAHB4Prescaler>:
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80086a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80086ae:	f023 020f 	bic.w	r2, r3, #15
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_RCC_SetAPB1Prescaler>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80086d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	608b      	str	r3, [r1, #8]
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <LL_RCC_SetAPB2Prescaler>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80086f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4313      	orrs	r3, r2
 800870a:	608b      	str	r3, [r1, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_RCC_GetAHBPrescaler>:
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008726:	4618      	mov	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <LL_RCC_GetAHB4Prescaler>:
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008738:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008742:	4618      	mov	r0, r3
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <LL_RCC_GetAPB1Prescaler>:
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800875a:	4618      	mov	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <LL_RCC_GetAPB2Prescaler>:
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800879a:	b480      	push	{r7}
 800879c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800879e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ac:	6013      	str	r3, [r2, #0]
}
 80087ae:	bf00      	nop
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ca:	d101      	bne.n	80087d0 <LL_RCC_PLL_IsReady+0x18>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <LL_RCC_PLL_IsReady+0x1a>
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80087e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	0a1b      	lsrs	r3, r3, #8
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80087f6:	b480      	push	{r7}
 80087f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80087fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800880e:	b480      	push	{r7}
 8008810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800882a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0303 	and.w	r3, r3, #3
}
 8008834:	4618      	mov	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800883e:	b480      	push	{r7}
 8008840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008850:	d101      	bne.n	8008856 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008862:	b480      	push	{r7}
 8008864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800886a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800886e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008876:	d101      	bne.n	800887c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008878:	2301      	movs	r3, #1
 800887a:	e000      	b.n	800887e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800888c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889c:	d101      	bne.n	80088a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80088ae:	b480      	push	{r7}
 80088b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80088b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c0:	d101      	bne.n	80088c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80088d2:	b480      	push	{r7}
 80088d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80088d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088e4:	d101      	bne.n	80088ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b08b      	sub	sp, #44	; 0x2c
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e34b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 808f 	beq.w	8008a36 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008918:	f7ff fe89 	bl	800862e <LL_RCC_GetSysClkSource>
 800891c:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800891e:	f7ff ff82 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008922:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_RCC_OscConfig+0x3e>
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	2b0c      	cmp	r3, #12
 800892e:	d149      	bne.n	80089c4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d146      	bne.n	80089c4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008936:	f7ff fe17 	bl	8008568 <LL_RCC_MSI_IsReady>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_RCC_OscConfig+0x54>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e32a      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008950:	f7ff fe2f 	bl	80085b2 <LL_RCC_MSI_GetRange>
 8008954:	4603      	mov	r3, r0
 8008956:	429c      	cmp	r4, r3
 8008958:	d914      	bls.n	8008984 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fd0e 	bl	8009380 <RCC_SetFlashLatencyFromMSIRange>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e319      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fe09 	bl	800858a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fe2d 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>
 8008982:	e013      	b.n	80089ac <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fdfe 	bl	800858a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fe22 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fcef 	bl	8009380 <RCC_SetFlashLatencyFromMSIRange>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e2fa      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80089ac:	f7f9 f9a0 	bl	8001cf0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089b0:	4bb4      	ldr	r3, [pc, #720]	; (8008c84 <HAL_RCC_OscConfig+0x38c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe f931 	bl	8006c1c <HAL_InitTick>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d039      	beq.n	8008a34 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e2ee      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80089cc:	f7ff fdae 	bl	800852c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089d0:	f7fe f970 	bl	8006cb4 <HAL_GetTick>
 80089d4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089d8:	f7fe f96c 	bl	8006cb4 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e2db      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80089ea:	f7ff fdbd 	bl	8008568 <LL_RCC_MSI_IsReady>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0f1      	beq.n	80089d8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fdc6 	bl	800858a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fdea 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>
 8008a08:	e015      	b.n	8008a36 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a0a:	f7ff fd9e 	bl	800854a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a0e:	f7fe f951 	bl	8006cb4 <HAL_GetTick>
 8008a12:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008a14:	e008      	b.n	8008a28 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a16:	f7fe f94d 	bl	8006cb4 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e2bc      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008a28:	f7ff fd9e 	bl	8008568 <LL_RCC_MSI_IsReady>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f1      	bne.n	8008a16 <HAL_RCC_OscConfig+0x11e>
 8008a32:	e000      	b.n	8008a36 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d05a      	beq.n	8008af8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a42:	f7ff fdf4 	bl	800862e <LL_RCC_GetSysClkSource>
 8008a46:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a48:	f7ff feed 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008a4c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_OscConfig+0x168>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	d10d      	bne.n	8008a76 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d10a      	bne.n	8008a76 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a60:	f7ff fc04 	bl	800826c <LL_RCC_HSE_IsReady>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d045      	beq.n	8008af6 <HAL_RCC_OscConfig+0x1fe>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d141      	bne.n	8008af6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e295      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7e:	d102      	bne.n	8008a86 <HAL_RCC_OscConfig+0x18e>
 8008a80:	f7ff fbd6 	bl	8008230 <LL_RCC_HSE_Enable>
 8008a84:	e00d      	b.n	8008aa2 <HAL_RCC_OscConfig+0x1aa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a8e:	d104      	bne.n	8008a9a <HAL_RCC_OscConfig+0x1a2>
 8008a90:	f7ff fbb0 	bl	80081f4 <LL_RCC_HSE_EnableBypass>
 8008a94:	f7ff fbcc 	bl	8008230 <LL_RCC_HSE_Enable>
 8008a98:	e003      	b.n	8008aa2 <HAL_RCC_OscConfig+0x1aa>
 8008a9a:	f7ff fbd8 	bl	800824e <LL_RCC_HSE_Disable>
 8008a9e:	f7ff fbb8 	bl	8008212 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d012      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aaa:	f7fe f903 	bl	8006cb4 <HAL_GetTick>
 8008aae:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ab2:	f7fe f8ff 	bl	8006cb4 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b64      	cmp	r3, #100	; 0x64
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e26e      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008ac4:	f7ff fbd2 	bl	800826c <LL_RCC_HSE_IsReady>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f1      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x1ba>
 8008ace:	e013      	b.n	8008af8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fe f8f0 	bl	8006cb4 <HAL_GetTick>
 8008ad4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ad8:	f7fe f8ec 	bl	8006cb4 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b64      	cmp	r3, #100	; 0x64
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e25b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008aea:	f7ff fbbf 	bl	800826c <LL_RCC_HSE_IsReady>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1f1      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x1e0>
 8008af4:	e000      	b.n	8008af8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d051      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b04:	f7ff fd93 	bl	800862e <LL_RCC_GetSysClkSource>
 8008b08:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b0a:	f7ff fe8c 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008b0e:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d005      	beq.n	8008b22 <HAL_RCC_OscConfig+0x22a>
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b0c      	cmp	r3, #12
 8008b1a:	d113      	bne.n	8008b44 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d110      	bne.n	8008b44 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b22:	f7ff fbd3 	bl	80082cc <LL_RCC_HSI_IsReady>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_RCC_OscConfig+0x240>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e234      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fbd7 	bl	80082f0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b42:	e031      	b.n	8008ba8 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d019      	beq.n	8008b80 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b4c:	f7ff fba0 	bl	8008290 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fe f8b0 	bl	8006cb4 <HAL_GetTick>
 8008b54:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b58:	f7fe f8ac 	bl	8006cb4 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e21b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008b6a:	f7ff fbaf 	bl	80082cc <LL_RCC_HSI_IsReady>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f1      	beq.n	8008b58 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff fbb9 	bl	80082f0 <LL_RCC_HSI_SetCalibTrimming>
 8008b7e:	e013      	b.n	8008ba8 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b80:	f7ff fb95 	bl	80082ae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b84:	f7fe f896 	bl	8006cb4 <HAL_GetTick>
 8008b88:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b8c:	f7fe f892 	bl	8006cb4 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e201      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008b9e:	f7ff fb95 	bl	80082cc <LL_RCC_HSI_IsReady>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1f1      	bne.n	8008b8c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a2 	beq.w	8008d06 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d075      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d046      	beq.n	8008c64 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008bd6:	f7ff fc4c 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d113      	bne.n	8008c08 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008be0:	f7ff fc25 	bl	800842e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008be4:	f7fe f866 	bl	8006cb4 <HAL_GetTick>
 8008be8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008bec:	f7fe f862 	bl	8006cb4 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e1d1      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008bfe:	f7ff fc38 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f1      	beq.n	8008bec <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008c08:	f7ff fc45 	bl	8008496 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0c:	f7fe f852 	bl	8006cb4 <HAL_GetTick>
 8008c10:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008c14:	f7fe f84e 	bl	8006cb4 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e1bd      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008c26:	f7ff fc58 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0f1      	beq.n	8008c14 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fc62 	bl	80084fe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008c3a:	f7ff fc09 	bl	8008450 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7fe f839 	bl	8006cb4 <HAL_GetTick>
 8008c42:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008c46:	f7fe f835 	bl	8006cb4 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e1a4      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008c58:	f7ff fc0b 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f1      	bne.n	8008c46 <HAL_RCC_OscConfig+0x34e>
 8008c62:	e050      	b.n	8008d06 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008c64:	f7ff fbe3 	bl	800842e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c68:	f7fe f824 	bl	8006cb4 <HAL_GetTick>
 8008c6c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008c6e:	e00b      	b.n	8008c88 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008c70:	f7fe f820 	bl	8006cb4 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d904      	bls.n	8008c88 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e18f      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
 8008c82:	bf00      	nop
 8008c84:	20000160 	.word	0x20000160
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008c88:	f7ff fbf3 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0ee      	beq.n	8008c70 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008c92:	f7ff fc11 	bl	80084b8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008c98:	f7fe f80c 	bl	8006cb4 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e17b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008caa:	f7ff fc16 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1f1      	bne.n	8008c98 <HAL_RCC_OscConfig+0x3a0>
 8008cb4:	e027      	b.n	8008d06 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008cb6:	f7ff fbff 	bl	80084b8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cba:	f7fd fffb 	bl	8006cb4 <HAL_GetTick>
 8008cbe:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008cc2:	f7fd fff7 	bl	8006cb4 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e166      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008cd4:	f7ff fc01 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f1      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008cde:	f7ff fbb7 	bl	8008450 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce2:	f7fd ffe7 	bl	8006cb4 <HAL_GetTick>
 8008ce6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008cea:	f7fd ffe3 	bl	8006cb4 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e152      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008cfc:	f7ff fbb9 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f1      	bne.n	8008cea <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d05b      	beq.n	8008dca <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d12:	4ba6      	ldr	r3, [pc, #664]	; (8008fac <HAL_RCC_OscConfig+0x6b4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d114      	bne.n	8008d48 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008d1e:	f7ff fa39 	bl	8008194 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d22:	f7fd ffc7 	bl	8006cb4 <HAL_GetTick>
 8008d26:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d28:	e008      	b.n	8008d3c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d2a:	f7fd ffc3 	bl	8006cb4 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e132      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d3c:	4b9b      	ldr	r3, [pc, #620]	; (8008fac <HAL_RCC_OscConfig+0x6b4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0f0      	beq.n	8008d2a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d102      	bne.n	8008d56 <HAL_RCC_OscConfig+0x45e>
 8008d50:	f7ff fb17 	bl	8008382 <LL_RCC_LSE_Enable>
 8008d54:	e00c      	b.n	8008d70 <HAL_RCC_OscConfig+0x478>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d104      	bne.n	8008d68 <HAL_RCC_OscConfig+0x470>
 8008d5e:	f7ff fb32 	bl	80083c6 <LL_RCC_LSE_EnableBypass>
 8008d62:	f7ff fb0e 	bl	8008382 <LL_RCC_LSE_Enable>
 8008d66:	e003      	b.n	8008d70 <HAL_RCC_OscConfig+0x478>
 8008d68:	f7ff fb1c 	bl	80083a4 <LL_RCC_LSE_Disable>
 8008d6c:	f7ff fb3c 	bl	80083e8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d014      	beq.n	8008da2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d78:	f7fd ff9c 	bl	8006cb4 <HAL_GetTick>
 8008d7c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008d7e:	e00a      	b.n	8008d96 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d80:	f7fd ff98 	bl	8006cb4 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e105      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008d96:	f7ff fb38 	bl	800840a <LL_RCC_LSE_IsReady>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0ef      	beq.n	8008d80 <HAL_RCC_OscConfig+0x488>
 8008da0:	e013      	b.n	8008dca <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da2:	f7fd ff87 	bl	8006cb4 <HAL_GetTick>
 8008da6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008da8:	e00a      	b.n	8008dc0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008daa:	f7fd ff83 	bl	8006cb4 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e0f0      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008dc0:	f7ff fb23 	bl	800840a <LL_RCC_LSE_IsReady>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1ef      	bne.n	8008daa <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02c      	beq.n	8008e30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d014      	beq.n	8008e08 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008dde:	f7ff fa9c 	bl	800831a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de2:	f7fd ff67 	bl	8006cb4 <HAL_GetTick>
 8008de6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008de8:	e008      	b.n	8008dfc <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008dea:	f7fd ff63 	bl	8006cb4 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e0d2      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008dfc:	f7ff faaf 	bl	800835e <LL_RCC_HSI48_IsReady>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f1      	beq.n	8008dea <HAL_RCC_OscConfig+0x4f2>
 8008e06:	e013      	b.n	8008e30 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e08:	f7ff fa98 	bl	800833c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0c:	f7fd ff52 	bl	8006cb4 <HAL_GetTick>
 8008e10:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008e12:	e008      	b.n	8008e26 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e14:	f7fd ff4e 	bl	8006cb4 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e0bd      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008e26:	f7ff fa9a 	bl	800835e <LL_RCC_HSI48_IsReady>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1f1      	bne.n	8008e14 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80b3 	beq.w	8008fa0 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e3a:	f7ff fbf8 	bl	800862e <LL_RCC_GetSysClkSource>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b0c      	cmp	r3, #12
 8008e42:	d076      	beq.n	8008f32 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d14b      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e4c:	f7ff fca5 	bl	800879a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e50:	f7fd ff30 	bl	8006cb4 <HAL_GetTick>
 8008e54:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e56:	e008      	b.n	8008e6a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e58:	f7fd ff2c 	bl	8006cb4 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e09b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e6a:	f7ff fca5 	bl	80087b8 <LL_RCC_PLL_IsReady>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1f1      	bne.n	8008e58 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e74:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	4b4c      	ldr	r3, [pc, #304]	; (8008fb0 <HAL_RCC_OscConfig+0x6b8>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e8a:	4311      	orrs	r1, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e90:	0212      	lsls	r2, r2, #8
 8008e92:	4311      	orrs	r1, r2
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008e98:	4311      	orrs	r1, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008e9e:	4311      	orrs	r1, r2
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eaa:	f7ff fc67 	bl	800877c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebe:	f7fd fef9 	bl	8006cb4 <HAL_GetTick>
 8008ec2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ec6:	f7fd fef5 	bl	8006cb4 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e064      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008ed8:	f7ff fc6e 	bl	80087b8 <LL_RCC_PLL_IsReady>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0f1      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x5ce>
 8008ee2:	e05d      	b.n	8008fa0 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee4:	f7ff fc59 	bl	800879a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8008ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8008f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fd fed2 	bl	8006cb4 <HAL_GetTick>
 8008f10:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f14:	f7fd fece 	bl	8006cb4 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e03d      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f26:	f7ff fc47 	bl	80087b8 <LL_RCC_PLL_IsReady>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f1      	bne.n	8008f14 <HAL_RCC_OscConfig+0x61c>
 8008f30:	e036      	b.n	8008fa0 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e031      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f003 0203 	and.w	r2, r3, #3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d123      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d11c      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d114      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d10d      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d106      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d001      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	372c      	adds	r7, #44	; 0x2c
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd90      	pop	{r4, r7, pc}
 8008faa:	bf00      	nop
 8008fac:	58000400 	.word	0x58000400
 8008fb0:	11c1808c 	.word	0x11c1808c

08008fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e12a      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fc8:	4b97      	ldr	r3, [pc, #604]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0207 	and.w	r2, r3, #7
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d21b      	bcs.n	800900e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fd6:	4994      	ldr	r1, [pc, #592]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 8008fd8:	4b93      	ldr	r3, [pc, #588]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f023 0207 	bic.w	r2, r3, #7
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe6:	f7fd fe65 	bl	8006cb4 <HAL_GetTick>
 8008fea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fec:	e008      	b.n	8009000 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008fee:	f7fd fe61 	bl	8006cb4 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d901      	bls.n	8009000 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e10e      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009000:	4b89      	ldr	r3, [pc, #548]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0207 	and.w	r2, r3, #7
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d1ef      	bne.n	8008fee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d016      	beq.n	8009048 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff fb11 	bl	8008646 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009024:	f7fd fe46 	bl	8006cb4 <HAL_GetTick>
 8009028:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800902c:	f7fd fe42 	bl	8006cb4 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e0ef      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800903e:	f7ff fbfe 	bl	800883e <LL_RCC_IsActiveFlag_HPRE>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0f1      	beq.n	800902c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d016      	beq.n	8009082 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fb08 	bl	800866e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800905e:	f7fd fe29 	bl	8006cb4 <HAL_GetTick>
 8009062:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009066:	f7fd fe25 	bl	8006cb4 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e0d2      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009078:	f7ff fbf3 	bl	8008862 <LL_RCC_IsActiveFlag_C2HPRE>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0f1      	beq.n	8009066 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d016      	beq.n	80090bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fb01 	bl	800869a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009098:	f7fd fe0c 	bl	8006cb4 <HAL_GetTick>
 800909c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80090a0:	f7fd fe08 	bl	8006cb4 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e0b5      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80090b2:	f7ff fbe9 	bl	8008888 <LL_RCC_IsActiveFlag_SHDHPRE>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0f1      	beq.n	80090a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff fafb 	bl	80086c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80090d2:	f7fd fdef 	bl	8006cb4 <HAL_GetTick>
 80090d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80090d8:	e008      	b.n	80090ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80090da:	f7fd fdeb 	bl	8006cb4 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e098      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80090ec:	f7ff fbdf 	bl	80088ae <LL_RCC_IsActiveFlag_PPRE1>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f1      	beq.n	80090da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff faf1 	bl	80086f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800910e:	f7fd fdd1 	bl	8006cb4 <HAL_GetTick>
 8009112:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009114:	e008      	b.n	8009128 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009116:	f7fd fdcd 	bl	8006cb4 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e07a      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009128:	f7ff fbd3 	bl	80088d2 <LL_RCC_IsActiveFlag_PPRE2>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f1      	beq.n	8009116 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d043      	beq.n	80091c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d106      	bne.n	8009154 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009146:	f7ff f891 	bl	800826c <LL_RCC_HSE_IsReady>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11e      	bne.n	800918e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e064      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b03      	cmp	r3, #3
 800915a:	d106      	bne.n	800916a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800915c:	f7ff fb2c 	bl	80087b8 <LL_RCC_PLL_IsReady>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d113      	bne.n	800918e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e059      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009172:	f7ff f9f9 	bl	8008568 <LL_RCC_MSI_IsReady>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e04e      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009180:	f7ff f8a4 	bl	80082cc <LL_RCC_HSI_IsReady>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e047      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fa37 	bl	8008606 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009198:	f7fd fd8c 	bl	8006cb4 <HAL_GetTick>
 800919c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800919e:	e00a      	b.n	80091b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a0:	f7fd fd88 	bl	8006cb4 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e033      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b6:	f7ff fa3a 	bl	800862e <LL_RCC_GetSysClkSource>
 80091ba:	4602      	mov	r2, r0
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d1ec      	bne.n	80091a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0207 	and.w	r2, r3, #7
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d91b      	bls.n	800920c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d4:	4914      	ldr	r1, [pc, #80]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f023 0207 	bic.w	r2, r3, #7
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e4:	f7fd fd66 	bl	8006cb4 <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80091ec:	f7fd fd62 	bl	8006cb4 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e00f      	b.n	800921e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091fe:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <HAL_RCC_ClockConfig+0x274>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0207 	and.w	r2, r3, #7
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d1ef      	bne.n	80091ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800920c:	f7f8 fd70 	bl	8001cf0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009210:	f7fd fd5c 	bl	8006ccc <HAL_GetTickPrio>
 8009214:	4603      	mov	r3, r0
 8009216:	4618      	mov	r0, r3
 8009218:	f7fd fd00 	bl	8006c1c <HAL_InitTick>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	58004000 	.word	0x58004000

0800922c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009232:	f7ff f9fc 	bl	800862e <LL_RCC_GetSysClkSource>
 8009236:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800923e:	f7ff f9b8 	bl	80085b2 <LL_RCC_MSI_GetRange>
 8009242:	4603      	mov	r3, r0
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800924c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e04a      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b04      	cmp	r3, #4
 8009258:	d102      	bne.n	8009260 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800925a:	4b27      	ldr	r3, [pc, #156]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	e044      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b08      	cmp	r3, #8
 8009264:	d10a      	bne.n	800927c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009266:	f7fe ffb3 	bl	80081d0 <LL_RCC_HSE_IsEnabledDiv2>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d102      	bne.n	8009276 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009270:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e039      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009276:	4b21      	ldr	r3, [pc, #132]	; (80092fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	e036      	b.n	80092ea <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800927c:	f7ff fad3 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8009280:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d002      	beq.n	800928e <HAL_RCC_GetSysClockFreq+0x62>
 8009288:	2b03      	cmp	r3, #3
 800928a:	d003      	beq.n	8009294 <HAL_RCC_GetSysClockFreq+0x68>
 800928c:	e00d      	b.n	80092aa <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800928e:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009290:	60bb      	str	r3, [r7, #8]
        break;
 8009292:	e015      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009294:	f7fe ff9c 	bl	80081d0 <LL_RCC_HSE_IsEnabledDiv2>
 8009298:	4603      	mov	r3, r0
 800929a:	2b01      	cmp	r3, #1
 800929c:	d102      	bne.n	80092a4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800929e:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80092a0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80092a2:	e00d      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80092a4:	4b15      	ldr	r3, [pc, #84]	; (80092fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80092a6:	60bb      	str	r3, [r7, #8]
        break;
 80092a8:	e00a      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80092aa:	f7ff f982 	bl	80085b2 <LL_RCC_MSI_GetRange>
 80092ae:	4603      	mov	r3, r0
 80092b0:	091b      	lsrs	r3, r3, #4
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	4a0f      	ldr	r2, [pc, #60]	; (80092f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80092b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092bc:	60bb      	str	r3, [r7, #8]
        break;
 80092be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80092c0:	f7ff fa8c 	bl	80087dc <LL_RCC_PLL_GetN>
 80092c4:	4602      	mov	r2, r0
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	fb03 f402 	mul.w	r4, r3, r2
 80092cc:	f7ff fa9f 	bl	800880e <LL_RCC_PLL_GetDivider>
 80092d0:	4603      	mov	r3, r0
 80092d2:	091b      	lsrs	r3, r3, #4
 80092d4:	3301      	adds	r3, #1
 80092d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80092da:	f7ff fa8c 	bl	80087f6 <LL_RCC_PLL_GetR>
 80092de:	4603      	mov	r3, r0
 80092e0:	0f5b      	lsrs	r3, r3, #29
 80092e2:	3301      	adds	r3, #1
 80092e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80092e8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80092ea:	68fb      	ldr	r3, [r7, #12]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}
 80092f4:	0800f06c 	.word	0x0800f06c
 80092f8:	00f42400 	.word	0x00f42400
 80092fc:	01e84800 	.word	0x01e84800

08009300 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009300:	b598      	push	{r3, r4, r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009304:	f7ff ff92 	bl	800922c <HAL_RCC_GetSysClockFreq>
 8009308:	4604      	mov	r4, r0
 800930a:	f7ff fa05 	bl	8008718 <LL_RCC_GetAHBPrescaler>
 800930e:	4603      	mov	r3, r0
 8009310:	091b      	lsrs	r3, r3, #4
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	4a03      	ldr	r2, [pc, #12]	; (8009324 <HAL_RCC_GetHCLKFreq+0x24>)
 8009318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800931c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009320:	4618      	mov	r0, r3
 8009322:	bd98      	pop	{r3, r4, r7, pc}
 8009324:	0800f00c 	.word	0x0800f00c

08009328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009328:	b598      	push	{r3, r4, r7, lr}
 800932a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800932c:	f7ff ffe8 	bl	8009300 <HAL_RCC_GetHCLKFreq>
 8009330:	4604      	mov	r4, r0
 8009332:	f7ff fa0b 	bl	800874c <LL_RCC_GetAPB1Prescaler>
 8009336:	4603      	mov	r3, r0
 8009338:	0a1b      	lsrs	r3, r3, #8
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	4a04      	ldr	r2, [pc, #16]	; (8009350 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009344:	f003 031f 	and.w	r3, r3, #31
 8009348:	fa24 f303 	lsr.w	r3, r4, r3
}
 800934c:	4618      	mov	r0, r3
 800934e:	bd98      	pop	{r3, r4, r7, pc}
 8009350:	0800f04c 	.word	0x0800f04c

08009354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009354:	b598      	push	{r3, r4, r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009358:	f7ff ffd2 	bl	8009300 <HAL_RCC_GetHCLKFreq>
 800935c:	4604      	mov	r4, r0
 800935e:	f7ff fa01 	bl	8008764 <LL_RCC_GetAPB2Prescaler>
 8009362:	4603      	mov	r3, r0
 8009364:	0adb      	lsrs	r3, r3, #11
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <HAL_RCC_GetPCLK2Freq+0x28>)
 800936c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009370:	f003 031f 	and.w	r3, r3, #31
 8009374:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009378:	4618      	mov	r0, r3
 800937a:	bd98      	pop	{r3, r4, r7, pc}
 800937c:	0800f04c 	.word	0x0800f04c

08009380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2bb0      	cmp	r3, #176	; 0xb0
 800938c:	d903      	bls.n	8009396 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e007      	b.n	80093a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	4a11      	ldr	r2, [pc, #68]	; (80093e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80093a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80093a6:	f7ff f9c3 	bl	8008730 <LL_RCC_GetAHB4Prescaler>
 80093aa:	4603      	mov	r3, r0
 80093ac:	091b      	lsrs	r3, r3, #4
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	4a0d      	ldr	r2, [pc, #52]	; (80093e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80093b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80093be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	0c9c      	lsrs	r4, r3, #18
 80093ca:	f7fe fef3 	bl	80081b4 <HAL_PWREx_GetVoltageRange>
 80093ce:	4603      	mov	r3, r0
 80093d0:	4619      	mov	r1, r3
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 f80c 	bl	80093f0 <RCC_SetFlashLatency>
 80093d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd90      	pop	{r4, r7, pc}
 80093e2:	bf00      	nop
 80093e4:	0800f06c 	.word	0x0800f06c
 80093e8:	0800f00c 	.word	0x0800f00c
 80093ec:	431bde83 	.word	0x431bde83

080093f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b093      	sub	sp, #76	; 0x4c
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80093fa:	4b39      	ldr	r3, [pc, #228]	; (80094e0 <RCC_SetFlashLatency+0xf0>)
 80093fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009406:	4a37      	ldr	r2, [pc, #220]	; (80094e4 <RCC_SetFlashLatency+0xf4>)
 8009408:	f107 031c 	add.w	r3, r7, #28
 800940c:	ca07      	ldmia	r2, {r0, r1, r2}
 800940e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009412:	4b35      	ldr	r3, [pc, #212]	; (80094e8 <RCC_SetFlashLatency+0xf8>)
 8009414:	f107 040c 	add.w	r4, r7, #12
 8009418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800941a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800941e:	2300      	movs	r3, #0
 8009420:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009428:	d11c      	bne.n	8009464 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800942a:	2300      	movs	r3, #0
 800942c:	643b      	str	r3, [r7, #64]	; 0x40
 800942e:	e015      	b.n	800945c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009438:	4413      	add	r3, r2
 800943a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	429a      	cmp	r2, r3
 8009442:	d308      	bcc.n	8009456 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800944c:	4413      	add	r3, r2
 800944e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009452:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009454:	e022      	b.n	800949c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009458:	3301      	adds	r3, #1
 800945a:	643b      	str	r3, [r7, #64]	; 0x40
 800945c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945e:	2b03      	cmp	r3, #3
 8009460:	d9e6      	bls.n	8009430 <RCC_SetFlashLatency+0x40>
 8009462:	e01b      	b.n	800949c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009464:	2300      	movs	r3, #0
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009468:	e015      	b.n	8009496 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800946a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009472:	4413      	add	r3, r2
 8009474:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d308      	bcc.n	8009490 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009486:	4413      	add	r3, r2
 8009488:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800948c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800948e:	e005      	b.n	800949c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009492:	3301      	adds	r3, #1
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	2b02      	cmp	r3, #2
 800949a:	d9e6      	bls.n	800946a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800949c:	4913      	ldr	r1, [pc, #76]	; (80094ec <RCC_SetFlashLatency+0xfc>)
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <RCC_SetFlashLatency+0xfc>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f023 0207 	bic.w	r2, r3, #7
 80094a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a8:	4313      	orrs	r3, r2
 80094aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094ac:	f7fd fc02 	bl	8006cb4 <HAL_GetTick>
 80094b0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80094b2:	e008      	b.n	80094c6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80094b4:	f7fd fbfe 	bl	8006cb4 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d901      	bls.n	80094c6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e007      	b.n	80094d6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <RCC_SetFlashLatency+0xfc>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0207 	and.w	r2, r3, #7
 80094ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d1ef      	bne.n	80094b4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	374c      	adds	r7, #76	; 0x4c
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd90      	pop	{r4, r7, pc}
 80094de:	bf00      	nop
 80094e0:	0800ef98 	.word	0x0800ef98
 80094e4:	0800efa8 	.word	0x0800efa8
 80094e8:	0800efb4 	.word	0x0800efb4
 80094ec:	58004000 	.word	0x58004000

080094f0 <LL_RCC_LSE_IsEnabled>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80094f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <LL_RCC_LSE_IsEnabled+0x18>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <LL_RCC_LSE_IsEnabled+0x1a>
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <LL_RCC_LSE_IsReady>:
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d101      	bne.n	800952c <LL_RCC_LSE_IsReady+0x18>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <LL_RCC_LSE_IsReady+0x1a>
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <LL_RCC_SetRFWKPClockSource>:
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800954c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <LL_RCC_SetSMPSClockSource>:
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800956c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	f023 0203 	bic.w	r2, r3, #3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4313      	orrs	r3, r2
 800957e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_RCC_SetSMPSPrescaler>:
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <LL_RCC_SetUSARTClockSource>:
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80095bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c8:	f023 0203 	bic.w	r2, r3, #3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <LL_RCC_SetLPUARTClockSource>:
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80095e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <LL_RCC_SetI2CClockSource>:
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	091b      	lsrs	r3, r3, #4
 8009624:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009628:	43db      	mvns	r3, r3
 800962a:	401a      	ands	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <LL_RCC_SetLPTIMClockSource>:
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800964e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	0c1b      	lsrs	r3, r3, #16
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	43db      	mvns	r3, r3
 8009662:	401a      	ands	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	041b      	lsls	r3, r3, #16
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <LL_RCC_SetSAIClockSource>:
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800968a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <LL_RCC_SetRNGClockSource>:
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80096ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <LL_RCC_SetCLK48ClockSource>:
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80096da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <LL_RCC_SetUSBClockSource>:
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff ffe3 	bl	80096d2 <LL_RCC_SetCLK48ClockSource>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <LL_RCC_SetADCClockSource>:
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800971c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009728:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <LL_RCC_SetRTCClockSource>:
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800974c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4313      	orrs	r3, r2
 800975c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <LL_RCC_GetRTCClockSource>:
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800977c:	4618      	mov	r0, r3
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <LL_RCC_ForceBackupDomainReset>:
{
 8009786:	b480      	push	{r7}
 8009788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800978a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800978e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800979a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <LL_RCC_PLLSAI1_Enable>:
{
 80097ca:	b480      	push	{r7}
 80097cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80097ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097dc:	6013      	str	r3, [r2, #0]
}
 80097de:	bf00      	nop
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <LL_RCC_PLLSAI1_Disable>:
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80097ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097fa:	6013      	str	r3, [r2, #0]
}
 80097fc:	bf00      	nop
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <LL_RCC_PLLSAI1_IsReady>:
{
 8009806:	b480      	push	{r7}
 8009808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800980a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009818:	d101      	bne.n	800981e <LL_RCC_PLLSAI1_IsReady+0x18>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b088      	sub	sp, #32
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009832:	2300      	movs	r3, #0
 8009834:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009836:	2300      	movs	r3, #0
 8009838:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d033      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800984e:	d00c      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009854:	d802      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800985a:	e017      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800985c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009860:	d017      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009866:	d016      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009868:	e010      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800986a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800986e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009878:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800987a:	e00d      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3304      	adds	r3, #4
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f947 	bl	8009b14 <RCCEx_PLLSAI1_ConfigNP>
 8009886:	4603      	mov	r3, r0
 8009888:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800988a:	e005      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	77fb      	strb	r3, [r7, #31]
        break;
 8009890:	e002      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009898:	7ffb      	ldrb	r3, [r7, #31]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff fee9 	bl	800967a <LL_RCC_SetSAIClockSource>
 80098a8:	e001      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098aa:	7ffb      	ldrb	r3, [r7, #31]
 80098ac:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d046      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80098ba:	f7ff ff57 	bl	800976c <LL_RCC_GetRTCClockSource>
 80098be:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d03c      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80098ca:	f7fe fc63 	bl	8008194 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff ff31 	bl	8009740 <LL_RCC_SetRTCClockSource>
 80098de:	e02e      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80098e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80098ea:	f7ff ff4c 	bl	8009786 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80098ee:	f7ff ff5b 	bl	80097a8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800990a:	f7ff fdf1 	bl	80094f0 <LL_RCC_LSE_IsEnabled>
 800990e:	4603      	mov	r3, r0
 8009910:	2b01      	cmp	r3, #1
 8009912:	d114      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009914:	f7fd f9ce 	bl	8006cb4 <HAL_GetTick>
 8009918:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800991a:	e00b      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800991c:	f7fd f9ca 	bl	8006cb4 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	f241 3288 	movw	r2, #5000	; 0x1388
 800992a:	4293      	cmp	r3, r2
 800992c:	d902      	bls.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	77fb      	strb	r3, [r7, #31]
              break;
 8009932:	e004      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009934:	f7ff fdee 	bl	8009514 <LL_RCC_LSE_IsReady>
 8009938:	4603      	mov	r3, r0
 800993a:	2b01      	cmp	r3, #1
 800993c:	d1ee      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	77bb      	strb	r3, [r7, #30]
 8009942:	e001      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	7ffb      	ldrb	r3, [r7, #31]
 8009946:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fe2b 	bl	80095b4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fe36 	bl	80095e0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0310 	and.w	r3, r3, #16
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff fe5e 	bl	8009646 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d004      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fe53 	bl	8009646 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fe2b 	bl	800960c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fe20 	bl	800960c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d022      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff fe8e 	bl	80096fe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ea:	d107      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80099ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099fa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a04:	d10b      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 f8dd 	bl	8009bca <RCCEx_PLLSAI1_ConfigNQ>
 8009a10:	4603      	mov	r3, r0
 8009a12:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009a14:	7ffb      	ldrb	r3, [r7, #31]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8009a1a:	7ffb      	ldrb	r3, [r7, #31]
 8009a1c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d02b      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a32:	d008      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a3c:	d003      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d105      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fe2b 	bl	80096a6 <LL_RCC_SetRNGClockSource>
 8009a50:	e00a      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7ff fe22 	bl	80096a6 <LL_RCC_SetRNGClockSource>
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fe35 	bl	80096d2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009a70:	d107      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a80:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d022      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff fe3e 	bl	8009714 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa0:	d107      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aba:	d10b      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 f8dd 	bl	8009c80 <RCCEx_PLLSAI1_ConfigNR>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d004      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fd27 	bl	8009538 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d009      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fd46 	bl	800958c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff fd2d 	bl	8009564 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8009b0a:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009b20:	f7ff fe62 	bl	80097e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b24:	f7fd f8c6 	bl	8006cb4 <HAL_GetTick>
 8009b28:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b2a:	e009      	b.n	8009b40 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b2c:	f7fd f8c2 	bl	8006cb4 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d902      	bls.n	8009b40 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3e:	e004      	b.n	8009b4a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b40:	f7ff fe61 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1f0      	bne.n	8009b2c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d137      	bne.n	8009bc0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	4313      	orrs	r3, r2
 8009b66:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009b7e:	f7ff fe24 	bl	80097ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b82:	f7fd f897 	bl	8006cb4 <HAL_GetTick>
 8009b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b88:	e009      	b.n	8009b9e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b8a:	f7fd f893 	bl	8006cb4 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d902      	bls.n	8009b9e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8009b9c:	e004      	b.n	8009ba8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b9e:	f7ff fe32 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d1f0      	bne.n	8009b8a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d108      	bne.n	8009bc0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009bd6:	f7ff fe07 	bl	80097e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bda:	f7fd f86b 	bl	8006cb4 <HAL_GetTick>
 8009bde:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009be0:	e009      	b.n	8009bf6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009be2:	f7fd f867 	bl	8006cb4 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d902      	bls.n	8009bf6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf4:	e004      	b.n	8009c00 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009bf6:	f7ff fe06 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1f0      	bne.n	8009be2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d137      	bne.n	8009c76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009c34:	f7ff fdc9 	bl	80097ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c38:	f7fd f83c 	bl	8006cb4 <HAL_GetTick>
 8009c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c3e:	e009      	b.n	8009c54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c40:	f7fd f838 	bl	8006cb4 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d902      	bls.n	8009c54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	73fb      	strb	r3, [r7, #15]
        break;
 8009c52:	e004      	b.n	8009c5e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c54:	f7ff fdd7 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d1f0      	bne.n	8009c40 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d108      	bne.n	8009c76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c6c:	691a      	ldr	r2, [r3, #16]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009c8c:	f7ff fdac 	bl	80097e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c90:	f7fd f810 	bl	8006cb4 <HAL_GetTick>
 8009c94:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009c96:	e009      	b.n	8009cac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c98:	f7fd f80c 	bl	8006cb4 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d902      	bls.n	8009cac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8009caa:	e004      	b.n	8009cb6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009cac:	f7ff fdab 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1f0      	bne.n	8009c98 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d137      	bne.n	8009d2c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009cea:	f7ff fd6e 	bl	80097ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cee:	f7fc ffe1 	bl	8006cb4 <HAL_GetTick>
 8009cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009cf4:	e009      	b.n	8009d0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009cf6:	f7fc ffdd 	bl	8006cb4 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d902      	bls.n	8009d0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	73fb      	strb	r3, [r7, #15]
        break;
 8009d08:	e004      	b.n	8009d14 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009d0a:	f7ff fd7c 	bl	8009806 <LL_RCC_PLLSAI1_IsReady>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d1f0      	bne.n	8009cf6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d108      	bne.n	8009d2c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e090      	b.n	8009e6a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d106      	bne.n	8009d62 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7f7 fec7 	bl	8001af0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2202      	movs	r2, #2
 8009d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	22ca      	movs	r2, #202	; 0xca
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2253      	movs	r2, #83	; 0x53
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f89f 	bl	8009ebe <RTC_EnterInitMode>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	22ff      	movs	r2, #255	; 0xff
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2204      	movs	r2, #4
 8009d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e067      	b.n	8009e6a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	6891      	ldr	r1, [r2, #8]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6850      	ldr	r0, [r2, #4]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6912      	ldr	r2, [r2, #16]
 8009dc0:	4310      	orrs	r0, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6992      	ldr	r2, [r2, #24]
 8009dc6:	4302      	orrs	r2, r0
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	68d2      	ldr	r2, [r2, #12]
 8009dd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	6911      	ldr	r1, [r2, #16]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6892      	ldr	r2, [r2, #8]
 8009de4:	0412      	lsls	r2, r2, #16
 8009de6:	430a      	orrs	r2, r1
 8009de8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	68d2      	ldr	r2, [r2, #12]
 8009df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009e04:	f022 0203 	bic.w	r2, r2, #3
 8009e08:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	69d0      	ldr	r0, [r2, #28]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6952      	ldr	r2, [r2, #20]
 8009e1c:	4302      	orrs	r2, r0
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d113      	bne.n	8009e58 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f81e 	bl	8009e72 <HAL_RTC_WaitForSynchro>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00d      	beq.n	8009e58 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	22ff      	movs	r2, #255	; 0xff
 8009e42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2204      	movs	r2, #4
 8009e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e008      	b.n	8009e6a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	22ff      	movs	r2, #255	; 0xff
 8009e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009e68:	2300      	movs	r3, #0
  }
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	68d2      	ldr	r2, [r2, #12]
 8009e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e88:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e8a:	f7fc ff13 	bl	8006cb4 <HAL_GetTick>
 8009e8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e90:	e009      	b.n	8009ea6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e92:	f7fc ff0f 	bl	8006cb4 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e007      	b.n	8009eb6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0ee      	beq.n	8009e92 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d119      	bne.n	8009f08 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ede:	f7fc fee9 	bl	8006cb4 <HAL_GetTick>
 8009ee2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ee4:	e009      	b.n	8009efa <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ee6:	f7fc fee5 	bl	8006cb4 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ef4:	d901      	bls.n	8009efa <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e007      	b.n	8009f0a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0ee      	beq.n	8009ee6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e0a8      	b.n	800a080 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	22ca      	movs	r2, #202	; 0xca
 8009f44:	625a      	str	r2, [r3, #36]	; 0x24
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2253      	movs	r2, #83	; 0x53
 8009f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d020      	beq.n	8009f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 8009f5c:	f7fc feaa 	bl	8006cb4 <HAL_GetTick>
 8009f60:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009f62:	e015      	b.n	8009f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f64:	f7fc fea6 	bl	8006cb4 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f72:	d90d      	bls.n	8009f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e077      	b.n	800a080 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e2      	bne.n	8009f64 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	6892      	ldr	r2, [r2, #8]
 8009fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fac:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	6812      	ldr	r2, [r2, #0]
 8009fb6:	68d2      	ldr	r2, [r2, #12]
 8009fb8:	b2d2      	uxtb	r2, r2
 8009fba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009fbe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009fc0:	f7fc fe78 	bl	8006cb4 <HAL_GetTick>
 8009fc4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009fc6:	e015      	b.n	8009ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009fc8:	f7fc fe74 	bl	8006cb4 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fd6:	d90d      	bls.n	8009ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	22ff      	movs	r2, #255	; 0xff
 8009fde:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e045      	b.n	800a080 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0e2      	beq.n	8009fc8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	6892      	ldr	r2, [r2, #8]
 800a014:	f022 0207 	bic.w	r2, r2, #7
 800a018:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	6891      	ldr	r1, [r2, #8]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	430a      	orrs	r2, r1
 800a028:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a02a:	4a17      	ldr	r2, [pc, #92]	; (800a088 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a036:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800a03a:	4a13      	ldr	r2, [pc, #76]	; (800a088 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a03c:	4b12      	ldr	r3, [pc, #72]	; (800a088 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a044:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	6892      	ldr	r2, [r2, #8]
 800a050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a054:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	6892      	ldr	r2, [r2, #8]
 800a060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a064:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	22ff      	movs	r2, #255	; 0xff
 800a06c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	58000800 	.word	0x58000800

0800a08c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00b      	beq.n	800a0ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f818 	bl	800a0d8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	68d2      	ldr	r2, [r2, #12]
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a0b8:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a0ba:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800a0bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a0c0:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	58000800 	.word	0x58000800

0800a0d8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <LL_RCC_GetUSARTClockSource>:
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800a0f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4013      	ands	r3, r2
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <LL_RCC_GetLPUARTClockSource>:
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a118:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4013      	ands	r3, r2
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e042      	b.n	800a1c4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7f7 fce7 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2224      	movs	r2, #36	; 0x24
 800a15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f9c2 	bl	800a4f8 <UART_SetConfig>
 800a174:	4603      	mov	r3, r0
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e022      	b.n	800a1c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 fa06 	bl	800b598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	6852      	ldr	r2, [r2, #4]
 800a196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a19a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	6892      	ldr	r2, [r2, #8]
 800a1a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6812      	ldr	r2, [r2, #0]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fa8d 	bl	800b6dc <UART_CheckIdleState>
 800a1c2:	4603      	mov	r3, r0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1ec:	69fa      	ldr	r2, [r7, #28]
 800a1ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d118      	bne.n	800a22e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	f003 0320 	and.w	r3, r3, #32
 800a202:	2b00      	cmp	r3, #0
 800a204:	d013      	beq.n	800a22e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d104      	bne.n	800a21a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 8145 	beq.w	800a4ae <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
      }
      return;
 800a22c:	e13f      	b.n	800a4ae <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80e8 	beq.w	800a406 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4ba1      	ldr	r3, [pc, #644]	; (800a4c0 <HAL_UART_IRQHandler+0x2f4>)
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d105      	bne.n	800a24c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	4ba0      	ldr	r3, [pc, #640]	; (800a4c4 <HAL_UART_IRQHandler+0x2f8>)
 800a244:	4013      	ands	r3, r2
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 80dd 	beq.w	800a406 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d010      	beq.n	800a278 <HAL_UART_IRQHandler+0xac>
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2201      	movs	r2, #1
 800a266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26e:	f043 0201 	orr.w	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d010      	beq.n	800a2a4 <HAL_UART_IRQHandler+0xd8>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00b      	beq.n	800a2a4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2202      	movs	r2, #2
 800a292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29a:	f043 0204 	orr.w	r2, r3, #4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d010      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x104>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c6:	f043 0202 	orr.w	r2, r3, #2
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d015      	beq.n	800a306 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	f003 0320 	and.w	r3, r3, #32
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4b76      	ldr	r3, [pc, #472]	; (800a4c0 <HAL_UART_IRQHandler+0x2f4>)
 800a2e8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	f043 0208 	orr.w	r2, r3, #8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d011      	beq.n	800a334 <HAL_UART_IRQHandler+0x168>
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00c      	beq.n	800a334 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32a:	f043 0220 	orr.w	r2, r3, #32
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 80b9 	beq.w	800a4b2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b00      	cmp	r3, #0
 800a348:	d011      	beq.n	800a36e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a374:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a380:	2b40      	cmp	r3, #64	; 0x40
 800a382:	d004      	beq.n	800a38e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d031      	beq.n	800a3f2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 fa6c 	bl	800b86c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d123      	bne.n	800a3ea <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	6892      	ldr	r2, [r2, #8]
 800a3ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d013      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3be:	4a42      	ldr	r2, [pc, #264]	; (800a4c8 <HAL_UART_IRQHandler+0x2fc>)
 800a3c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fc fe21 	bl	800700e <HAL_DMA_Abort_IT>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d017      	beq.n	800a402 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e0:	e00f      	b.n	800a402 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f87c 	bl	800a4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	e00b      	b.n	800a402 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f878 	bl	800a4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e007      	b.n	800a402 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f874 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a400:	e057      	b.n	800a4b2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a402:	bf00      	nop
    return;
 800a404:	e055      	b.n	800a4b2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00d      	beq.n	800a42c <HAL_UART_IRQHandler+0x260>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a422:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 fa74 	bl	800b912 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a42a:	e045      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a432:	2b00      	cmp	r3, #0
 800a434:	d012      	beq.n	800a45c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d008      	beq.n	800a45c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d031      	beq.n	800a4b6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	4798      	blx	r3
    }
    return;
 800a45a:	e02c      	b.n	800a4b6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <HAL_UART_IRQHandler+0x2ac>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fa34 	bl	800b8de <UART_EndTransmit_IT>
    return;
 800a476:	e01f      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <HAL_UART_IRQHandler+0x2c8>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fa54 	bl	800b93a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a492:	e011      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00c      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da09      	bge.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 fa3e 	bl	800b926 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4aa:	bf00      	nop
 800a4ac:	e004      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
      return;
 800a4ae:	bf00      	nop
 800a4b0:	e002      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a4b2:	bf00      	nop
 800a4b4:	e000      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a4b6:	bf00      	nop
  }
}
 800a4b8:	3720      	adds	r7, #32
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	10000001 	.word	0x10000001
 800a4c4:	04000120 	.word	0x04000120
 800a4c8:	0800b8b3 	.word	0x0800b8b3

0800a4cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	0000      	movs	r0, r0
	...

0800a4f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	b08b      	sub	sp, #44	; 0x2c
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a502:	2300      	movs	r3, #0
 800a504:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	431a      	orrs	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	4313      	orrs	r3, r2
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52c:	4313      	orrs	r3, r2
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6819      	ldr	r1, [r3, #0]
 800a53a:	4ba4      	ldr	r3, [pc, #656]	; (800a7cc <UART_SetConfig+0x2d4>)
 800a53c:	400b      	ands	r3, r1
 800a53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a540:	430b      	orrs	r3, r1
 800a542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	6852      	ldr	r2, [r2, #4]
 800a54e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68d2      	ldr	r2, [r2, #12]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a9a      	ldr	r2, [pc, #616]	; (800a7d0 <UART_SetConfig+0x2d8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d004      	beq.n	800a574 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a570:	4313      	orrs	r3, r2
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a582:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a588:	430b      	orrs	r3, r1
 800a58a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a596:	f022 010f 	bic.w	r1, r2, #15
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a8b      	ldr	r2, [pc, #556]	; (800a7d4 <UART_SetConfig+0x2dc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d126      	bne.n	800a5fa <UART_SetConfig+0x102>
 800a5ac:	2003      	movs	r0, #3
 800a5ae:	f7ff fd9d 	bl	800a0ec <LL_RCC_GetUSARTClockSource>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d81b      	bhi.n	800a5f0 <UART_SetConfig+0xf8>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0xc8>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5d1 	.word	0x0800a5d1
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5d9 	.word	0x0800a5d9
 800a5cc:	0800a5e9 	.word	0x0800a5e9
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5d6:	e042      	b.n	800a65e <UART_SetConfig+0x166>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5de:	e03e      	b.n	800a65e <UART_SetConfig+0x166>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5e6:	e03a      	b.n	800a65e <UART_SetConfig+0x166>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5ee:	e036      	b.n	800a65e <UART_SetConfig+0x166>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5f6:	bf00      	nop
 800a5f8:	e031      	b.n	800a65e <UART_SetConfig+0x166>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a74      	ldr	r2, [pc, #464]	; (800a7d0 <UART_SetConfig+0x2d8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d129      	bne.n	800a658 <UART_SetConfig+0x160>
 800a604:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a608:	f7ff fd80 	bl	800a10c <LL_RCC_GetLPUARTClockSource>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a612:	d014      	beq.n	800a63e <UART_SetConfig+0x146>
 800a614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a618:	d802      	bhi.n	800a620 <UART_SetConfig+0x128>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d007      	beq.n	800a62e <UART_SetConfig+0x136>
 800a61e:	e016      	b.n	800a64e <UART_SetConfig+0x156>
 800a620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a624:	d007      	beq.n	800a636 <UART_SetConfig+0x13e>
 800a626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a62a:	d00c      	beq.n	800a646 <UART_SetConfig+0x14e>
 800a62c:	e00f      	b.n	800a64e <UART_SetConfig+0x156>
 800a62e:	2300      	movs	r3, #0
 800a630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a634:	e013      	b.n	800a65e <UART_SetConfig+0x166>
 800a636:	2302      	movs	r3, #2
 800a638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a63c:	e00f      	b.n	800a65e <UART_SetConfig+0x166>
 800a63e:	2304      	movs	r3, #4
 800a640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a644:	e00b      	b.n	800a65e <UART_SetConfig+0x166>
 800a646:	2308      	movs	r3, #8
 800a648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a64c:	e007      	b.n	800a65e <UART_SetConfig+0x166>
 800a64e:	2310      	movs	r3, #16
 800a650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a654:	bf00      	nop
 800a656:	e002      	b.n	800a65e <UART_SetConfig+0x166>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a5b      	ldr	r2, [pc, #364]	; (800a7d0 <UART_SetConfig+0x2d8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	f040 8413 	bne.w	800ae90 <UART_SetConfig+0x998>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a66a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a66e:	2b08      	cmp	r3, #8
 800a670:	f200 8173 	bhi.w	800a95a <UART_SetConfig+0x462>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <UART_SetConfig+0x184>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a6a1 	.word	0x0800a6a1
 800a680:	0800a95b 	.word	0x0800a95b
 800a684:	0800a743 	.word	0x0800a743
 800a688:	0800a95b 	.word	0x0800a95b
 800a68c:	0800a80b 	.word	0x0800a80b
 800a690:	0800a95b 	.word	0x0800a95b
 800a694:	0800a95b 	.word	0x0800a95b
 800a698:	0800a95b 	.word	0x0800a95b
 800a69c:	0800a8ad 	.word	0x0800a8ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6a0:	f7fe fe42 	bl	8009328 <HAL_RCC_GetPCLK1Freq>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d044      	beq.n	800a738 <UART_SetConfig+0x240>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d03e      	beq.n	800a734 <UART_SetConfig+0x23c>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d038      	beq.n	800a730 <UART_SetConfig+0x238>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d032      	beq.n	800a72c <UART_SetConfig+0x234>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d02c      	beq.n	800a728 <UART_SetConfig+0x230>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	2b05      	cmp	r3, #5
 800a6d4:	d026      	beq.n	800a724 <UART_SetConfig+0x22c>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	2b06      	cmp	r3, #6
 800a6dc:	d020      	beq.n	800a720 <UART_SetConfig+0x228>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b07      	cmp	r3, #7
 800a6e4:	d01a      	beq.n	800a71c <UART_SetConfig+0x224>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d014      	beq.n	800a718 <UART_SetConfig+0x220>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	2b09      	cmp	r3, #9
 800a6f4:	d00e      	beq.n	800a714 <UART_SetConfig+0x21c>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	2b0a      	cmp	r3, #10
 800a6fc:	d008      	beq.n	800a710 <UART_SetConfig+0x218>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	2b0b      	cmp	r3, #11
 800a704:	d102      	bne.n	800a70c <UART_SetConfig+0x214>
 800a706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a70a:	e016      	b.n	800a73a <UART_SetConfig+0x242>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e014      	b.n	800a73a <UART_SetConfig+0x242>
 800a710:	2380      	movs	r3, #128	; 0x80
 800a712:	e012      	b.n	800a73a <UART_SetConfig+0x242>
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	e010      	b.n	800a73a <UART_SetConfig+0x242>
 800a718:	2320      	movs	r3, #32
 800a71a:	e00e      	b.n	800a73a <UART_SetConfig+0x242>
 800a71c:	2310      	movs	r3, #16
 800a71e:	e00c      	b.n	800a73a <UART_SetConfig+0x242>
 800a720:	230c      	movs	r3, #12
 800a722:	e00a      	b.n	800a73a <UART_SetConfig+0x242>
 800a724:	230a      	movs	r3, #10
 800a726:	e008      	b.n	800a73a <UART_SetConfig+0x242>
 800a728:	2308      	movs	r3, #8
 800a72a:	e006      	b.n	800a73a <UART_SetConfig+0x242>
 800a72c:	2306      	movs	r3, #6
 800a72e:	e004      	b.n	800a73a <UART_SetConfig+0x242>
 800a730:	2304      	movs	r3, #4
 800a732:	e002      	b.n	800a73a <UART_SetConfig+0x242>
 800a734:	2302      	movs	r3, #2
 800a736:	e000      	b.n	800a73a <UART_SetConfig+0x242>
 800a738:	2301      	movs	r3, #1
 800a73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73e:	617b      	str	r3, [r7, #20]
        break;
 800a740:	e10e      	b.n	800a960 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b00      	cmp	r3, #0
 800a748:	d05c      	beq.n	800a804 <UART_SetConfig+0x30c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d056      	beq.n	800a800 <UART_SetConfig+0x308>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b02      	cmp	r3, #2
 800a758:	d050      	beq.n	800a7fc <UART_SetConfig+0x304>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d032      	beq.n	800a7c8 <UART_SetConfig+0x2d0>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b04      	cmp	r3, #4
 800a768:	d02c      	beq.n	800a7c4 <UART_SetConfig+0x2cc>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d026      	beq.n	800a7c0 <UART_SetConfig+0x2c8>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b06      	cmp	r3, #6
 800a778:	d020      	beq.n	800a7bc <UART_SetConfig+0x2c4>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b07      	cmp	r3, #7
 800a780:	d01a      	beq.n	800a7b8 <UART_SetConfig+0x2c0>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b08      	cmp	r3, #8
 800a788:	d014      	beq.n	800a7b4 <UART_SetConfig+0x2bc>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d00e      	beq.n	800a7b0 <UART_SetConfig+0x2b8>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b0a      	cmp	r3, #10
 800a798:	d008      	beq.n	800a7ac <UART_SetConfig+0x2b4>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b0b      	cmp	r3, #11
 800a7a0:	d102      	bne.n	800a7a8 <UART_SetConfig+0x2b0>
 800a7a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a7a6:	e02e      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <UART_SetConfig+0x2e0>)
 800a7aa:	e02c      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7ac:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <UART_SetConfig+0x2e4>)
 800a7ae:	e02a      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7b0:	4b0b      	ldr	r3, [pc, #44]	; (800a7e0 <UART_SetConfig+0x2e8>)
 800a7b2:	e028      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <UART_SetConfig+0x2ec>)
 800a7b6:	e026      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <UART_SetConfig+0x2f0>)
 800a7ba:	e024      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <UART_SetConfig+0x2f4>)
 800a7be:	e022      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <UART_SetConfig+0x2f8>)
 800a7c2:	e020      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7c4:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <UART_SetConfig+0x2fc>)
 800a7c6:	e01e      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <UART_SetConfig+0x300>)
 800a7ca:	e01c      	b.n	800a806 <UART_SetConfig+0x30e>
 800a7cc:	cfff69f3 	.word	0xcfff69f3
 800a7d0:	40008000 	.word	0x40008000
 800a7d4:	40013800 	.word	0x40013800
 800a7d8:	00f42400 	.word	0x00f42400
 800a7dc:	0001e848 	.word	0x0001e848
 800a7e0:	0003d090 	.word	0x0003d090
 800a7e4:	0007a120 	.word	0x0007a120
 800a7e8:	000f4240 	.word	0x000f4240
 800a7ec:	00145855 	.word	0x00145855
 800a7f0:	00186a00 	.word	0x00186a00
 800a7f4:	001e8480 	.word	0x001e8480
 800a7f8:	0028b0aa 	.word	0x0028b0aa
 800a7fc:	4ba7      	ldr	r3, [pc, #668]	; (800aa9c <UART_SetConfig+0x5a4>)
 800a7fe:	e002      	b.n	800a806 <UART_SetConfig+0x30e>
 800a800:	4ba7      	ldr	r3, [pc, #668]	; (800aaa0 <UART_SetConfig+0x5a8>)
 800a802:	e000      	b.n	800a806 <UART_SetConfig+0x30e>
 800a804:	4ba7      	ldr	r3, [pc, #668]	; (800aaa4 <UART_SetConfig+0x5ac>)
 800a806:	617b      	str	r3, [r7, #20]
        break;
 800a808:	e0aa      	b.n	800a960 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a80a:	f7fe fd0f 	bl	800922c <HAL_RCC_GetSysClockFreq>
 800a80e:	4602      	mov	r2, r0
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d044      	beq.n	800a8a2 <UART_SetConfig+0x3aa>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d03e      	beq.n	800a89e <UART_SetConfig+0x3a6>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b02      	cmp	r3, #2
 800a826:	d038      	beq.n	800a89a <UART_SetConfig+0x3a2>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d032      	beq.n	800a896 <UART_SetConfig+0x39e>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b04      	cmp	r3, #4
 800a836:	d02c      	beq.n	800a892 <UART_SetConfig+0x39a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b05      	cmp	r3, #5
 800a83e:	d026      	beq.n	800a88e <UART_SetConfig+0x396>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b06      	cmp	r3, #6
 800a846:	d020      	beq.n	800a88a <UART_SetConfig+0x392>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	2b07      	cmp	r3, #7
 800a84e:	d01a      	beq.n	800a886 <UART_SetConfig+0x38e>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b08      	cmp	r3, #8
 800a856:	d014      	beq.n	800a882 <UART_SetConfig+0x38a>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d00e      	beq.n	800a87e <UART_SetConfig+0x386>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	2b0a      	cmp	r3, #10
 800a866:	d008      	beq.n	800a87a <UART_SetConfig+0x382>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2b0b      	cmp	r3, #11
 800a86e:	d102      	bne.n	800a876 <UART_SetConfig+0x37e>
 800a870:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a874:	e016      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a876:	2301      	movs	r3, #1
 800a878:	e014      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a87a:	2380      	movs	r3, #128	; 0x80
 800a87c:	e012      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a87e:	2340      	movs	r3, #64	; 0x40
 800a880:	e010      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a882:	2320      	movs	r3, #32
 800a884:	e00e      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a886:	2310      	movs	r3, #16
 800a888:	e00c      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a88a:	230c      	movs	r3, #12
 800a88c:	e00a      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a88e:	230a      	movs	r3, #10
 800a890:	e008      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a892:	2308      	movs	r3, #8
 800a894:	e006      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a896:	2306      	movs	r3, #6
 800a898:	e004      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a89a:	2304      	movs	r3, #4
 800a89c:	e002      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e000      	b.n	800a8a4 <UART_SetConfig+0x3ac>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a8:	617b      	str	r3, [r7, #20]
        break;
 800a8aa:	e059      	b.n	800a960 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d04e      	beq.n	800a952 <UART_SetConfig+0x45a>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d047      	beq.n	800a94c <UART_SetConfig+0x454>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d040      	beq.n	800a946 <UART_SetConfig+0x44e>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d039      	beq.n	800a940 <UART_SetConfig+0x448>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d032      	beq.n	800a93a <UART_SetConfig+0x442>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	d02b      	beq.n	800a934 <UART_SetConfig+0x43c>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b06      	cmp	r3, #6
 800a8e2:	d024      	beq.n	800a92e <UART_SetConfig+0x436>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	d01d      	beq.n	800a928 <UART_SetConfig+0x430>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d016      	beq.n	800a922 <UART_SetConfig+0x42a>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b09      	cmp	r3, #9
 800a8fa:	d00f      	beq.n	800a91c <UART_SetConfig+0x424>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b0a      	cmp	r3, #10
 800a902:	d008      	beq.n	800a916 <UART_SetConfig+0x41e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b0b      	cmp	r3, #11
 800a90a:	d101      	bne.n	800a910 <UART_SetConfig+0x418>
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	e022      	b.n	800a956 <UART_SetConfig+0x45e>
 800a910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a914:	e01f      	b.n	800a956 <UART_SetConfig+0x45e>
 800a916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a91a:	e01c      	b.n	800a956 <UART_SetConfig+0x45e>
 800a91c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a920:	e019      	b.n	800a956 <UART_SetConfig+0x45e>
 800a922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a926:	e016      	b.n	800a956 <UART_SetConfig+0x45e>
 800a928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a92c:	e013      	b.n	800a956 <UART_SetConfig+0x45e>
 800a92e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a932:	e010      	b.n	800a956 <UART_SetConfig+0x45e>
 800a934:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a938:	e00d      	b.n	800a956 <UART_SetConfig+0x45e>
 800a93a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a93e:	e00a      	b.n	800a956 <UART_SetConfig+0x45e>
 800a940:	f241 5355 	movw	r3, #5461	; 0x1555
 800a944:	e007      	b.n	800a956 <UART_SetConfig+0x45e>
 800a946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a94a:	e004      	b.n	800a956 <UART_SetConfig+0x45e>
 800a94c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a950:	e001      	b.n	800a956 <UART_SetConfig+0x45e>
 800a952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a956:	617b      	str	r3, [r7, #20]
        break;
 800a958:	e002      	b.n	800a960 <UART_SetConfig+0x468>
      default:
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	76fb      	strb	r3, [r7, #27]
        break;
 800a95e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 85ee 	beq.w	800b544 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	441a      	add	r2, r3
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	429a      	cmp	r2, r3
 800a976:	d805      	bhi.n	800a984 <UART_SetConfig+0x48c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	429a      	cmp	r2, r3
 800a982:	d203      	bcs.n	800a98c <UART_SetConfig+0x494>
      {
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	76fb      	strb	r3, [r7, #27]
 800a988:	f000 bddc 	b.w	800b544 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 800a98c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a990:	2b08      	cmp	r3, #8
 800a992:	f200 826a 	bhi.w	800ae6a <UART_SetConfig+0x972>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <UART_SetConfig+0x4a4>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800ae6b 	.word	0x0800ae6b
 800a9a4:	0800aafd 	.word	0x0800aafd
 800a9a8:	0800ae6b 	.word	0x0800ae6b
 800a9ac:	0800abed 	.word	0x0800abed
 800a9b0:	0800ae6b 	.word	0x0800ae6b
 800a9b4:	0800ae6b 	.word	0x0800ae6b
 800a9b8:	0800ae6b 	.word	0x0800ae6b
 800a9bc:	0800ad17 	.word	0x0800ad17
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a9c0:	f7fe fcb2 	bl	8009328 <HAL_RCC_GetPCLK1Freq>
 800a9c4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f04f 0100 	mov.w	r1, #0
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d06d      	beq.n	800aab2 <UART_SetConfig+0x5ba>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d064      	beq.n	800aaa8 <UART_SetConfig+0x5b0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d055      	beq.n	800aa92 <UART_SetConfig+0x59a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d04c      	beq.n	800aa88 <UART_SetConfig+0x590>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d043      	beq.n	800aa7e <UART_SetConfig+0x586>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d03a      	beq.n	800aa74 <UART_SetConfig+0x57c>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	2b06      	cmp	r3, #6
 800aa04:	d031      	beq.n	800aa6a <UART_SetConfig+0x572>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	2b07      	cmp	r3, #7
 800aa0c:	d028      	beq.n	800aa60 <UART_SetConfig+0x568>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	d01f      	beq.n	800aa56 <UART_SetConfig+0x55e>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	2b09      	cmp	r3, #9
 800aa1c:	d016      	beq.n	800aa4c <UART_SetConfig+0x554>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa22:	2b0a      	cmp	r3, #10
 800aa24:	d00d      	beq.n	800aa42 <UART_SetConfig+0x54a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	2b0b      	cmp	r3, #11
 800aa2c:	d104      	bne.n	800aa38 <UART_SetConfig+0x540>
 800aa2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	e040      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa38:	f04f 0301 	mov.w	r3, #1
 800aa3c:	f04f 0400 	mov.w	r4, #0
 800aa40:	e03b      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa42:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	e036      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa4c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa50:	f04f 0400 	mov.w	r4, #0
 800aa54:	e031      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa56:	f04f 0320 	mov.w	r3, #32
 800aa5a:	f04f 0400 	mov.w	r4, #0
 800aa5e:	e02c      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa60:	f04f 0310 	mov.w	r3, #16
 800aa64:	f04f 0400 	mov.w	r4, #0
 800aa68:	e027      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa6a:	f04f 030c 	mov.w	r3, #12
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e022      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa74:	f04f 030a 	mov.w	r3, #10
 800aa78:	f04f 0400 	mov.w	r4, #0
 800aa7c:	e01d      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa7e:	f04f 0308 	mov.w	r3, #8
 800aa82:	f04f 0400 	mov.w	r4, #0
 800aa86:	e018      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa88:	f04f 0306 	mov.w	r3, #6
 800aa8c:	f04f 0400 	mov.w	r4, #0
 800aa90:	e013      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa92:	f04f 0304 	mov.w	r3, #4
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e00e      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aa9c:	003d0900 	.word	0x003d0900
 800aaa0:	007a1200 	.word	0x007a1200
 800aaa4:	00f42400 	.word	0x00f42400
 800aaa8:	f04f 0302 	mov.w	r3, #2
 800aaac:	f04f 0400 	mov.w	r4, #0
 800aab0:	e003      	b.n	800aaba <UART_SetConfig+0x5c2>
 800aab2:	f04f 0301 	mov.w	r3, #1
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	461a      	mov	r2, r3
 800aabc:	4623      	mov	r3, r4
 800aabe:	f7f5 fb67 	bl	8000190 <__aeabi_uldivmod>
 800aac2:	4603      	mov	r3, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800aaca:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800aace:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	f04f 0400 	mov.w	r4, #0
 800aadc:	eb18 0003 	adds.w	r0, r8, r3
 800aae0:	eb49 0104 	adc.w	r1, r9, r4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f04f 0400 	mov.w	r4, #0
 800aaec:	461a      	mov	r2, r3
 800aaee:	4623      	mov	r3, r4
 800aaf0:	f7f5 fb4e 	bl	8000190 <__aeabi_uldivmod>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	61fb      	str	r3, [r7, #28]
            break;
 800aafa:	e1b9      	b.n	800ae70 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d059      	beq.n	800abb8 <UART_SetConfig+0x6c0>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d051      	beq.n	800abb0 <UART_SetConfig+0x6b8>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d049      	beq.n	800aba8 <UART_SetConfig+0x6b0>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d042      	beq.n	800aba2 <UART_SetConfig+0x6aa>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d03a      	beq.n	800ab9a <UART_SetConfig+0x6a2>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b05      	cmp	r3, #5
 800ab2a:	d032      	beq.n	800ab92 <UART_SetConfig+0x69a>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b06      	cmp	r3, #6
 800ab32:	d02b      	beq.n	800ab8c <UART_SetConfig+0x694>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b07      	cmp	r3, #7
 800ab3a:	d023      	beq.n	800ab84 <UART_SetConfig+0x68c>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d01b      	beq.n	800ab7c <UART_SetConfig+0x684>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d013      	beq.n	800ab74 <UART_SetConfig+0x67c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	2b0a      	cmp	r3, #10
 800ab52:	d00b      	beq.n	800ab6c <UART_SetConfig+0x674>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	2b0b      	cmp	r3, #11
 800ab5a:	d103      	bne.n	800ab64 <UART_SetConfig+0x66c>
 800ab5c:	4ba8      	ldr	r3, [pc, #672]	; (800ae00 <UART_SetConfig+0x908>)
 800ab5e:	f04f 0400 	mov.w	r4, #0
 800ab62:	e02c      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab64:	4ba7      	ldr	r3, [pc, #668]	; (800ae04 <UART_SetConfig+0x90c>)
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	e028      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab6c:	4ba6      	ldr	r3, [pc, #664]	; (800ae08 <UART_SetConfig+0x910>)
 800ab6e:	f04f 0400 	mov.w	r4, #0
 800ab72:	e024      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab74:	4ba5      	ldr	r3, [pc, #660]	; (800ae0c <UART_SetConfig+0x914>)
 800ab76:	f04f 0400 	mov.w	r4, #0
 800ab7a:	e020      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab7c:	4ba4      	ldr	r3, [pc, #656]	; (800ae10 <UART_SetConfig+0x918>)
 800ab7e:	f04f 0400 	mov.w	r4, #0
 800ab82:	e01c      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab84:	4ba3      	ldr	r3, [pc, #652]	; (800ae14 <UART_SetConfig+0x91c>)
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	e018      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab8c:	a498      	add	r4, pc, #608	; (adr r4, 800adf0 <UART_SetConfig+0x8f8>)
 800ab8e:	cc18      	ldmia	r4, {r3, r4}
 800ab90:	e015      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab92:	4ba1      	ldr	r3, [pc, #644]	; (800ae18 <UART_SetConfig+0x920>)
 800ab94:	f04f 0400 	mov.w	r4, #0
 800ab98:	e011      	b.n	800abbe <UART_SetConfig+0x6c6>
 800ab9a:	4ba0      	ldr	r3, [pc, #640]	; (800ae1c <UART_SetConfig+0x924>)
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e00d      	b.n	800abbe <UART_SetConfig+0x6c6>
 800aba2:	a495      	add	r4, pc, #596	; (adr r4, 800adf8 <UART_SetConfig+0x900>)
 800aba4:	cc18      	ldmia	r4, {r3, r4}
 800aba6:	e00a      	b.n	800abbe <UART_SetConfig+0x6c6>
 800aba8:	4b9d      	ldr	r3, [pc, #628]	; (800ae20 <UART_SetConfig+0x928>)
 800abaa:	f04f 0400 	mov.w	r4, #0
 800abae:	e006      	b.n	800abbe <UART_SetConfig+0x6c6>
 800abb0:	4b9c      	ldr	r3, [pc, #624]	; (800ae24 <UART_SetConfig+0x92c>)
 800abb2:	f04f 0400 	mov.w	r4, #0
 800abb6:	e002      	b.n	800abbe <UART_SetConfig+0x6c6>
 800abb8:	4b92      	ldr	r3, [pc, #584]	; (800ae04 <UART_SetConfig+0x90c>)
 800abba:	f04f 0400 	mov.w	r4, #0
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6852      	ldr	r2, [r2, #4]
 800abc2:	0852      	lsrs	r2, r2, #1
 800abc4:	4611      	mov	r1, r2
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	185d      	adds	r5, r3, r1
 800abcc:	eb44 0602 	adc.w	r6, r4, r2
 800abd0:	4628      	mov	r0, r5
 800abd2:	4631      	mov	r1, r6
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f04f 0400 	mov.w	r4, #0
 800abdc:	461a      	mov	r2, r3
 800abde:	4623      	mov	r3, r4
 800abe0:	f7f5 fad6 	bl	8000190 <__aeabi_uldivmod>
 800abe4:	4603      	mov	r3, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	61fb      	str	r3, [r7, #28]
            break;
 800abea:	e141      	b.n	800ae70 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800abec:	f7fe fb1e 	bl	800922c <HAL_RCC_GetSysClockFreq>
 800abf0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f04f 0100 	mov.w	r1, #0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d067      	beq.n	800acd2 <UART_SetConfig+0x7da>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d05e      	beq.n	800acc8 <UART_SetConfig+0x7d0>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d055      	beq.n	800acbe <UART_SetConfig+0x7c6>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d04c      	beq.n	800acb4 <UART_SetConfig+0x7bc>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d043      	beq.n	800acaa <UART_SetConfig+0x7b2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	d03a      	beq.n	800aca0 <UART_SetConfig+0x7a8>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b06      	cmp	r3, #6
 800ac30:	d031      	beq.n	800ac96 <UART_SetConfig+0x79e>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b07      	cmp	r3, #7
 800ac38:	d028      	beq.n	800ac8c <UART_SetConfig+0x794>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d01f      	beq.n	800ac82 <UART_SetConfig+0x78a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b09      	cmp	r3, #9
 800ac48:	d016      	beq.n	800ac78 <UART_SetConfig+0x780>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	2b0a      	cmp	r3, #10
 800ac50:	d00d      	beq.n	800ac6e <UART_SetConfig+0x776>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	2b0b      	cmp	r3, #11
 800ac58:	d104      	bne.n	800ac64 <UART_SetConfig+0x76c>
 800ac5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac5e:	f04f 0400 	mov.w	r4, #0
 800ac62:	e03a      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac64:	f04f 0301 	mov.w	r3, #1
 800ac68:	f04f 0400 	mov.w	r4, #0
 800ac6c:	e035      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac72:	f04f 0400 	mov.w	r4, #0
 800ac76:	e030      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac78:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac7c:	f04f 0400 	mov.w	r4, #0
 800ac80:	e02b      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac82:	f04f 0320 	mov.w	r3, #32
 800ac86:	f04f 0400 	mov.w	r4, #0
 800ac8a:	e026      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac8c:	f04f 0310 	mov.w	r3, #16
 800ac90:	f04f 0400 	mov.w	r4, #0
 800ac94:	e021      	b.n	800acda <UART_SetConfig+0x7e2>
 800ac96:	f04f 030c 	mov.w	r3, #12
 800ac9a:	f04f 0400 	mov.w	r4, #0
 800ac9e:	e01c      	b.n	800acda <UART_SetConfig+0x7e2>
 800aca0:	f04f 030a 	mov.w	r3, #10
 800aca4:	f04f 0400 	mov.w	r4, #0
 800aca8:	e017      	b.n	800acda <UART_SetConfig+0x7e2>
 800acaa:	f04f 0308 	mov.w	r3, #8
 800acae:	f04f 0400 	mov.w	r4, #0
 800acb2:	e012      	b.n	800acda <UART_SetConfig+0x7e2>
 800acb4:	f04f 0306 	mov.w	r3, #6
 800acb8:	f04f 0400 	mov.w	r4, #0
 800acbc:	e00d      	b.n	800acda <UART_SetConfig+0x7e2>
 800acbe:	f04f 0304 	mov.w	r3, #4
 800acc2:	f04f 0400 	mov.w	r4, #0
 800acc6:	e008      	b.n	800acda <UART_SetConfig+0x7e2>
 800acc8:	f04f 0302 	mov.w	r3, #2
 800accc:	f04f 0400 	mov.w	r4, #0
 800acd0:	e003      	b.n	800acda <UART_SetConfig+0x7e2>
 800acd2:	f04f 0301 	mov.w	r3, #1
 800acd6:	f04f 0400 	mov.w	r4, #0
 800acda:	461a      	mov	r2, r3
 800acdc:	4623      	mov	r3, r4
 800acde:	f7f5 fa57 	bl	8000190 <__aeabi_uldivmod>
 800ace2:	4603      	mov	r3, r0
 800ace4:	460c      	mov	r4, r1
 800ace6:	0226      	lsls	r6, r4, #8
 800ace8:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 800acec:	021d      	lsls	r5, r3, #8
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	f04f 0400 	mov.w	r4, #0
 800acf8:	18e8      	adds	r0, r5, r3
 800acfa:	eb46 0104 	adc.w	r1, r6, r4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f04f 0400 	mov.w	r4, #0
 800ad06:	461a      	mov	r2, r3
 800ad08:	4623      	mov	r3, r4
 800ad0a:	f7f5 fa41 	bl	8000190 <__aeabi_uldivmod>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	61fb      	str	r3, [r7, #28]
            break;
 800ad14:	e0ac      	b.n	800ae70 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 808a 	beq.w	800ae34 <UART_SetConfig+0x93c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d05b      	beq.n	800ade0 <UART_SetConfig+0x8e8>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d052      	beq.n	800add6 <UART_SetConfig+0x8de>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d04a      	beq.n	800adce <UART_SetConfig+0x8d6>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	2b04      	cmp	r3, #4
 800ad3e:	d041      	beq.n	800adc4 <UART_SetConfig+0x8cc>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	2b05      	cmp	r3, #5
 800ad46:	d039      	beq.n	800adbc <UART_SetConfig+0x8c4>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4c:	2b06      	cmp	r3, #6
 800ad4e:	d031      	beq.n	800adb4 <UART_SetConfig+0x8bc>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	2b07      	cmp	r3, #7
 800ad56:	d028      	beq.n	800adaa <UART_SetConfig+0x8b2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d01f      	beq.n	800ada0 <UART_SetConfig+0x8a8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	2b09      	cmp	r3, #9
 800ad66:	d016      	beq.n	800ad96 <UART_SetConfig+0x89e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b0a      	cmp	r3, #10
 800ad6e:	d00d      	beq.n	800ad8c <UART_SetConfig+0x894>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	2b0b      	cmp	r3, #11
 800ad76:	d104      	bne.n	800ad82 <UART_SetConfig+0x88a>
 800ad78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad7c:	f04f 0400 	mov.w	r4, #0
 800ad80:	e05c      	b.n	800ae3c <UART_SetConfig+0x944>
 800ad82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad86:	f04f 0400 	mov.w	r4, #0
 800ad8a:	e057      	b.n	800ae3c <UART_SetConfig+0x944>
 800ad8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad90:	f04f 0400 	mov.w	r4, #0
 800ad94:	e052      	b.n	800ae3c <UART_SetConfig+0x944>
 800ad96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad9a:	f04f 0400 	mov.w	r4, #0
 800ad9e:	e04d      	b.n	800ae3c <UART_SetConfig+0x944>
 800ada0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ada4:	f04f 0400 	mov.w	r4, #0
 800ada8:	e048      	b.n	800ae3c <UART_SetConfig+0x944>
 800adaa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800adae:	f04f 0400 	mov.w	r4, #0
 800adb2:	e043      	b.n	800ae3c <UART_SetConfig+0x944>
 800adb4:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <UART_SetConfig+0x930>)
 800adb6:	f04f 0400 	mov.w	r4, #0
 800adba:	e03f      	b.n	800ae3c <UART_SetConfig+0x944>
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <UART_SetConfig+0x934>)
 800adbe:	f04f 0400 	mov.w	r4, #0
 800adc2:	e03b      	b.n	800ae3c <UART_SetConfig+0x944>
 800adc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800adc8:	f04f 0400 	mov.w	r4, #0
 800adcc:	e036      	b.n	800ae3c <UART_SetConfig+0x944>
 800adce:	4b18      	ldr	r3, [pc, #96]	; (800ae30 <UART_SetConfig+0x938>)
 800add0:	f04f 0400 	mov.w	r4, #0
 800add4:	e032      	b.n	800ae3c <UART_SetConfig+0x944>
 800add6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adda:	f04f 0400 	mov.w	r4, #0
 800adde:	e02d      	b.n	800ae3c <UART_SetConfig+0x944>
 800ade0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ade4:	f04f 0400 	mov.w	r4, #0
 800ade8:	e028      	b.n	800ae3c <UART_SetConfig+0x944>
 800adea:	bf00      	nop
 800adec:	f3af 8000 	nop.w
 800adf0:	14585500 	.word	0x14585500
 800adf4:	00000000 	.word	0x00000000
 800adf8:	28b0aa00 	.word	0x28b0aa00
 800adfc:	00000000 	.word	0x00000000
 800ae00:	00f42400 	.word	0x00f42400
 800ae04:	f4240000 	.word	0xf4240000
 800ae08:	01e84800 	.word	0x01e84800
 800ae0c:	03d09000 	.word	0x03d09000
 800ae10:	07a12000 	.word	0x07a12000
 800ae14:	0f424000 	.word	0x0f424000
 800ae18:	186a0000 	.word	0x186a0000
 800ae1c:	1e848000 	.word	0x1e848000
 800ae20:	3d090000 	.word	0x3d090000
 800ae24:	7a120000 	.word	0x7a120000
 800ae28:	000aaa00 	.word	0x000aaa00
 800ae2c:	000ccc00 	.word	0x000ccc00
 800ae30:	00155500 	.word	0x00155500
 800ae34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae38:	f04f 0400 	mov.w	r4, #0
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	6852      	ldr	r2, [r2, #4]
 800ae40:	0852      	lsrs	r2, r2, #1
 800ae42:	4611      	mov	r1, r2
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	185d      	adds	r5, r3, r1
 800ae4a:	eb44 0602 	adc.w	r6, r4, r2
 800ae4e:	4628      	mov	r0, r5
 800ae50:	4631      	mov	r1, r6
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f04f 0400 	mov.w	r4, #0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4623      	mov	r3, r4
 800ae5e:	f7f5 f997 	bl	8000190 <__aeabi_uldivmod>
 800ae62:	4603      	mov	r3, r0
 800ae64:	460c      	mov	r4, r1
 800ae66:	61fb      	str	r3, [r7, #28]
            break;
 800ae68:	e002      	b.n	800ae70 <UART_SetConfig+0x978>
          default:
            ret = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	76fb      	strb	r3, [r7, #27]
            break;
 800ae6e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae76:	d308      	bcc.n	800ae8a <UART_SetConfig+0x992>
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae7e:	d204      	bcs.n	800ae8a <UART_SetConfig+0x992>
        {
          huart->Instance->BRR = usartdiv;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	60da      	str	r2, [r3, #12]
 800ae88:	e35c      	b.n	800b544 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	76fb      	strb	r3, [r7, #27]
 800ae8e:	e359      	b.n	800b544 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae98:	f040 81a7 	bne.w	800b1ea <UART_SetConfig+0xcf2>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800ae9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aea0:	3b01      	subs	r3, #1
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	f200 8181 	bhi.w	800b1aa <UART_SetConfig+0xcb2>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <UART_SetConfig+0x9b8>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800af89 	.word	0x0800af89
 800aeb8:	0800b1ab 	.word	0x0800b1ab
 800aebc:	0800b031 	.word	0x0800b031
 800aec0:	0800b1ab 	.word	0x0800b1ab
 800aec4:	0800b1ab 	.word	0x0800b1ab
 800aec8:	0800b1ab 	.word	0x0800b1ab
 800aecc:	0800b0e9 	.word	0x0800b0e9
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed0:	f7fe fa40 	bl	8009354 <HAL_RCC_GetPCLK2Freq>
 800aed4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d044      	beq.n	800af68 <UART_SetConfig+0xa70>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d03e      	beq.n	800af64 <UART_SetConfig+0xa6c>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d038      	beq.n	800af60 <UART_SetConfig+0xa68>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d032      	beq.n	800af5c <UART_SetConfig+0xa64>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d02c      	beq.n	800af58 <UART_SetConfig+0xa60>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	2b05      	cmp	r3, #5
 800af04:	d026      	beq.n	800af54 <UART_SetConfig+0xa5c>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	2b06      	cmp	r3, #6
 800af0c:	d020      	beq.n	800af50 <UART_SetConfig+0xa58>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b07      	cmp	r3, #7
 800af14:	d01a      	beq.n	800af4c <UART_SetConfig+0xa54>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b08      	cmp	r3, #8
 800af1c:	d014      	beq.n	800af48 <UART_SetConfig+0xa50>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b09      	cmp	r3, #9
 800af24:	d00e      	beq.n	800af44 <UART_SetConfig+0xa4c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	2b0a      	cmp	r3, #10
 800af2c:	d008      	beq.n	800af40 <UART_SetConfig+0xa48>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	2b0b      	cmp	r3, #11
 800af34:	d102      	bne.n	800af3c <UART_SetConfig+0xa44>
 800af36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af3a:	e016      	b.n	800af6a <UART_SetConfig+0xa72>
 800af3c:	2301      	movs	r3, #1
 800af3e:	e014      	b.n	800af6a <UART_SetConfig+0xa72>
 800af40:	2380      	movs	r3, #128	; 0x80
 800af42:	e012      	b.n	800af6a <UART_SetConfig+0xa72>
 800af44:	2340      	movs	r3, #64	; 0x40
 800af46:	e010      	b.n	800af6a <UART_SetConfig+0xa72>
 800af48:	2320      	movs	r3, #32
 800af4a:	e00e      	b.n	800af6a <UART_SetConfig+0xa72>
 800af4c:	2310      	movs	r3, #16
 800af4e:	e00c      	b.n	800af6a <UART_SetConfig+0xa72>
 800af50:	230c      	movs	r3, #12
 800af52:	e00a      	b.n	800af6a <UART_SetConfig+0xa72>
 800af54:	230a      	movs	r3, #10
 800af56:	e008      	b.n	800af6a <UART_SetConfig+0xa72>
 800af58:	2308      	movs	r3, #8
 800af5a:	e006      	b.n	800af6a <UART_SetConfig+0xa72>
 800af5c:	2306      	movs	r3, #6
 800af5e:	e004      	b.n	800af6a <UART_SetConfig+0xa72>
 800af60:	2304      	movs	r3, #4
 800af62:	e002      	b.n	800af6a <UART_SetConfig+0xa72>
 800af64:	2302      	movs	r3, #2
 800af66:	e000      	b.n	800af6a <UART_SetConfig+0xa72>
 800af68:	2301      	movs	r3, #1
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af70:	005a      	lsls	r2, r3, #1
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	441a      	add	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	61fb      	str	r3, [r7, #28]
        break;
 800af86:	e113      	b.n	800b1b0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d043      	beq.n	800b018 <UART_SetConfig+0xb20>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	2b01      	cmp	r3, #1
 800af96:	d03d      	beq.n	800b014 <UART_SetConfig+0xb1c>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d037      	beq.n	800b010 <UART_SetConfig+0xb18>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d031      	beq.n	800b00c <UART_SetConfig+0xb14>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b04      	cmp	r3, #4
 800afae:	d02b      	beq.n	800b008 <UART_SetConfig+0xb10>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b05      	cmp	r3, #5
 800afb6:	d025      	beq.n	800b004 <UART_SetConfig+0xb0c>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b06      	cmp	r3, #6
 800afbe:	d01f      	beq.n	800b000 <UART_SetConfig+0xb08>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b07      	cmp	r3, #7
 800afc6:	d019      	beq.n	800affc <UART_SetConfig+0xb04>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d013      	beq.n	800aff8 <UART_SetConfig+0xb00>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b09      	cmp	r3, #9
 800afd6:	d00d      	beq.n	800aff4 <UART_SetConfig+0xafc>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b0a      	cmp	r3, #10
 800afde:	d007      	beq.n	800aff0 <UART_SetConfig+0xaf8>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b0b      	cmp	r3, #11
 800afe6:	d101      	bne.n	800afec <UART_SetConfig+0xaf4>
 800afe8:	4b8c      	ldr	r3, [pc, #560]	; (800b21c <UART_SetConfig+0xd24>)
 800afea:	e016      	b.n	800b01a <UART_SetConfig+0xb22>
 800afec:	4b8c      	ldr	r3, [pc, #560]	; (800b220 <UART_SetConfig+0xd28>)
 800afee:	e014      	b.n	800b01a <UART_SetConfig+0xb22>
 800aff0:	4b8c      	ldr	r3, [pc, #560]	; (800b224 <UART_SetConfig+0xd2c>)
 800aff2:	e012      	b.n	800b01a <UART_SetConfig+0xb22>
 800aff4:	4b8c      	ldr	r3, [pc, #560]	; (800b228 <UART_SetConfig+0xd30>)
 800aff6:	e010      	b.n	800b01a <UART_SetConfig+0xb22>
 800aff8:	4b8c      	ldr	r3, [pc, #560]	; (800b22c <UART_SetConfig+0xd34>)
 800affa:	e00e      	b.n	800b01a <UART_SetConfig+0xb22>
 800affc:	4b8c      	ldr	r3, [pc, #560]	; (800b230 <UART_SetConfig+0xd38>)
 800affe:	e00c      	b.n	800b01a <UART_SetConfig+0xb22>
 800b000:	4b8c      	ldr	r3, [pc, #560]	; (800b234 <UART_SetConfig+0xd3c>)
 800b002:	e00a      	b.n	800b01a <UART_SetConfig+0xb22>
 800b004:	4b8c      	ldr	r3, [pc, #560]	; (800b238 <UART_SetConfig+0xd40>)
 800b006:	e008      	b.n	800b01a <UART_SetConfig+0xb22>
 800b008:	4b8c      	ldr	r3, [pc, #560]	; (800b23c <UART_SetConfig+0xd44>)
 800b00a:	e006      	b.n	800b01a <UART_SetConfig+0xb22>
 800b00c:	4b8c      	ldr	r3, [pc, #560]	; (800b240 <UART_SetConfig+0xd48>)
 800b00e:	e004      	b.n	800b01a <UART_SetConfig+0xb22>
 800b010:	4b8c      	ldr	r3, [pc, #560]	; (800b244 <UART_SetConfig+0xd4c>)
 800b012:	e002      	b.n	800b01a <UART_SetConfig+0xb22>
 800b014:	4b8c      	ldr	r3, [pc, #560]	; (800b248 <UART_SetConfig+0xd50>)
 800b016:	e000      	b.n	800b01a <UART_SetConfig+0xb22>
 800b018:	4b81      	ldr	r3, [pc, #516]	; (800b220 <UART_SetConfig+0xd28>)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6852      	ldr	r2, [r2, #4]
 800b01e:	0852      	lsrs	r2, r2, #1
 800b020:	441a      	add	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	61fb      	str	r3, [r7, #28]
        break;
 800b02e:	e0bf      	b.n	800b1b0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b030:	f7fe f8fc 	bl	800922c <HAL_RCC_GetSysClockFreq>
 800b034:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d044      	beq.n	800b0c8 <UART_SetConfig+0xbd0>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	2b01      	cmp	r3, #1
 800b044:	d03e      	beq.n	800b0c4 <UART_SetConfig+0xbcc>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d038      	beq.n	800b0c0 <UART_SetConfig+0xbc8>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	2b03      	cmp	r3, #3
 800b054:	d032      	beq.n	800b0bc <UART_SetConfig+0xbc4>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d02c      	beq.n	800b0b8 <UART_SetConfig+0xbc0>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	2b05      	cmp	r3, #5
 800b064:	d026      	beq.n	800b0b4 <UART_SetConfig+0xbbc>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b06      	cmp	r3, #6
 800b06c:	d020      	beq.n	800b0b0 <UART_SetConfig+0xbb8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	2b07      	cmp	r3, #7
 800b074:	d01a      	beq.n	800b0ac <UART_SetConfig+0xbb4>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	d014      	beq.n	800b0a8 <UART_SetConfig+0xbb0>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	2b09      	cmp	r3, #9
 800b084:	d00e      	beq.n	800b0a4 <UART_SetConfig+0xbac>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b0a      	cmp	r3, #10
 800b08c:	d008      	beq.n	800b0a0 <UART_SetConfig+0xba8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b0b      	cmp	r3, #11
 800b094:	d102      	bne.n	800b09c <UART_SetConfig+0xba4>
 800b096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b09a:	e016      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e014      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0a0:	2380      	movs	r3, #128	; 0x80
 800b0a2:	e012      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0a4:	2340      	movs	r3, #64	; 0x40
 800b0a6:	e010      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	e00e      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0ac:	2310      	movs	r3, #16
 800b0ae:	e00c      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	e00a      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0b4:	230a      	movs	r3, #10
 800b0b6:	e008      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	e006      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0bc:	2306      	movs	r3, #6
 800b0be:	e004      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	e002      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e000      	b.n	800b0ca <UART_SetConfig+0xbd2>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d0:	005a      	lsls	r2, r3, #1
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	085b      	lsrs	r3, r3, #1
 800b0d8:	441a      	add	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	61fb      	str	r3, [r7, #28]
        break;
 800b0e6:	e063      	b.n	800b1b0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d04f      	beq.n	800b190 <UART_SetConfig+0xc98>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d048      	beq.n	800b18a <UART_SetConfig+0xc92>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d041      	beq.n	800b184 <UART_SetConfig+0xc8c>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b03      	cmp	r3, #3
 800b106:	d03a      	beq.n	800b17e <UART_SetConfig+0xc86>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	d033      	beq.n	800b178 <UART_SetConfig+0xc80>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b05      	cmp	r3, #5
 800b116:	d02c      	beq.n	800b172 <UART_SetConfig+0xc7a>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b06      	cmp	r3, #6
 800b11e:	d025      	beq.n	800b16c <UART_SetConfig+0xc74>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b07      	cmp	r3, #7
 800b126:	d01e      	beq.n	800b166 <UART_SetConfig+0xc6e>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b08      	cmp	r3, #8
 800b12e:	d017      	beq.n	800b160 <UART_SetConfig+0xc68>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b09      	cmp	r3, #9
 800b136:	d010      	beq.n	800b15a <UART_SetConfig+0xc62>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b0a      	cmp	r3, #10
 800b13e:	d009      	beq.n	800b154 <UART_SetConfig+0xc5c>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	2b0b      	cmp	r3, #11
 800b146:	d102      	bne.n	800b14e <UART_SetConfig+0xc56>
 800b148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b14c:	e022      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b14e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b152:	e01f      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	e01c      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b15e:	e019      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b164:	e016      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b16a:	e013      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b16c:	f241 5354 	movw	r3, #5460	; 0x1554
 800b170:	e010      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b172:	f641 1398 	movw	r3, #6552	; 0x1998
 800b176:	e00d      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b17c:	e00a      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b17e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b182:	e007      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b188:	e004      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b18a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b18e:	e001      	b.n	800b194 <UART_SetConfig+0xc9c>
 800b190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6852      	ldr	r2, [r2, #4]
 800b198:	0852      	lsrs	r2, r2, #1
 800b19a:	441a      	add	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	61fb      	str	r3, [r7, #28]
        break;
 800b1a8:	e002      	b.n	800b1b0 <UART_SetConfig+0xcb8>
      default:
        ret = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	76fb      	strb	r3, [r7, #27]
        break;
 800b1ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	2b0f      	cmp	r3, #15
 800b1b4:	d916      	bls.n	800b1e4 <UART_SetConfig+0xcec>
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1bc:	d212      	bcs.n	800b1e4 <UART_SetConfig+0xcec>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f023 030f 	bic.w	r3, r3, #15
 800b1c6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	085b      	lsrs	r3, r3, #1
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	89fb      	ldrh	r3, [r7, #14]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	89fa      	ldrh	r2, [r7, #14]
 800b1e0:	60da      	str	r2, [r3, #12]
 800b1e2:	e1af      	b.n	800b544 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	76fb      	strb	r3, [r7, #27]
 800b1e8:	e1ac      	b.n	800b544 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 800b1ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	2b07      	cmp	r3, #7
 800b1f2:	f200 8196 	bhi.w	800b522 <UART_SetConfig+0x102a>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0xd04>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b24d 	.word	0x0800b24d
 800b200:	0800b303 	.word	0x0800b303
 800b204:	0800b523 	.word	0x0800b523
 800b208:	0800b3ad 	.word	0x0800b3ad
 800b20c:	0800b523 	.word	0x0800b523
 800b210:	0800b523 	.word	0x0800b523
 800b214:	0800b523 	.word	0x0800b523
 800b218:	0800b463 	.word	0x0800b463
 800b21c:	0001e848 	.word	0x0001e848
 800b220:	01e84800 	.word	0x01e84800
 800b224:	0003d090 	.word	0x0003d090
 800b228:	0007a120 	.word	0x0007a120
 800b22c:	000f4240 	.word	0x000f4240
 800b230:	001e8480 	.word	0x001e8480
 800b234:	0028b0aa 	.word	0x0028b0aa
 800b238:	0030d400 	.word	0x0030d400
 800b23c:	003d0900 	.word	0x003d0900
 800b240:	00516154 	.word	0x00516154
 800b244:	007a1200 	.word	0x007a1200
 800b248:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b24c:	f7fe f882 	bl	8009354 <HAL_RCC_GetPCLK2Freq>
 800b250:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d044      	beq.n	800b2e4 <UART_SetConfig+0xdec>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d03e      	beq.n	800b2e0 <UART_SetConfig+0xde8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b02      	cmp	r3, #2
 800b268:	d038      	beq.n	800b2dc <UART_SetConfig+0xde4>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d032      	beq.n	800b2d8 <UART_SetConfig+0xde0>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	2b04      	cmp	r3, #4
 800b278:	d02c      	beq.n	800b2d4 <UART_SetConfig+0xddc>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d026      	beq.n	800b2d0 <UART_SetConfig+0xdd8>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b06      	cmp	r3, #6
 800b288:	d020      	beq.n	800b2cc <UART_SetConfig+0xdd4>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d01a      	beq.n	800b2c8 <UART_SetConfig+0xdd0>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	2b08      	cmp	r3, #8
 800b298:	d014      	beq.n	800b2c4 <UART_SetConfig+0xdcc>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b09      	cmp	r3, #9
 800b2a0:	d00e      	beq.n	800b2c0 <UART_SetConfig+0xdc8>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2b0a      	cmp	r3, #10
 800b2a8:	d008      	beq.n	800b2bc <UART_SetConfig+0xdc4>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	2b0b      	cmp	r3, #11
 800b2b0:	d102      	bne.n	800b2b8 <UART_SetConfig+0xdc0>
 800b2b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b6:	e016      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e014      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2bc:	2380      	movs	r3, #128	; 0x80
 800b2be:	e012      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2c0:	2340      	movs	r3, #64	; 0x40
 800b2c2:	e010      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	e00e      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	e00c      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	e00a      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2d0:	230a      	movs	r3, #10
 800b2d2:	e008      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	e006      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2d8:	2306      	movs	r3, #6
 800b2da:	e004      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	e002      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e000      	b.n	800b2e6 <UART_SetConfig+0xdee>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	441a      	add	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	61fb      	str	r3, [r7, #28]
        break;
 800b300:	e112      	b.n	800b528 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	2b00      	cmp	r3, #0
 800b308:	d044      	beq.n	800b394 <UART_SetConfig+0xe9c>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d03e      	beq.n	800b390 <UART_SetConfig+0xe98>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b02      	cmp	r3, #2
 800b318:	d038      	beq.n	800b38c <UART_SetConfig+0xe94>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d032      	beq.n	800b388 <UART_SetConfig+0xe90>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	2b04      	cmp	r3, #4
 800b328:	d02c      	beq.n	800b384 <UART_SetConfig+0xe8c>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b05      	cmp	r3, #5
 800b330:	d026      	beq.n	800b380 <UART_SetConfig+0xe88>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	2b06      	cmp	r3, #6
 800b338:	d020      	beq.n	800b37c <UART_SetConfig+0xe84>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	2b07      	cmp	r3, #7
 800b340:	d01a      	beq.n	800b378 <UART_SetConfig+0xe80>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b08      	cmp	r3, #8
 800b348:	d014      	beq.n	800b374 <UART_SetConfig+0xe7c>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2b09      	cmp	r3, #9
 800b350:	d00e      	beq.n	800b370 <UART_SetConfig+0xe78>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b0a      	cmp	r3, #10
 800b358:	d008      	beq.n	800b36c <UART_SetConfig+0xe74>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	2b0b      	cmp	r3, #11
 800b360:	d102      	bne.n	800b368 <UART_SetConfig+0xe70>
 800b362:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b366:	e016      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b368:	4b80      	ldr	r3, [pc, #512]	; (800b56c <UART_SetConfig+0x1074>)
 800b36a:	e014      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b36c:	4b80      	ldr	r3, [pc, #512]	; (800b570 <UART_SetConfig+0x1078>)
 800b36e:	e012      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b370:	4b80      	ldr	r3, [pc, #512]	; (800b574 <UART_SetConfig+0x107c>)
 800b372:	e010      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b374:	4b80      	ldr	r3, [pc, #512]	; (800b578 <UART_SetConfig+0x1080>)
 800b376:	e00e      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b378:	4b80      	ldr	r3, [pc, #512]	; (800b57c <UART_SetConfig+0x1084>)
 800b37a:	e00c      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b37c:	4b80      	ldr	r3, [pc, #512]	; (800b580 <UART_SetConfig+0x1088>)
 800b37e:	e00a      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b380:	4b80      	ldr	r3, [pc, #512]	; (800b584 <UART_SetConfig+0x108c>)
 800b382:	e008      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b384:	4b80      	ldr	r3, [pc, #512]	; (800b588 <UART_SetConfig+0x1090>)
 800b386:	e006      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b388:	4b80      	ldr	r3, [pc, #512]	; (800b58c <UART_SetConfig+0x1094>)
 800b38a:	e004      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b38c:	4b80      	ldr	r3, [pc, #512]	; (800b590 <UART_SetConfig+0x1098>)
 800b38e:	e002      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b390:	4b80      	ldr	r3, [pc, #512]	; (800b594 <UART_SetConfig+0x109c>)
 800b392:	e000      	b.n	800b396 <UART_SetConfig+0xe9e>
 800b394:	4b75      	ldr	r3, [pc, #468]	; (800b56c <UART_SetConfig+0x1074>)
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6852      	ldr	r2, [r2, #4]
 800b39a:	0852      	lsrs	r2, r2, #1
 800b39c:	441a      	add	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	61fb      	str	r3, [r7, #28]
        break;
 800b3aa:	e0bd      	b.n	800b528 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ac:	f7fd ff3e 	bl	800922c <HAL_RCC_GetSysClockFreq>
 800b3b0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d044      	beq.n	800b444 <UART_SetConfig+0xf4c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d03e      	beq.n	800b440 <UART_SetConfig+0xf48>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d038      	beq.n	800b43c <UART_SetConfig+0xf44>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d032      	beq.n	800b438 <UART_SetConfig+0xf40>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d02c      	beq.n	800b434 <UART_SetConfig+0xf3c>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d026      	beq.n	800b430 <UART_SetConfig+0xf38>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	2b06      	cmp	r3, #6
 800b3e8:	d020      	beq.n	800b42c <UART_SetConfig+0xf34>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	2b07      	cmp	r3, #7
 800b3f0:	d01a      	beq.n	800b428 <UART_SetConfig+0xf30>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	d014      	beq.n	800b424 <UART_SetConfig+0xf2c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fe:	2b09      	cmp	r3, #9
 800b400:	d00e      	beq.n	800b420 <UART_SetConfig+0xf28>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b0a      	cmp	r3, #10
 800b408:	d008      	beq.n	800b41c <UART_SetConfig+0xf24>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2b0b      	cmp	r3, #11
 800b410:	d102      	bne.n	800b418 <UART_SetConfig+0xf20>
 800b412:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b416:	e016      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b418:	2301      	movs	r3, #1
 800b41a:	e014      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b41c:	2380      	movs	r3, #128	; 0x80
 800b41e:	e012      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	e010      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b424:	2320      	movs	r3, #32
 800b426:	e00e      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b428:	2310      	movs	r3, #16
 800b42a:	e00c      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b42c:	230c      	movs	r3, #12
 800b42e:	e00a      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b430:	230a      	movs	r3, #10
 800b432:	e008      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b434:	2308      	movs	r3, #8
 800b436:	e006      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b438:	2306      	movs	r3, #6
 800b43a:	e004      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b43c:	2304      	movs	r3, #4
 800b43e:	e002      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b440:	2302      	movs	r3, #2
 800b442:	e000      	b.n	800b446 <UART_SetConfig+0xf4e>
 800b444:	2301      	movs	r3, #1
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	fbb2 f2f3 	udiv	r2, r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	441a      	add	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	fbb2 f3f3 	udiv	r3, r2, r3
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	61fb      	str	r3, [r7, #28]
        break;
 800b460:	e062      	b.n	800b528 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	d04e      	beq.n	800b508 <UART_SetConfig+0x1010>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d047      	beq.n	800b502 <UART_SetConfig+0x100a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b02      	cmp	r3, #2
 800b478:	d040      	beq.n	800b4fc <UART_SetConfig+0x1004>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d039      	beq.n	800b4f6 <UART_SetConfig+0xffe>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b04      	cmp	r3, #4
 800b488:	d032      	beq.n	800b4f0 <UART_SetConfig+0xff8>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b05      	cmp	r3, #5
 800b490:	d02b      	beq.n	800b4ea <UART_SetConfig+0xff2>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b06      	cmp	r3, #6
 800b498:	d024      	beq.n	800b4e4 <UART_SetConfig+0xfec>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b07      	cmp	r3, #7
 800b4a0:	d01d      	beq.n	800b4de <UART_SetConfig+0xfe6>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	d016      	beq.n	800b4d8 <UART_SetConfig+0xfe0>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d00f      	beq.n	800b4d2 <UART_SetConfig+0xfda>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b0a      	cmp	r3, #10
 800b4b8:	d008      	beq.n	800b4cc <UART_SetConfig+0xfd4>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b0b      	cmp	r3, #11
 800b4c0:	d101      	bne.n	800b4c6 <UART_SetConfig+0xfce>
 800b4c2:	2380      	movs	r3, #128	; 0x80
 800b4c4:	e022      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ca:	e01f      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4d0:	e01c      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d6:	e019      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4dc:	e016      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4e2:	e013      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4e4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b4e8:	e010      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4ea:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b4ee:	e00d      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4f4:	e00a      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4f6:	f241 5355 	movw	r3, #5461	; 0x1555
 800b4fa:	e007      	b.n	800b50c <UART_SetConfig+0x1014>
 800b4fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b500:	e004      	b.n	800b50c <UART_SetConfig+0x1014>
 800b502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b506:	e001      	b.n	800b50c <UART_SetConfig+0x1014>
 800b508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	6852      	ldr	r2, [r2, #4]
 800b510:	0852      	lsrs	r2, r2, #1
 800b512:	441a      	add	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	61fb      	str	r3, [r7, #28]
        break;
 800b520:	e002      	b.n	800b528 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	76fb      	strb	r3, [r7, #27]
        break;
 800b526:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b0f      	cmp	r3, #15
 800b52c:	d908      	bls.n	800b540 <UART_SetConfig+0x1048>
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b534:	d204      	bcs.n	800b540 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	e001      	b.n	800b544 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b560:	7efb      	ldrb	r3, [r7, #27]
}
 800b562:	4618      	mov	r0, r3
 800b564:	372c      	adds	r7, #44	; 0x2c
 800b566:	46bd      	mov	sp, r7
 800b568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b56c:	00f42400 	.word	0x00f42400
 800b570:	0001e848 	.word	0x0001e848
 800b574:	0003d090 	.word	0x0003d090
 800b578:	0007a120 	.word	0x0007a120
 800b57c:	000f4240 	.word	0x000f4240
 800b580:	00145855 	.word	0x00145855
 800b584:	00186a00 	.word	0x00186a00
 800b588:	001e8480 	.word	0x001e8480
 800b58c:	0028b0aa 	.word	0x0028b0aa
 800b590:	003d0900 	.word	0x003d0900
 800b594:	007a1200 	.word	0x007a1200

0800b598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6812      	ldr	r2, [r2, #0]
 800b5b4:	6852      	ldr	r2, [r2, #4]
 800b5b6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6812      	ldr	r2, [r2, #0]
 800b5d6:	6852      	ldr	r2, [r2, #4]
 800b5d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	6852      	ldr	r2, [r2, #4]
 800b5fa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b602:	430a      	orrs	r2, r1
 800b604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	6812      	ldr	r2, [r2, #0]
 800b61a:	6852      	ldr	r2, [r2, #4]
 800b61c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b624:	430a      	orrs	r2, r1
 800b626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6812      	ldr	r2, [r2, #0]
 800b63c:	6892      	ldr	r2, [r2, #8]
 800b63e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b646:	430a      	orrs	r2, r1
 800b648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	6812      	ldr	r2, [r2, #0]
 800b65e:	6892      	ldr	r2, [r2, #8]
 800b660:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b668:	430a      	orrs	r2, r1
 800b66a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01a      	beq.n	800b6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	6812      	ldr	r2, [r2, #0]
 800b680:	6852      	ldr	r2, [r2, #4]
 800b682:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b696:	d10a      	bne.n	800b6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	6812      	ldr	r2, [r2, #0]
 800b6a0:	6852      	ldr	r2, [r2, #4]
 800b6a2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6812      	ldr	r2, [r2, #0]
 800b6c2:	6852      	ldr	r2, [r2, #4]
 800b6c4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	605a      	str	r2, [r3, #4]
  }
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b6ec:	f7fb fae2 	bl	8006cb4 <HAL_GetTick>
 800b6f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0308 	and.w	r3, r3, #8
 800b6fc:	2b08      	cmp	r3, #8
 800b6fe:	d10e      	bne.n	800b71e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f82c 	bl	800b76c <UART_WaitOnFlagUntilTimeout>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e022      	b.n	800b764 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d10e      	bne.n	800b74a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b72c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f816 	bl	800b76c <UART_WaitOnFlagUntilTimeout>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e00c      	b.n	800b764 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b77c:	e062      	b.n	800b844 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d05e      	beq.n	800b844 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b786:	f7fb fa95 	bl	8006cb4 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	429a      	cmp	r2, r3
 800b794:	d802      	bhi.n	800b79c <UART_WaitOnFlagUntilTimeout+0x30>
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d11d      	bne.n	800b7d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	6812      	ldr	r2, [r2, #0]
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	6812      	ldr	r2, [r2, #0]
 800b7b4:	6892      	ldr	r2, [r2, #8]
 800b7b6:	f022 0201 	bic.w	r2, r2, #1
 800b7ba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e045      	b.n	800b864 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d02e      	beq.n	800b844 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f4:	d126      	bne.n	800b844 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7fe:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b80e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	6812      	ldr	r2, [r2, #0]
 800b818:	6892      	ldr	r2, [r2, #8]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2220      	movs	r2, #32
 800b824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2220      	movs	r2, #32
 800b82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e00f      	b.n	800b864 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	69da      	ldr	r2, [r3, #28]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	401a      	ands	r2, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	429a      	cmp	r2, r3
 800b852:	bf0c      	ite	eq
 800b854:	2301      	moveq	r3, #1
 800b856:	2300      	movne	r3, #0
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d08d      	beq.n	800b77e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	6812      	ldr	r2, [r2, #0]
 800b87c:	6812      	ldr	r2, [r2, #0]
 800b87e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b892:	f023 0301 	bic.w	r3, r3, #1
 800b896:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2220      	movs	r2, #32
 800b89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7fe fe05 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8d6:	bf00      	nop
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	6812      	ldr	r2, [r2, #0]
 800b8f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7fe fde1 	bl	800a4cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b94e:	b480      	push	{r7}
 800b950:	b085      	sub	sp, #20
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <HAL_UARTEx_DisableFifoMode+0x16>
 800b960:	2302      	movs	r3, #2
 800b962:	e027      	b.n	800b9b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2224      	movs	r2, #36	; 0x24
 800b970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	6812      	ldr	r2, [r2, #0]
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	f022 0201 	bic.w	r2, r2, #1
 800b98a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b992:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e02d      	b.n	800ba34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2224      	movs	r2, #36	; 0x24
 800b9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	f022 0201 	bic.w	r2, r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	6812      	ldr	r2, [r2, #0]
 800ba08:	6892      	ldr	r2, [r2, #8]
 800ba0a:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f84f 	bl	800bab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e02d      	b.n	800bab0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2224      	movs	r2, #36	; 0x24
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	6812      	ldr	r2, [r2, #0]
 800ba76:	f022 0201 	bic.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	6892      	ldr	r2, [r2, #8]
 800ba86:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f811 	bl	800bab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bab8:	b480      	push	{r7}
 800baba:	b089      	sub	sp, #36	; 0x24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bac0:	4a2f      	ldr	r2, [pc, #188]	; (800bb80 <UARTEx_SetNbDataToProcess+0xc8>)
 800bac2:	f107 0314 	add.w	r3, r7, #20
 800bac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bace:	4a2d      	ldr	r2, [pc, #180]	; (800bb84 <UARTEx_SetNbDataToProcess+0xcc>)
 800bad0:	f107 030c 	add.w	r3, r7, #12
 800bad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bad8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800baf4:	e03d      	b.n	800bb72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baf6:	2308      	movs	r3, #8
 800baf8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bafa:	2308      	movs	r3, #8
 800bafc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	0e5b      	lsrs	r3, r3, #25
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	0f5b      	lsrs	r3, r3, #29
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bb1e:	7fbb      	ldrb	r3, [r7, #30]
 800bb20:	7f3a      	ldrb	r2, [r7, #28]
 800bb22:	f107 0120 	add.w	r1, r7, #32
 800bb26:	440a      	add	r2, r1
 800bb28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bb2c:	fb02 f303 	mul.w	r3, r2, r3
 800bb30:	7f3a      	ldrb	r2, [r7, #28]
 800bb32:	f107 0120 	add.w	r1, r7, #32
 800bb36:	440a      	add	r2, r1
 800bb38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bb3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	7f7a      	ldrb	r2, [r7, #29]
 800bb4c:	f107 0120 	add.w	r1, r7, #32
 800bb50:	440a      	add	r2, r1
 800bb52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bb56:	fb02 f303 	mul.w	r3, r2, r3
 800bb5a:	7f7a      	ldrb	r2, [r7, #29]
 800bb5c:	f107 0120 	add.w	r1, r7, #32
 800bb60:	440a      	add	r2, r1
 800bb62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bb66:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb72:	bf00      	nop
 800bb74:	3724      	adds	r7, #36	; 0x24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	0800efc4 	.word	0x0800efc4
 800bb84:	0800efcc 	.word	0x0800efcc

0800bb88 <MX_MEMS_Init>:
#include "app_x-cube-mems1.h"
#include "main.h"
#include <stdio.h>

void MX_MEMS_Init(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
	ENV_sensor_Init();
 800bb8c:	f7f4 fc88 	bl	80004a0 <ENV_sensor_Init>
	Acc_sensor_init();
 800bb90:	f7f4 fcac 	bl	80004ec <Acc_sensor_init>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800bb9c:	bf00      	nop
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b088      	sub	sp, #32
 800bbaa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bbb0:	f107 0308 	add.w	r3, r7, #8
 800bbb4:	2218      	movs	r2, #24
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 ff98 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800bbbe:	233f      	movs	r3, #63	; 0x3f
 800bbc0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800bbc2:	2381      	movs	r3, #129	; 0x81
 800bbc4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bbc6:	1dfb      	adds	r3, r7, #7
 800bbc8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 fb7b 	bl	800d2d0 <hci_send_req>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	da01      	bge.n	800bbe4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bbe0:	23ff      	movs	r3, #255	; 0xff
 800bbe2:	e005      	b.n	800bbf0 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	e000      	b.n	800bbf0 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3720      	adds	r7, #32
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800bbf8:	b5b0      	push	{r4, r5, r7, lr}
 800bbfa:	b0ce      	sub	sp, #312	; 0x138
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4605      	mov	r5, r0
 800bc00:	460c      	mov	r4, r1
 800bc02:	4610      	mov	r0, r2
 800bc04:	4619      	mov	r1, r3
 800bc06:	1dfb      	adds	r3, r7, #7
 800bc08:	462a      	mov	r2, r5
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	1d3b      	adds	r3, r7, #4
 800bc0e:	4622      	mov	r2, r4
 800bc10:	801a      	strh	r2, [r3, #0]
 800bc12:	1cbb      	adds	r3, r7, #2
 800bc14:	4602      	mov	r2, r0
 800bc16:	801a      	strh	r2, [r3, #0]
 800bc18:	1dbb      	adds	r3, r7, #6
 800bc1a:	460a      	mov	r2, r1
 800bc1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800bc1e:	f107 0310 	add.w	r3, r7, #16
 800bc22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800bc26:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	f107 0210 	add.w	r2, r7, #16
 800bc30:	4413      	add	r3, r2
 800bc32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800bc36:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bc3a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800bc3e:	4413      	add	r3, r2
 800bc40:	3309      	adds	r3, #9
 800bc42:	f107 0210 	add.w	r2, r7, #16
 800bc46:	4413      	add	r3, r2
 800bc48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bc4c:	f107 030f 	add.w	r3, r7, #15
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800bc5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bc5e:	1dfa      	adds	r2, r7, #7
 800bc60:	7812      	ldrb	r2, [r2, #0]
 800bc62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bc64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800bc6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bc72:	1d3a      	adds	r2, r7, #4
 800bc74:	8812      	ldrh	r2, [r2, #0]
 800bc76:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800bc7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc7e:	3302      	adds	r3, #2
 800bc80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800bc84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bc88:	1cba      	adds	r2, r7, #2
 800bc8a:	8812      	ldrh	r2, [r2, #0]
 800bc8c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800bc90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc94:	3302      	adds	r3, #2
 800bc96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800bc9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bc9e:	1dba      	adds	r2, r7, #6
 800bca0:	7812      	ldrb	r2, [r2, #0]
 800bca2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bca8:	3301      	adds	r3, #1
 800bcaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800bcae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bcb2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800bcb6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800bcb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800bcc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bcc6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bcca:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800bccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800bcd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bcda:	3308      	adds	r3, #8
 800bcdc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bce0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fef2 	bl	800cace <Osal_MemCpy>
    index_input += Local_Name_Length;
 800bcea:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bcee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800bcf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bcfc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800bd00:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800bd02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd06:	3301      	adds	r3, #1
 800bd08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800bd0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd10:	3301      	adds	r3, #1
 800bd12:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800bd16:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fed7 	bl	800cace <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800bd20:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800bd24:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bd28:	4413      	add	r3, r2
 800bd2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800bd2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd32:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800bd36:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800bd38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800bd42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd46:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800bd4a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800bd4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd50:	3302      	adds	r3, #2
 800bd52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bd56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bd5a:	2218      	movs	r2, #24
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 fec5 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800bd64:	233f      	movs	r3, #63	; 0x3f
 800bd66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800bd6a:	2383      	movs	r3, #131	; 0x83
 800bd6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bd70:	f107 0310 	add.w	r3, r7, #16
 800bd74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bd78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bd80:	f107 030f 	add.w	r3, r7, #15
 800bd84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bd8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 fa9b 	bl	800d2d0 <hci_send_req>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da01      	bge.n	800bda4 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800bda0:	23ff      	movs	r3, #255	; 0xff
 800bda2:	e009      	b.n	800bdb8 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800bda4:	f107 030f 	add.w	r3, r7, #15
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800bdae:	f107 030f 	add.w	r3, r7, #15
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	e000      	b.n	800bdb8 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bdb0      	pop	{r4, r5, r7, pc}

0800bdc2 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b0cc      	sub	sp, #304	; 0x130
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	4602      	mov	r2, r0
 800bdca:	1dfb      	adds	r3, r7, #7
 800bdcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800bdce:	f107 0310 	add.w	r3, r7, #16
 800bdd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bdd6:	f107 030f 	add.w	r3, r7, #15
 800bdda:	2200      	movs	r2, #0
 800bddc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800bde4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bde8:	1dfa      	adds	r2, r7, #7
 800bdea:	7812      	ldrb	r2, [r2, #0]
 800bdec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bdee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bdf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bdfc:	2218      	movs	r2, #24
 800bdfe:	2100      	movs	r1, #0
 800be00:	4618      	mov	r0, r3
 800be02:	f000 fe74 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800be06:	233f      	movs	r3, #63	; 0x3f
 800be08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800be0c:	2385      	movs	r3, #133	; 0x85
 800be0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800be12:	f107 0310 	add.w	r3, r7, #16
 800be16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800be1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800be22:	f107 030f 	add.w	r3, r7, #15
 800be26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800be2a:	2301      	movs	r3, #1
 800be2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800be30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be34:	2100      	movs	r1, #0
 800be36:	4618      	mov	r0, r3
 800be38:	f001 fa4a 	bl	800d2d0 <hci_send_req>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da01      	bge.n	800be46 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800be42:	23ff      	movs	r3, #255	; 0xff
 800be44:	e009      	b.n	800be5a <aci_gap_set_io_capability+0x98>
  if (status) 
 800be46:	f107 030f 	add.w	r3, r7, #15
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800be50:	f107 030f 	add.w	r3, r7, #15
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	e000      	b.n	800be5a <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800be64:	b5b0      	push	{r4, r5, r7, lr}
 800be66:	b0cc      	sub	sp, #304	; 0x130
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4605      	mov	r5, r0
 800be6c:	460c      	mov	r4, r1
 800be6e:	4610      	mov	r0, r2
 800be70:	4619      	mov	r1, r3
 800be72:	1dfb      	adds	r3, r7, #7
 800be74:	462a      	mov	r2, r5
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	1dbb      	adds	r3, r7, #6
 800be7a:	4622      	mov	r2, r4
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	1d7b      	adds	r3, r7, #5
 800be80:	4602      	mov	r2, r0
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	460a      	mov	r2, r1
 800be88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800be8a:	f107 0310 	add.w	r3, r7, #16
 800be8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800be92:	f107 030f 	add.w	r3, r7, #15
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800bea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bea4:	1dfa      	adds	r2, r7, #7
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800beaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beae:	3301      	adds	r3, #1
 800beb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800beb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beb8:	1dba      	adds	r2, r7, #6
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bec2:	3301      	adds	r3, #1
 800bec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800bec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800becc:	1d7a      	adds	r2, r7, #5
 800bece:	7812      	ldrb	r2, [r2, #0]
 800bed0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bed6:	3301      	adds	r3, #1
 800bed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800bedc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bee0:	1d3a      	adds	r2, r7, #4
 800bee2:	7812      	ldrb	r2, [r2, #0]
 800bee4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800bee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beea:	3301      	adds	r3, #1
 800beec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800bef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bef4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800bef8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800befa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800befe:	3301      	adds	r3, #1
 800bf00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800bf04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf08:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800bf0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bf0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf12:	3301      	adds	r3, #1
 800bf14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800bf18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800bf20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800bf22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf26:	3301      	adds	r3, #1
 800bf28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800bf2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf30:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bf34:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800bf38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800bf42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf46:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800bf4a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800bf4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf50:	3301      	adds	r3, #1
 800bf52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bf56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf5a:	2218      	movs	r2, #24
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fdc5 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf64:	233f      	movs	r3, #63	; 0x3f
 800bf66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800bf6a:	2386      	movs	r3, #134	; 0x86
 800bf6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bf70:	f107 0310 	add.w	r3, r7, #16
 800bf74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bf78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bf80:	f107 030f 	add.w	r3, r7, #15
 800bf84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bf8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf92:	2100      	movs	r1, #0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 f99b 	bl	800d2d0 <hci_send_req>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da01      	bge.n	800bfa4 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800bfa0:	23ff      	movs	r3, #255	; 0xff
 800bfa2:	e009      	b.n	800bfb8 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800bfa4:	f107 030f 	add.w	r3, r7, #15
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800bfae:	f107 030f 	add.w	r3, r7, #15
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	e000      	b.n	800bfb8 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bdb0      	pop	{r4, r5, r7, pc}

0800bfc2 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b0cd      	sub	sp, #308	; 0x134
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	4604      	mov	r4, r0
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	463a      	mov	r2, r7
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	1dfb      	adds	r3, r7, #7
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	1dbb      	adds	r3, r7, #6
 800bfda:	4602      	mov	r2, r0
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	1d7b      	adds	r3, r7, #5
 800bfe0:	460a      	mov	r2, r1
 800bfe2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800bfe4:	f107 0310 	add.w	r3, r7, #16
 800bfe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	2207      	movs	r2, #7
 800bff2:	2100      	movs	r1, #0
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 fd7a 	bl	800caee <Osal_MemSet>
  int index_input = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800c000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c004:	1dfa      	adds	r2, r7, #7
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c00a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c00e:	3301      	adds	r3, #1
 800c010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800c014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c018:	1dba      	adds	r2, r7, #6
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c01e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c022:	3301      	adds	r3, #1
 800c024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800c028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c02c:	1d7a      	adds	r2, r7, #5
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c036:	3301      	adds	r3, #1
 800c038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c03c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c040:	2218      	movs	r2, #24
 800c042:	2100      	movs	r1, #0
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fd52 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c04a:	233f      	movs	r3, #63	; 0x3f
 800c04c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c050:	238a      	movs	r3, #138	; 0x8a
 800c052:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c056:	f107 0310 	add.w	r3, r7, #16
 800c05a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c05e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c062:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c066:	f107 0308 	add.w	r3, r7, #8
 800c06a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c06e:	2307      	movs	r3, #7
 800c070:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c078:	2100      	movs	r1, #0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 f928 	bl	800d2d0 <hci_send_req>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	da01      	bge.n	800c08a <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800c086:	23ff      	movs	r3, #255	; 0xff
 800c088:	e021      	b.n	800c0ce <aci_gap_init+0x10c>
  if (resp.Status) 
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <aci_gap_init+0xda>
  {
    return resp.Status;
 800c094:	f107 0308 	add.w	r3, r7, #8
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	e018      	b.n	800c0ce <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c09c:	f107 0308 	add.w	r3, r7, #8
 800c0a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c0ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800c0bc:	f107 0308 	add.w	r3, r7, #8
 800c0c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c0ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd90      	pop	{r4, r7, pc}

0800c0d8 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b0cc      	sub	sp, #304	; 0x130
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4602      	mov	r2, r0
 800c0e0:	463b      	mov	r3, r7
 800c0e2:	6019      	str	r1, [r3, #0]
 800c0e4:	1dfb      	adds	r3, r7, #7
 800c0e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c0e8:	f107 0310 	add.w	r3, r7, #16
 800c0ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c0f0:	f107 030f 	add.w	r3, r7, #15
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800c0fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c102:	1dfa      	adds	r2, r7, #7
 800c104:	7812      	ldrb	r2, [r2, #0]
 800c106:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c10c:	3301      	adds	r3, #1
 800c10e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800c112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c116:	1c58      	adds	r0, r3, #1
 800c118:	1dfb      	adds	r3, r7, #7
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	463b      	mov	r3, r7
 800c11e:	6819      	ldr	r1, [r3, #0]
 800c120:	f000 fcd5 	bl	800cace <Osal_MemCpy>
  index_input += AdvDataLen;
 800c124:	1dfb      	adds	r3, r7, #7
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c12c:	4413      	add	r3, r2
 800c12e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c132:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c136:	2218      	movs	r2, #24
 800c138:	2100      	movs	r1, #0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fcd7 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c140:	233f      	movs	r3, #63	; 0x3f
 800c142:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800c146:	238e      	movs	r3, #142	; 0x8e
 800c148:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c154:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c158:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c15c:	f107 030f 	add.w	r3, r7, #15
 800c160:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c164:	2301      	movs	r3, #1
 800c166:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c16a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c16e:	2100      	movs	r1, #0
 800c170:	4618      	mov	r0, r3
 800c172:	f001 f8ad 	bl	800d2d0 <hci_send_req>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da01      	bge.n	800c180 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800c17c:	23ff      	movs	r3, #255	; 0xff
 800c17e:	e009      	b.n	800c194 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800c180:	f107 030f 	add.w	r3, r7, #15
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <aci_gap_update_adv_data+0xba>
  {
    return status;
 800c18a:	f107 030f 	add.w	r3, r7, #15
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	e000      	b.n	800c194 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b088      	sub	sp, #32
 800c1a2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	2218      	movs	r2, #24
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fc9c 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c1b6:	233f      	movs	r3, #63	; 0x3f
 800c1b8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c1ba:	2392      	movs	r3, #146	; 0x92
 800c1bc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c1be:	1dfb      	adds	r3, r7, #7
 800c1c0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c1c6:	f107 0308 	add.w	r3, r7, #8
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f001 f87f 	bl	800d2d0 <hci_send_req>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da01      	bge.n	800c1dc <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c1d8:	23ff      	movs	r3, #255	; 0xff
 800c1da:	e005      	b.n	800c1e8 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	e000      	b.n	800c1e8 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c1fa:	f107 0308 	add.w	r3, r7, #8
 800c1fe:	2218      	movs	r2, #24
 800c200:	2100      	movs	r1, #0
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fc73 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c208:	233f      	movs	r3, #63	; 0x3f
 800c20a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800c20c:	f240 1301 	movw	r3, #257	; 0x101
 800c210:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c212:	1dfb      	adds	r3, r7, #7
 800c214:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c216:	2301      	movs	r3, #1
 800c218:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	2100      	movs	r1, #0
 800c220:	4618      	mov	r0, r3
 800c222:	f001 f855 	bl	800d2d0 <hci_send_req>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	da01      	bge.n	800c230 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800c22c:	23ff      	movs	r3, #255	; 0xff
 800c22e:	e005      	b.n	800c23c <aci_gatt_init+0x4c>
  if (status) 
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <aci_gatt_init+0x4a>
  {
    return status;
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	e000      	b.n	800c23c <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3720      	adds	r7, #32
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b0cf      	sub	sp, #316	; 0x13c
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4638      	mov	r0, r7
 800c24e:	6001      	str	r1, [r0, #0]
 800c250:	4610      	mov	r0, r2
 800c252:	4619      	mov	r1, r3
 800c254:	1dfb      	adds	r3, r7, #7
 800c256:	4622      	mov	r2, r4
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	1dbb      	adds	r3, r7, #6
 800c25c:	4602      	mov	r2, r0
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	1d7b      	adds	r3, r7, #5
 800c262:	460a      	mov	r2, r1
 800c264:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c266:	f107 0310 	add.w	r3, r7, #16
 800c26a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c26e:	1dfb      	adds	r3, r7, #7
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d007      	beq.n	800c286 <aci_gatt_add_service+0x42>
 800c276:	1dfb      	adds	r3, r7, #7
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d101      	bne.n	800c282 <aci_gatt_add_service+0x3e>
 800c27e:	2311      	movs	r3, #17
 800c280:	e002      	b.n	800c288 <aci_gatt_add_service+0x44>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <aci_gatt_add_service+0x44>
 800c286:	2303      	movs	r3, #3
 800c288:	f107 0210 	add.w	r2, r7, #16
 800c28c:	4413      	add	r3, r2
 800c28e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	2203      	movs	r2, #3
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fc27 	bl	800caee <Osal_MemSet>
  int index_input = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c2a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2aa:	1dfa      	adds	r2, r7, #7
 800c2ac:	7812      	ldrb	r2, [r2, #0]
 800c2ae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800c2ba:	1dfb      	adds	r3, r7, #7
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d002      	beq.n	800c2c8 <aci_gatt_add_service+0x84>
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d004      	beq.n	800c2d0 <aci_gatt_add_service+0x8c>
 800c2c6:	e007      	b.n	800c2d8 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c2ce:	e005      	b.n	800c2dc <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c2d6:	e001      	b.n	800c2dc <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800c2d8:	2347      	movs	r3, #71	; 0x47
 800c2da:	e05d      	b.n	800c398 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800c2dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2e0:	1c58      	adds	r0, r3, #1
 800c2e2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	6819      	ldr	r1, [r3, #0]
 800c2ea:	f000 fbf0 	bl	800cace <Osal_MemCpy>
    index_input += size;
 800c2ee:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800c2f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c2f6:	4413      	add	r3, r2
 800c2f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800c2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c300:	1dba      	adds	r2, r7, #6
 800c302:	7812      	ldrb	r2, [r2, #0]
 800c304:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c306:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c30a:	3301      	adds	r3, #1
 800c30c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800c310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c314:	1d7a      	adds	r2, r7, #5
 800c316:	7812      	ldrb	r2, [r2, #0]
 800c318:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c31a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c31e:	3301      	adds	r3, #1
 800c320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c324:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c328:	2218      	movs	r2, #24
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fbde 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c332:	233f      	movs	r3, #63	; 0x3f
 800c334:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800c338:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c33c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c340:	f107 0310 	add.w	r3, r7, #16
 800c344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c34c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c358:	2303      	movs	r3, #3
 800c35a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c35e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c362:	2100      	movs	r1, #0
 800c364:	4618      	mov	r0, r3
 800c366:	f000 ffb3 	bl	800d2d0 <hci_send_req>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	da01      	bge.n	800c374 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800c370:	23ff      	movs	r3, #255	; 0xff
 800c372:	e011      	b.n	800c398 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800c374:	f107 030c 	add.w	r3, r7, #12
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800c37e:	f107 030c 	add.w	r3, r7, #12
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	e008      	b.n	800c398 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c386:	f107 030c 	add.w	r3, r7, #12
 800c38a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c38e:	b29a      	uxth	r2, r3
 800c390:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c394:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}

0800c3a2 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800c3a2:	b590      	push	{r4, r7, lr}
 800c3a4:	b0d1      	sub	sp, #324	; 0x144
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	4608      	mov	r0, r1
 800c3ac:	f107 0108 	add.w	r1, r7, #8
 800c3b0:	600a      	str	r2, [r1, #0]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	f107 030e 	add.w	r3, r7, #14
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	801a      	strh	r2, [r3, #0]
 800c3bc:	f107 030d 	add.w	r3, r7, #13
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	701a      	strb	r2, [r3, #0]
 800c3c4:	1dbb      	adds	r3, r7, #6
 800c3c6:	460a      	mov	r2, r1
 800c3c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c3ca:	f107 0318 	add.w	r3, r7, #24
 800c3ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c3d2:	f107 030d 	add.w	r3, r7, #13
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d008      	beq.n	800c3ee <aci_gatt_add_char+0x4c>
 800c3dc:	f107 030d 	add.w	r3, r7, #13
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d101      	bne.n	800c3ea <aci_gatt_add_char+0x48>
 800c3e6:	2313      	movs	r3, #19
 800c3e8:	e002      	b.n	800c3f0 <aci_gatt_add_char+0x4e>
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e000      	b.n	800c3f0 <aci_gatt_add_char+0x4e>
 800c3ee:	2305      	movs	r3, #5
 800c3f0:	f107 0218 	add.w	r2, r7, #24
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c3fa:	f107 0314 	add.w	r3, r7, #20
 800c3fe:	2203      	movs	r2, #3
 800c400:	2100      	movs	r1, #0
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fb73 	bl	800caee <Osal_MemSet>
  int index_input = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c40e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c412:	f107 020e 	add.w	r2, r7, #14
 800c416:	8812      	ldrh	r2, [r2, #0]
 800c418:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c41a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c41e:	3302      	adds	r3, #2
 800c420:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800c424:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c428:	f107 020d 	add.w	r2, r7, #13
 800c42c:	7812      	ldrb	r2, [r2, #0]
 800c42e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c434:	3301      	adds	r3, #1
 800c436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800c43a:	f107 030d 	add.w	r3, r7, #13
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d002      	beq.n	800c44a <aci_gatt_add_char+0xa8>
 800c444:	2b02      	cmp	r3, #2
 800c446:	d004      	beq.n	800c452 <aci_gatt_add_char+0xb0>
 800c448:	e007      	b.n	800c45a <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800c44a:	2302      	movs	r3, #2
 800c44c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c450:	e005      	b.n	800c45e <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800c452:	2310      	movs	r3, #16
 800c454:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c458:	e001      	b.n	800c45e <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800c45a:	2347      	movs	r3, #71	; 0x47
 800c45c:	e086      	b.n	800c56c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800c45e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c462:	1cd8      	adds	r0, r3, #3
 800c464:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	6819      	ldr	r1, [r3, #0]
 800c46e:	f000 fb2e 	bl	800cace <Osal_MemCpy>
    index_input += size;
 800c472:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c476:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800c47a:	4413      	add	r3, r2
 800c47c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800c480:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c484:	1dba      	adds	r2, r7, #6
 800c486:	8812      	ldrh	r2, [r2, #0]
 800c488:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c48a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c48e:	3302      	adds	r3, #2
 800c490:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800c494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c498:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c49c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800c49e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800c4a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c4ac:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c4b0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c4b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800c4bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c4c0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800c4c4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c4c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800c4d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c4d4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800c4d8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c4da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4de:	3301      	adds	r3, #1
 800c4e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800c4e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c4e8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800c4ec:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c4ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c4f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c4fc:	2218      	movs	r2, #24
 800c4fe:	2100      	movs	r1, #0
 800c500:	4618      	mov	r0, r3
 800c502:	f000 faf4 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c506:	233f      	movs	r3, #63	; 0x3f
 800c508:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800c50c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c510:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c514:	f107 0318 	add.w	r3, r7, #24
 800c518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c51c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c520:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c52c:	2303      	movs	r3, #3
 800c52e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800c532:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c536:	2100      	movs	r1, #0
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fec9 	bl	800d2d0 <hci_send_req>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	da01      	bge.n	800c548 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800c544:	23ff      	movs	r3, #255	; 0xff
 800c546:	e011      	b.n	800c56c <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800c548:	f107 0314 	add.w	r3, r7, #20
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800c552:	f107 0314 	add.w	r3, r7, #20
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	e008      	b.n	800c56c <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800c55a:	f107 0314 	add.w	r3, r7, #20
 800c55e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c562:	b29a      	uxth	r2, r3
 800c564:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800c568:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c572:	46bd      	mov	sp, r7
 800c574:	bd90      	pop	{r4, r7, pc}

0800c576 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800c576:	b5b0      	push	{r4, r5, r7, lr}
 800c578:	b0cc      	sub	sp, #304	; 0x130
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	4605      	mov	r5, r0
 800c57e:	460c      	mov	r4, r1
 800c580:	4610      	mov	r0, r2
 800c582:	4619      	mov	r1, r3
 800c584:	1dbb      	adds	r3, r7, #6
 800c586:	462a      	mov	r2, r5
 800c588:	801a      	strh	r2, [r3, #0]
 800c58a:	1d3b      	adds	r3, r7, #4
 800c58c:	4622      	mov	r2, r4
 800c58e:	801a      	strh	r2, [r3, #0]
 800c590:	1cfb      	adds	r3, r7, #3
 800c592:	4602      	mov	r2, r0
 800c594:	701a      	strb	r2, [r3, #0]
 800c596:	1cbb      	adds	r3, r7, #2
 800c598:	460a      	mov	r2, r1
 800c59a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800c59c:	f107 0310 	add.w	r3, r7, #16
 800c5a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c5a4:	f107 030f 	add.w	r3, r7, #15
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c5b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5b6:	1dba      	adds	r2, r7, #6
 800c5b8:	8812      	ldrh	r2, [r2, #0]
 800c5ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c5bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5c0:	3302      	adds	r3, #2
 800c5c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800c5c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5ca:	1d3a      	adds	r2, r7, #4
 800c5cc:	8812      	ldrh	r2, [r2, #0]
 800c5ce:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800c5d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5d4:	3302      	adds	r3, #2
 800c5d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800c5da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5de:	1cfa      	adds	r2, r7, #3
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c5e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800c5ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5f2:	1cba      	adds	r2, r7, #2
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c5f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800c602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c606:	1d98      	adds	r0, r3, #6
 800c608:	1cbb      	adds	r3, r7, #2
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	461a      	mov	r2, r3
 800c60e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c612:	f000 fa5c 	bl	800cace <Osal_MemCpy>
  index_input += Char_Value_Length;
 800c616:	1cbb      	adds	r3, r7, #2
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c61e:	4413      	add	r3, r2
 800c620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c628:	2218      	movs	r2, #24
 800c62a:	2100      	movs	r1, #0
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fa5e 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c632:	233f      	movs	r3, #63	; 0x3f
 800c634:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800c638:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c63c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c640:	f107 0310 	add.w	r3, r7, #16
 800c644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c64c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c650:	f107 030f 	add.w	r3, r7, #15
 800c654:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c658:	2301      	movs	r3, #1
 800c65a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c65e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c662:	2100      	movs	r1, #0
 800c664:	4618      	mov	r0, r3
 800c666:	f000 fe33 	bl	800d2d0 <hci_send_req>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da01      	bge.n	800c674 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800c670:	23ff      	movs	r3, #255	; 0xff
 800c672:	e009      	b.n	800c688 <aci_gatt_update_char_value+0x112>
  if (status) 
 800c674:	f107 030f 	add.w	r3, r7, #15
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800c67e:	f107 030f 	add.w	r3, r7, #15
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	e000      	b.n	800c688 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c68e:	46bd      	mov	sp, r7
 800c690:	bdb0      	pop	{r4, r5, r7, pc}

0800c692 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b0cc      	sub	sp, #304	; 0x130
 800c696:	af00      	add	r7, sp, #0
 800c698:	463b      	mov	r3, r7
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	1dfb      	adds	r3, r7, #7
 800c69e:	4602      	mov	r2, r0
 800c6a0:	701a      	strb	r2, [r3, #0]
 800c6a2:	1dbb      	adds	r3, r7, #6
 800c6a4:	460a      	mov	r2, r1
 800c6a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c6a8:	f107 0310 	add.w	r3, r7, #16
 800c6ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c6b0:	f107 030f 	add.w	r3, r7, #15
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800c6be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6c2:	1dfa      	adds	r2, r7, #7
 800c6c4:	7812      	ldrb	r2, [r2, #0]
 800c6c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800c6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6d6:	1dba      	adds	r2, r7, #6
 800c6d8:	7812      	ldrb	r2, [r2, #0]
 800c6da:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800c6e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6ea:	1c98      	adds	r0, r3, #2
 800c6ec:	1dbb      	adds	r3, r7, #6
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	463b      	mov	r3, r7
 800c6f2:	6819      	ldr	r1, [r3, #0]
 800c6f4:	f000 f9eb 	bl	800cace <Osal_MemCpy>
  index_input += Length;
 800c6f8:	1dbb      	adds	r3, r7, #6
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c700:	4413      	add	r3, r2
 800c702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c70a:	2218      	movs	r2, #24
 800c70c:	2100      	movs	r1, #0
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f9ed 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c714:	233f      	movs	r3, #63	; 0x3f
 800c716:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800c71a:	230c      	movs	r3, #12
 800c71c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c720:	f107 0310 	add.w	r3, r7, #16
 800c724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c72c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c730:	f107 030f 	add.w	r3, r7, #15
 800c734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c738:	2301      	movs	r3, #1
 800c73a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c73e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c742:	2100      	movs	r1, #0
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fdc3 	bl	800d2d0 <hci_send_req>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da01      	bge.n	800c754 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800c750:	23ff      	movs	r3, #255	; 0xff
 800c752:	e009      	b.n	800c768 <aci_hal_write_config_data+0xd6>
  if (status) 
 800c754:	f107 030f 	add.w	r3, r7, #15
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800c75e:	f107 030f 	add.w	r3, r7, #15
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	e000      	b.n	800c768 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b0cc      	sub	sp, #304	; 0x130
 800c776:	af00      	add	r7, sp, #0
 800c778:	4602      	mov	r2, r0
 800c77a:	1dfb      	adds	r3, r7, #7
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	1dbb      	adds	r3, r7, #6
 800c780:	460a      	mov	r2, r1
 800c782:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c78c:	f107 030f 	add.w	r3, r7, #15
 800c790:	2200      	movs	r2, #0
 800c792:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c79a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c79e:	1dfa      	adds	r2, r7, #7
 800c7a0:	7812      	ldrb	r2, [r2, #0]
 800c7a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800c7ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7b2:	1dba      	adds	r2, r7, #6
 800c7b4:	7812      	ldrb	r2, [r2, #0]
 800c7b6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7bc:	3301      	adds	r3, #1
 800c7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c7c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7c6:	2218      	movs	r2, #24
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f98f 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c7d0:	233f      	movs	r3, #63	; 0x3f
 800c7d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800c7d6:	230f      	movs	r3, #15
 800c7d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c7dc:	f107 0310 	add.w	r3, r7, #16
 800c7e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c7ec:	f107 030f 	add.w	r3, r7, #15
 800c7f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c7fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7fe:	2100      	movs	r1, #0
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fd65 	bl	800d2d0 <hci_send_req>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	da01      	bge.n	800c810 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800c80c:	23ff      	movs	r3, #255	; 0xff
 800c80e:	e009      	b.n	800c824 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800c810:	f107 030f 	add.w	r3, r7, #15
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800c81a:	f107 030f 	add.w	r3, r7, #15
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	e000      	b.n	800c824 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b0cc      	sub	sp, #304	; 0x130
 800c832:	af00      	add	r7, sp, #0
 800c834:	4602      	mov	r2, r0
 800c836:	1dbb      	adds	r3, r7, #6
 800c838:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800c83a:	f107 0310 	add.w	r3, r7, #16
 800c83e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c842:	f107 030f 	add.w	r3, r7, #15
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800c850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c854:	1dba      	adds	r2, r7, #6
 800c856:	8812      	ldrh	r2, [r2, #0]
 800c858:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c85a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c85e:	3302      	adds	r3, #2
 800c860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c868:	2218      	movs	r2, #24
 800c86a:	2100      	movs	r1, #0
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 f93e 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x3f;
 800c872:	233f      	movs	r3, #63	; 0x3f
 800c874:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800c878:	2318      	movs	r3, #24
 800c87a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c87e:	f107 0310 	add.w	r3, r7, #16
 800c882:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c88a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c88e:	f107 030f 	add.w	r3, r7, #15
 800c892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c896:	2301      	movs	r3, #1
 800c898:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c89c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fd14 	bl	800d2d0 <hci_send_req>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	da01      	bge.n	800c8b2 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800c8ae:	23ff      	movs	r3, #255	; 0xff
 800c8b0:	e009      	b.n	800c8c6 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800c8b2:	f107 030f 	add.w	r3, r7, #15
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800c8bc:	f107 030f 	add.w	r3, r7, #15
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	e000      	b.n	800c8c6 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c8da:	f107 0308 	add.w	r3, r7, #8
 800c8de:	2218      	movs	r2, #24
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 f903 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x03;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c8f0:	1dfb      	adds	r3, r7, #7
 800c8f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c8f8:	f107 0308 	add.w	r3, r7, #8
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 fce6 	bl	800d2d0 <hci_send_req>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	da01      	bge.n	800c90e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c90a:	23ff      	movs	r3, #255	; 0xff
 800c90c:	e005      	b.n	800c91a <hci_reset+0x4a>
  if (status) 
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d001      	beq.n	800c918 <hci_reset+0x48>
  {
    return status;
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	e000      	b.n	800c91a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3720      	adds	r7, #32
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b0ce      	sub	sp, #312	; 0x138
 800c926:	af00      	add	r7, sp, #0
 800c928:	f107 0308 	add.w	r3, r7, #8
 800c92c:	6019      	str	r1, [r3, #0]
 800c92e:	1d3b      	adds	r3, r7, #4
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	f107 030e 	add.w	r3, r7, #14
 800c936:	4602      	mov	r2, r0
 800c938:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800c93a:	f107 0318 	add.w	r3, r7, #24
 800c93e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c942:	f107 0310 	add.w	r3, r7, #16
 800c946:	2205      	movs	r2, #5
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f8cf 	bl	800caee <Osal_MemSet>
  int index_input = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c95a:	f107 020e 	add.w	r2, r7, #14
 800c95e:	8812      	ldrh	r2, [r2, #0]
 800c960:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c966:	3302      	adds	r3, #2
 800c968:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c96c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c970:	2218      	movs	r2, #24
 800c972:	2100      	movs	r1, #0
 800c974:	4618      	mov	r0, r3
 800c976:	f000 f8ba 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x08;
 800c97a:	2308      	movs	r3, #8
 800c97c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800c980:	2330      	movs	r3, #48	; 0x30
 800c982:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c986:	f107 0318 	add.w	r3, r7, #24
 800c98a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c98e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c996:	f107 0310 	add.w	r3, r7, #16
 800c99a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c99e:	2305      	movs	r3, #5
 800c9a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800c9a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 fc90 	bl	800d2d0 <hci_send_req>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	da01      	bge.n	800c9ba <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800c9b6:	23ff      	movs	r3, #255	; 0xff
 800c9b8:	e016      	b.n	800c9e8 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800c9ba:	f107 0310 	add.w	r3, r7, #16
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800c9c4:	f107 0310 	add.w	r3, r7, #16
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	e00d      	b.n	800c9e8 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800c9cc:	f107 0310 	add.w	r3, r7, #16
 800c9d0:	78da      	ldrb	r2, [r3, #3]
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800c9da:	f107 0310 	add.w	r3, r7, #16
 800c9de:	791a      	ldrb	r2, [r3, #4]
 800c9e0:	1d3b      	adds	r3, r7, #4
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800c9f2:	b590      	push	{r4, r7, lr}
 800c9f4:	b0cd      	sub	sp, #308	; 0x134
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	1dfb      	adds	r3, r7, #7
 800ca00:	4622      	mov	r2, r4
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	1dbb      	adds	r3, r7, #6
 800ca06:	4602      	mov	r2, r0
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	1d7b      	adds	r3, r7, #5
 800ca0c:	460a      	mov	r2, r1
 800ca0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ca10:	f107 0310 	add.w	r3, r7, #16
 800ca14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca18:	f107 030f 	add.w	r3, r7, #15
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800ca26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca2a:	1dfa      	adds	r2, r7, #7
 800ca2c:	7812      	ldrb	r2, [r2, #0]
 800ca2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca34:	3301      	adds	r3, #1
 800ca36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800ca3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca3e:	1dba      	adds	r2, r7, #6
 800ca40:	7812      	ldrb	r2, [r2, #0]
 800ca42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca48:	3301      	adds	r3, #1
 800ca4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800ca4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca52:	1d7a      	adds	r2, r7, #5
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ca62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca66:	2218      	movs	r2, #24
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f83f 	bl	800caee <Osal_MemSet>
  rq.ogf = 0x08;
 800ca70:	2308      	movs	r3, #8
 800ca72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ca76:	2331      	movs	r3, #49	; 0x31
 800ca78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca7c:	f107 0310 	add.w	r3, r7, #16
 800ca80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ca8c:	f107 030f 	add.w	r3, r7, #15
 800ca90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ca94:	2301      	movs	r3, #1
 800ca96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ca9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 fc15 	bl	800d2d0 <hci_send_req>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da01      	bge.n	800cab0 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800caac:	23ff      	movs	r3, #255	; 0xff
 800caae:	e009      	b.n	800cac4 <hci_le_set_default_phy+0xd2>
  if (status) 
 800cab0:	f107 030f 	add.w	r3, r7, #15
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d003      	beq.n	800cac2 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800caba:	f107 030f 	add.w	r3, r7, #15
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	e000      	b.n	800cac4 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd90      	pop	{r4, r7, pc}

0800cace <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f002 fa3a 	bl	800ef58 <memcpy>
 800cae4:	4603      	mov	r3, r0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f002 fa35 	bl	800ef6e <memset>
 800cb04:	4603      	mov	r3, r0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	; 0x28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3301      	adds	r3, #1
 800cb22:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2bff      	cmp	r3, #255	; 0xff
 800cb2a:	d000      	beq.n	800cb2e <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cb2c:	e04a      	b.n	800cbc4 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	3302      	adds	r3, #2
 800cb32:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f640 4301 	movw	r3, #3073	; 0xc01
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d000      	beq.n	800cb46 <PeerToPeer_Event_Handler+0x36>
          break;
 800cb44:	e03d      	b.n	800cbc2 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	3302      	adds	r3, #2
 800cb4a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	885b      	ldrh	r3, [r3, #2]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <PeerToPeer_Event_Handler+0xc0>)
 800cb56:	889b      	ldrh	r3, [r3, #4]
 800cb58:	3302      	adds	r3, #2
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d118      	bne.n	800cb90 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	7a1b      	ldrb	r3, [r3, #8]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d007      	beq.n	800cb80 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800cb70:	2300      	movs	r3, #0
 800cb72:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800cb74:	f107 0308 	add.w	r3, r7, #8
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f001 fbf7 	bl	800e36c <P2PS_STM_App_Notification>
        break;
 800cb7e:	e01f      	b.n	800cbc0 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800cb80:	2301      	movs	r3, #1
 800cb82:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f001 fbef 	bl	800e36c <P2PS_STM_App_Notification>
        break;
 800cb8e:	e017      	b.n	800cbc0 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	885b      	ldrh	r3, [r3, #2]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	461a      	mov	r2, r3
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <PeerToPeer_Event_Handler+0xc0>)
 800cb9a:	885b      	ldrh	r3, [r3, #2]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d10e      	bne.n	800cbc0 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	88db      	ldrh	r3, [r3, #6]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800cbb6:	f107 0308 	add.w	r3, r7, #8
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f001 fbd6 	bl	800e36c <P2PS_STM_App_Notification>
        break;
 800cbc0:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800cbc2:	bf00      	nop
  }

  return(return_value);
 800cbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3728      	adds	r7, #40	; 0x28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	2000021c 	.word	0x2000021c

0800cbd4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800cbda:	484a      	ldr	r0, [pc, #296]	; (800cd04 <P2PS_STM_Init+0x130>)
 800cbdc:	f000 f952 	bl	800ce84 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800cbe0:	238f      	movs	r3, #143	; 0x8f
 800cbe2:	703b      	strb	r3, [r7, #0]
 800cbe4:	23e5      	movs	r3, #229	; 0xe5
 800cbe6:	707b      	strb	r3, [r7, #1]
 800cbe8:	23b3      	movs	r3, #179	; 0xb3
 800cbea:	70bb      	strb	r3, [r7, #2]
 800cbec:	23d5      	movs	r3, #213	; 0xd5
 800cbee:	70fb      	strb	r3, [r7, #3]
 800cbf0:	232e      	movs	r3, #46	; 0x2e
 800cbf2:	713b      	strb	r3, [r7, #4]
 800cbf4:	237f      	movs	r3, #127	; 0x7f
 800cbf6:	717b      	strb	r3, [r7, #5]
 800cbf8:	234a      	movs	r3, #74	; 0x4a
 800cbfa:	71bb      	strb	r3, [r7, #6]
 800cbfc:	2398      	movs	r3, #152	; 0x98
 800cbfe:	71fb      	strb	r3, [r7, #7]
 800cc00:	232a      	movs	r3, #42	; 0x2a
 800cc02:	723b      	strb	r3, [r7, #8]
 800cc04:	2348      	movs	r3, #72	; 0x48
 800cc06:	727b      	strb	r3, [r7, #9]
 800cc08:	237a      	movs	r3, #122	; 0x7a
 800cc0a:	72bb      	strb	r3, [r7, #10]
 800cc0c:	23cc      	movs	r3, #204	; 0xcc
 800cc0e:	72fb      	strb	r3, [r7, #11]
 800cc10:	2340      	movs	r3, #64	; 0x40
 800cc12:	733b      	strb	r3, [r7, #12]
 800cc14:	23fe      	movs	r3, #254	; 0xfe
 800cc16:	737b      	strb	r3, [r7, #13]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73bb      	strb	r3, [r7, #14]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800cc20:	4639      	mov	r1, r7
 800cc22:	4b39      	ldr	r3, [pc, #228]	; (800cd08 <P2PS_STM_Init+0x134>)
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2308      	movs	r3, #8
 800cc28:	2201      	movs	r2, #1
 800cc2a:	2002      	movs	r0, #2
 800cc2c:	f7ff fb0a 	bl	800c244 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800cc30:	2319      	movs	r3, #25
 800cc32:	703b      	strb	r3, [r7, #0]
 800cc34:	23ed      	movs	r3, #237	; 0xed
 800cc36:	707b      	strb	r3, [r7, #1]
 800cc38:	2382      	movs	r3, #130	; 0x82
 800cc3a:	70bb      	strb	r3, [r7, #2]
 800cc3c:	23ae      	movs	r3, #174	; 0xae
 800cc3e:	70fb      	strb	r3, [r7, #3]
 800cc40:	23ed      	movs	r3, #237	; 0xed
 800cc42:	713b      	strb	r3, [r7, #4]
 800cc44:	2321      	movs	r3, #33	; 0x21
 800cc46:	717b      	strb	r3, [r7, #5]
 800cc48:	234c      	movs	r3, #76	; 0x4c
 800cc4a:	71bb      	strb	r3, [r7, #6]
 800cc4c:	239d      	movs	r3, #157	; 0x9d
 800cc4e:	71fb      	strb	r3, [r7, #7]
 800cc50:	2341      	movs	r3, #65	; 0x41
 800cc52:	723b      	strb	r3, [r7, #8]
 800cc54:	2345      	movs	r3, #69	; 0x45
 800cc56:	727b      	strb	r3, [r7, #9]
 800cc58:	2322      	movs	r3, #34	; 0x22
 800cc5a:	72bb      	strb	r3, [r7, #10]
 800cc5c:	238e      	movs	r3, #142	; 0x8e
 800cc5e:	72fb      	strb	r3, [r7, #11]
 800cc60:	2341      	movs	r3, #65	; 0x41
 800cc62:	733b      	strb	r3, [r7, #12]
 800cc64:	23fe      	movs	r3, #254	; 0xfe
 800cc66:	737b      	strb	r3, [r7, #13]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73bb      	strb	r3, [r7, #14]
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cc70:	4b25      	ldr	r3, [pc, #148]	; (800cd08 <P2PS_STM_Init+0x134>)
 800cc72:	8818      	ldrh	r0, [r3, #0]
 800cc74:	463a      	mov	r2, r7
 800cc76:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <P2PS_STM_Init+0x138>)
 800cc78:	9305      	str	r3, [sp, #20]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	230a      	movs	r3, #10
 800cc80:	9303      	str	r3, [sp, #12]
 800cc82:	2301      	movs	r3, #1
 800cc84:	9302      	str	r3, [sp, #8]
 800cc86:	2300      	movs	r3, #0
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	2306      	movs	r3, #6
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	2302      	movs	r3, #2
 800cc90:	2102      	movs	r1, #2
 800cc92:	f7ff fb86 	bl	800c3a2 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800cc96:	2319      	movs	r3, #25
 800cc98:	703b      	strb	r3, [r7, #0]
 800cc9a:	23ed      	movs	r3, #237	; 0xed
 800cc9c:	707b      	strb	r3, [r7, #1]
 800cc9e:	2382      	movs	r3, #130	; 0x82
 800cca0:	70bb      	strb	r3, [r7, #2]
 800cca2:	23ae      	movs	r3, #174	; 0xae
 800cca4:	70fb      	strb	r3, [r7, #3]
 800cca6:	23ed      	movs	r3, #237	; 0xed
 800cca8:	713b      	strb	r3, [r7, #4]
 800ccaa:	2321      	movs	r3, #33	; 0x21
 800ccac:	717b      	strb	r3, [r7, #5]
 800ccae:	234c      	movs	r3, #76	; 0x4c
 800ccb0:	71bb      	strb	r3, [r7, #6]
 800ccb2:	239d      	movs	r3, #157	; 0x9d
 800ccb4:	71fb      	strb	r3, [r7, #7]
 800ccb6:	2341      	movs	r3, #65	; 0x41
 800ccb8:	723b      	strb	r3, [r7, #8]
 800ccba:	2345      	movs	r3, #69	; 0x45
 800ccbc:	727b      	strb	r3, [r7, #9]
 800ccbe:	2322      	movs	r3, #34	; 0x22
 800ccc0:	72bb      	strb	r3, [r7, #10]
 800ccc2:	238e      	movs	r3, #142	; 0x8e
 800ccc4:	72fb      	strb	r3, [r7, #11]
 800ccc6:	2342      	movs	r3, #66	; 0x42
 800ccc8:	733b      	strb	r3, [r7, #12]
 800ccca:	23fe      	movs	r3, #254	; 0xfe
 800cccc:	737b      	strb	r3, [r7, #13]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73bb      	strb	r3, [r7, #14]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <P2PS_STM_Init+0x134>)
 800ccd8:	8818      	ldrh	r0, [r3, #0]
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	; (800cd10 <P2PS_STM_Init+0x13c>)
 800ccde:	9305      	str	r3, [sp, #20]
 800cce0:	2301      	movs	r3, #1
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	230a      	movs	r3, #10
 800cce6:	9303      	str	r3, [sp, #12]
 800cce8:	2301      	movs	r3, #1
 800ccea:	9302      	str	r3, [sp, #8]
 800ccec:	2300      	movs	r3, #0
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	2310      	movs	r3, #16
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	2102      	movs	r1, #2
 800ccf8:	f7ff fb53 	bl	800c3a2 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800ccfc:	bf00      	nop
}
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	0800cb11 	.word	0x0800cb11
 800cd08:	2000021c 	.word	0x2000021c
 800cd0c:	2000021e 	.word	0x2000021e
 800cd10:	20000220 	.word	0x20000220

0800cd14 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800cd20:	2342      	movs	r3, #66	; 0x42
 800cd22:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800cd24:	88fb      	ldrh	r3, [r7, #6]
 800cd26:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d000      	beq.n	800cd30 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800cd2e:	e00c      	b.n	800cd4a <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cd30:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <P2PS_STM_App_Update_Char+0x40>)
 800cd32:	8818      	ldrh	r0, [r3, #0]
 800cd34:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <P2PS_STM_App_Update_Char+0x40>)
 800cd36:	8899      	ldrh	r1, [r3, #4]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f7ff fc19 	bl	800c576 <aci_gatt_update_char_value>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]
      break;
 800cd48:	bf00      	nop
  }

  return result;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	2000021c 	.word	0x2000021c

0800cd58 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	af00      	add	r7, sp, #0
  return;
 800cd5c:	bf00      	nop
}
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800cd66:	b480      	push	{r7}
 800cd68:	af00      	add	r7, sp, #0
  return;
 800cd6a:	bf00      	nop
}
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <DIS_Init>:
__weak void DIS_Init( void )
{
 800cd74:	b480      	push	{r7}
 800cd76:	af00      	add	r7, sp, #0
  return;
 800cd78:	bf00      	nop
}
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800cd82:	b480      	push	{r7}
 800cd84:	af00      	add	r7, sp, #0
  return;
 800cd86:	bf00      	nop
}
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
  return;
 800cd94:	bf00      	nop
}
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <HRS_Init>:
__weak void HRS_Init( void )
{
 800cd9e:	b480      	push	{r7}
 800cda0:	af00      	add	r7, sp, #0
  return;
 800cda2:	bf00      	nop
}
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <HTS_Init>:
__weak void HTS_Init( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
  return;
 800cdb0:	bf00      	nop
}
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <IAS_Init>:
__weak void IAS_Init( void )
{
 800cdba:	b480      	push	{r7}
 800cdbc:	af00      	add	r7, sp, #0
  return;
 800cdbe:	bf00      	nop
}
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <LLS_Init>:
__weak void LLS_Init( void )
{
 800cdc8:	b480      	push	{r7}
 800cdca:	af00      	add	r7, sp, #0
  return;
 800cdcc:	bf00      	nop
}
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TPS_Init>:
__weak void TPS_Init( void )
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	af00      	add	r7, sp, #0
  return;
 800cdda:	bf00      	nop
}
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	af00      	add	r7, sp, #0
  return;
 800cde8:	bf00      	nop
}
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	af00      	add	r7, sp, #0
  return;
 800cdf6:	bf00      	nop
}
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <MESH_Init>:
__weak void MESH_Init( void )
{
 800ce00:	b480      	push	{r7}
 800ce02:	af00      	add	r7, sp, #0
  return;
 800ce04:	bf00      	nop
}
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800ce0e:	b480      	push	{r7}
 800ce10:	af00      	add	r7, sp, #0
  return;
 800ce12:	bf00      	nop
}
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ce20:	4b04      	ldr	r3, [pc, #16]	; (800ce34 <SVCCTL_Init+0x18>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ce26:	4b04      	ldr	r3, [pc, #16]	; (800ce38 <SVCCTL_Init+0x1c>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ce2c:	f000 f806 	bl	800ce3c <SVCCTL_SvcInit>

  return;
 800ce30:	bf00      	nop
}
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20000224 	.word	0x20000224
 800ce38:	20000244 	.word	0x20000244

0800ce3c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
  BLS_Init();
 800ce40:	f7ff ff8a 	bl	800cd58 <BLS_Init>

  CRS_STM_Init();
 800ce44:	f7ff ff8f 	bl	800cd66 <CRS_STM_Init>

  DIS_Init();
 800ce48:	f7ff ff94 	bl	800cd74 <DIS_Init>

  EDS_STM_Init();
 800ce4c:	f7ff ff99 	bl	800cd82 <EDS_STM_Init>

  HIDS_Init();
 800ce50:	f7ff ff9e 	bl	800cd90 <HIDS_Init>

  HRS_Init();
 800ce54:	f7ff ffa3 	bl	800cd9e <HRS_Init>

  HTS_Init();
 800ce58:	f7ff ffa8 	bl	800cdac <HTS_Init>

  IAS_Init();
 800ce5c:	f7ff ffad 	bl	800cdba <IAS_Init>

  LLS_Init();
 800ce60:	f7ff ffb2 	bl	800cdc8 <LLS_Init>

  TPS_Init();
 800ce64:	f7ff ffb7 	bl	800cdd6 <TPS_Init>

  MOTENV_STM_Init();
 800ce68:	f7ff ffbc 	bl	800cde4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ce6c:	f7ff feb2 	bl	800cbd4 <P2PS_STM_Init>

  OTAS_STM_Init();
 800ce70:	f7ff ffbf 	bl	800cdf2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ce74:	f7ff ffcb 	bl	800ce0e <BVOPUS_STM_Init>

  MESH_Init();
 800ce78:	f7ff ffc2 	bl	800ce00 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ce7c:	f000 f8ea 	bl	800d054 <SVCCTL_InitCustomSvc>
  
  return;
 800ce80:	bf00      	nop
}
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ce8c:	4b09      	ldr	r3, [pc, #36]	; (800ceb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ce8e:	7f1b      	ldrb	r3, [r3, #28]
 800ce90:	4619      	mov	r1, r3
 800ce92:	4a08      	ldr	r2, [pc, #32]	; (800ceb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ce9a:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ce9c:	7f1b      	ldrb	r3, [r3, #28]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800cea4:	771a      	strb	r2, [r3, #28]

  return;
 800cea6:	bf00      	nop
}
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20000224 	.word	0x20000224

0800ceb8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3301      	adds	r3, #1
 800cec4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800cec6:	2300      	movs	r3, #0
 800cec8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2bff      	cmp	r3, #255	; 0xff
 800ced0:	d000      	beq.n	800ced4 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800ced2:	e025      	b.n	800cf20 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	3302      	adds	r3, #2
 800ced8:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cee8:	d000      	beq.n	800ceec <SVCCTL_UserEvtRx+0x34>
          break;
 800ceea:	e018      	b.n	800cf1e <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ceec:	2300      	movs	r3, #0
 800ceee:	757b      	strb	r3, [r7, #21]
 800cef0:	e00d      	b.n	800cf0e <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800cef2:	7d7b      	ldrb	r3, [r7, #21]
 800cef4:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <SVCCTL_UserEvtRx+0xa0>)
 800cef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	4798      	blx	r3
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d108      	bne.n	800cf1a <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cf08:	7d7b      	ldrb	r3, [r7, #21]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	757b      	strb	r3, [r7, #21]
 800cf0e:	4b12      	ldr	r3, [pc, #72]	; (800cf58 <SVCCTL_UserEvtRx+0xa0>)
 800cf10:	7f1b      	ldrb	r3, [r3, #28]
 800cf12:	7d7a      	ldrb	r2, [r7, #21]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d3ec      	bcc.n	800cef2 <SVCCTL_UserEvtRx+0x3a>
          break;
 800cf18:	e000      	b.n	800cf1c <SVCCTL_UserEvtRx+0x64>
              break;
 800cf1a:	bf00      	nop
          break;
 800cf1c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800cf1e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d009      	beq.n	800cf3a <SVCCTL_UserEvtRx+0x82>
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d00a      	beq.n	800cf40 <SVCCTL_UserEvtRx+0x88>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10b      	bne.n	800cf46 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 ff4e 	bl	800ddd0 <SVCCTL_App_Notification>
 800cf34:	4603      	mov	r3, r0
 800cf36:	75bb      	strb	r3, [r7, #22]
      break;
 800cf38:	e008      	b.n	800cf4c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	75bb      	strb	r3, [r7, #22]
      break;
 800cf3e:	e005      	b.n	800cf4c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800cf40:	2300      	movs	r3, #0
 800cf42:	75bb      	strb	r3, [r7, #22]
      break;
 800cf44:	e002      	b.n	800cf4c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cf46:	2301      	movs	r3, #1
 800cf48:	75bb      	strb	r3, [r7, #22]
      break;
 800cf4a:	bf00      	nop
  }

  return (return_status);
 800cf4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000224 	.word	0x20000224

0800cf5c <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cf64:	2300      	movs	r3, #0
 800cf66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2bff      	cmp	r3, #255	; 0xff
 800cf76:	d000      	beq.n	800cf7a <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cf78:	e063      	b.n	800d042 <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	461a      	mov	r2, r3
 800cf88:	f640 4301 	movw	r3, #3073	; 0xc01
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d000      	beq.n	800cf92 <Template_Event_Handler+0x36>
          break;
 800cf90:	e056      	b.n	800d040 <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	3302      	adds	r3, #2
 800cf96:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	885b      	ldrh	r3, [r3, #2]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	4b2b      	ldr	r3, [pc, #172]	; (800d050 <Template_Event_Handler+0xf4>)
 800cfa2:	889b      	ldrh	r3, [r3, #4]
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d118      	bne.n	800cfdc <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	7a1b      	ldrb	r3, [r3, #8]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f001 fa53 	bl	800e470 <TEMPLATE_STM_App_Notification>
        break;
 800cfca:	e038      	b.n	800d03e <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800cfd0:	f107 0308 	add.w	r3, r7, #8
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f001 fa4b 	bl	800e470 <TEMPLATE_STM_App_Notification>
        break;
 800cfda:	e030      	b.n	800d03e <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	885b      	ldrh	r3, [r3, #2]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <Template_Event_Handler+0xf4>)
 800cfe6:	885b      	ldrh	r3, [r3, #2]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d10f      	bne.n	800d00e <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	88db      	ldrh	r3, [r3, #6]
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	3308      	adds	r3, #8
 800d000:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800d002:	f107 0308 	add.w	r3, r7, #8
 800d006:	4618      	mov	r0, r3
 800d008:	f001 fa32 	bl	800e470 <TEMPLATE_STM_App_Notification>
        break;
 800d00c:	e017      	b.n	800d03e <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	885b      	ldrh	r3, [r3, #2]
 800d012:	b29b      	uxth	r3, r3
 800d014:	461a      	mov	r2, r3
 800d016:	4b0e      	ldr	r3, [pc, #56]	; (800d050 <Template_Event_Handler+0xf4>)
 800d018:	88db      	ldrh	r3, [r3, #6]
 800d01a:	3301      	adds	r3, #1
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d10e      	bne.n	800d03e <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800d020:	2304      	movs	r3, #4
 800d022:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	88db      	ldrh	r3, [r3, #6]
 800d028:	b29b      	uxth	r3, r3
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	3308      	adds	r3, #8
 800d032:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800d034:	f107 0308 	add.w	r3, r7, #8
 800d038:	4618      	mov	r0, r3
 800d03a:	f001 fa19 	bl	800e470 <TEMPLATE_STM_App_Notification>
        break;
 800d03e:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d040:	bf00      	nop
  }

  return(return_value);
 800d042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d046:	4618      	mov	r0, r3
 800d048:	3728      	adds	r7, #40	; 0x28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000248 	.word	0x20000248

0800d054 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08a      	sub	sp, #40	; 0x28
 800d058:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800d05a:	484a      	ldr	r0, [pc, #296]	; (800d184 <SVCCTL_InitCustomSvc+0x130>)
 800d05c:	f7ff ff12 	bl	800ce84 <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800d060:	231b      	movs	r3, #27
 800d062:	703b      	strb	r3, [r7, #0]
 800d064:	23c5      	movs	r3, #197	; 0xc5
 800d066:	707b      	strb	r3, [r7, #1]
 800d068:	23d5      	movs	r3, #213	; 0xd5
 800d06a:	70bb      	strb	r3, [r7, #2]
 800d06c:	23a5      	movs	r3, #165	; 0xa5
 800d06e:	70fb      	strb	r3, [r7, #3]
 800d070:	2302      	movs	r3, #2
 800d072:	713b      	strb	r3, [r7, #4]
 800d074:	2300      	movs	r3, #0
 800d076:	717b      	strb	r3, [r7, #5]
 800d078:	23b4      	movs	r3, #180	; 0xb4
 800d07a:	71bb      	strb	r3, [r7, #6]
 800d07c:	239a      	movs	r3, #154	; 0x9a
 800d07e:	71fb      	strb	r3, [r7, #7]
 800d080:	23e1      	movs	r3, #225	; 0xe1
 800d082:	723b      	strb	r3, [r7, #8]
 800d084:	2311      	movs	r3, #17
 800d086:	727b      	strb	r3, [r7, #9]
 800d088:	2301      	movs	r3, #1
 800d08a:	72bb      	strb	r3, [r7, #10]
 800d08c:	2300      	movs	r3, #0
 800d08e:	72fb      	strb	r3, [r7, #11]
 800d090:	2300      	movs	r3, #0
 800d092:	733b      	strb	r3, [r7, #12]
 800d094:	2300      	movs	r3, #0
 800d096:	737b      	strb	r3, [r7, #13]
 800d098:	2300      	movs	r3, #0
 800d09a:	73bb      	strb	r3, [r7, #14]
 800d09c:	2300      	movs	r3, #0
 800d09e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	4b39      	ldr	r3, [pc, #228]	; (800d188 <SVCCTL_InitCustomSvc+0x134>)
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	2002      	movs	r0, #2
 800d0ac:	f7ff f8ca 	bl	800c244 <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d0b0:	2319      	movs	r3, #25
 800d0b2:	703b      	strb	r3, [r7, #0]
 800d0b4:	23ed      	movs	r3, #237	; 0xed
 800d0b6:	707b      	strb	r3, [r7, #1]
 800d0b8:	2382      	movs	r3, #130	; 0x82
 800d0ba:	70bb      	strb	r3, [r7, #2]
 800d0bc:	23ae      	movs	r3, #174	; 0xae
 800d0be:	70fb      	strb	r3, [r7, #3]
 800d0c0:	23ed      	movs	r3, #237	; 0xed
 800d0c2:	713b      	strb	r3, [r7, #4]
 800d0c4:	2321      	movs	r3, #33	; 0x21
 800d0c6:	717b      	strb	r3, [r7, #5]
 800d0c8:	234c      	movs	r3, #76	; 0x4c
 800d0ca:	71bb      	strb	r3, [r7, #6]
 800d0cc:	239d      	movs	r3, #157	; 0x9d
 800d0ce:	71fb      	strb	r3, [r7, #7]
 800d0d0:	2341      	movs	r3, #65	; 0x41
 800d0d2:	723b      	strb	r3, [r7, #8]
 800d0d4:	2345      	movs	r3, #69	; 0x45
 800d0d6:	727b      	strb	r3, [r7, #9]
 800d0d8:	2322      	movs	r3, #34	; 0x22
 800d0da:	72bb      	strb	r3, [r7, #10]
 800d0dc:	238e      	movs	r3, #142	; 0x8e
 800d0de:	72fb      	strb	r3, [r7, #11]
 800d0e0:	23cc      	movs	r3, #204	; 0xcc
 800d0e2:	733b      	strb	r3, [r7, #12]
 800d0e4:	23aa      	movs	r3, #170	; 0xaa
 800d0e6:	737b      	strb	r3, [r7, #13]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73bb      	strb	r3, [r7, #14]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800d0f0:	4b25      	ldr	r3, [pc, #148]	; (800d188 <SVCCTL_InitCustomSvc+0x134>)
 800d0f2:	8818      	ldrh	r0, [r3, #0]
 800d0f4:	463a      	mov	r2, r7
 800d0f6:	4b25      	ldr	r3, [pc, #148]	; (800d18c <SVCCTL_InitCustomSvc+0x138>)
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	230a      	movs	r3, #10
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	2301      	movs	r3, #1
 800d104:	9302      	str	r3, [sp, #8]
 800d106:	2300      	movs	r3, #0
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	2306      	movs	r3, #6
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	2302      	movs	r3, #2
 800d110:	2102      	movs	r1, #2
 800d112:	f7ff f946 	bl	800c3a2 <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800d116:	231b      	movs	r3, #27
 800d118:	703b      	strb	r3, [r7, #0]
 800d11a:	23c5      	movs	r3, #197	; 0xc5
 800d11c:	707b      	strb	r3, [r7, #1]
 800d11e:	23d5      	movs	r3, #213	; 0xd5
 800d120:	70bb      	strb	r3, [r7, #2]
 800d122:	23a5      	movs	r3, #165	; 0xa5
 800d124:	70fb      	strb	r3, [r7, #3]
 800d126:	2302      	movs	r3, #2
 800d128:	713b      	strb	r3, [r7, #4]
 800d12a:	2300      	movs	r3, #0
 800d12c:	717b      	strb	r3, [r7, #5]
 800d12e:	2336      	movs	r3, #54	; 0x36
 800d130:	71bb      	strb	r3, [r7, #6]
 800d132:	23ac      	movs	r3, #172	; 0xac
 800d134:	71fb      	strb	r3, [r7, #7]
 800d136:	23e1      	movs	r3, #225	; 0xe1
 800d138:	723b      	strb	r3, [r7, #8]
 800d13a:	2311      	movs	r3, #17
 800d13c:	727b      	strb	r3, [r7, #9]
 800d13e:	2301      	movs	r3, #1
 800d140:	72bb      	strb	r3, [r7, #10]
 800d142:	2300      	movs	r3, #0
 800d144:	72fb      	strb	r3, [r7, #11]
 800d146:	2300      	movs	r3, #0
 800d148:	733b      	strb	r3, [r7, #12]
 800d14a:	2300      	movs	r3, #0
 800d14c:	737b      	strb	r3, [r7, #13]
 800d14e:	2380      	movs	r3, #128	; 0x80
 800d150:	73bb      	strb	r3, [r7, #14]
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800d156:	4b0c      	ldr	r3, [pc, #48]	; (800d188 <SVCCTL_InitCustomSvc+0x134>)
 800d158:	8818      	ldrh	r0, [r3, #0]
 800d15a:	463a      	mov	r2, r7
 800d15c:	4b0c      	ldr	r3, [pc, #48]	; (800d190 <SVCCTL_InitCustomSvc+0x13c>)
 800d15e:	9305      	str	r3, [sp, #20]
 800d160:	2301      	movs	r3, #1
 800d162:	9304      	str	r3, [sp, #16]
 800d164:	230a      	movs	r3, #10
 800d166:	9303      	str	r3, [sp, #12]
 800d168:	2301      	movs	r3, #1
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	2300      	movs	r3, #0
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	2310      	movs	r3, #16
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	2308      	movs	r3, #8
 800d176:	2102      	movs	r1, #2
 800d178:	f7ff f913 	bl	800c3a2 <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800d17c:	bf00      	nop
}
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	0800cf5d 	.word	0x0800cf5d
 800d188:	20000248 	.word	0x20000248
 800d18c:	2000024a 	.word	0x2000024a
 800d190:	2000024c 	.word	0x2000024c

0800d194 <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af02      	add	r7, sp, #8
 800d19a:	4603      	mov	r3, r0
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800d1a0:	2342      	movs	r3, #66	; 0x42
 800d1a2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d000      	beq.n	800d1ac <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800d1aa:	e00c      	b.n	800d1c6 <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800d1ac:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800d1ae:	8818      	ldrh	r0, [r3, #0]
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800d1b2:	8899      	ldrh	r1, [r3, #4]
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	2308      	movs	r3, #8
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f7ff f9db 	bl	800c576 <aci_gatt_update_char_value>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1c4:	bf00      	nop
  }

  return result;
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20000248 	.word	0x20000248

0800d1d4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d1dc:	f107 030c 	add.w	r3, r7, #12
 800d1e0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	2121      	movs	r1, #33	; 0x21
 800d1ec:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d1f0:	f000 fa00 	bl	800d5f4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	330b      	adds	r3, #11
 800d1f8:	78db      	ldrb	r3, [r3, #3]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
	...

0800d204 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	4a08      	ldr	r2, [pc, #32]	; (800d234 <hci_init+0x30>)
 800d214:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d216:	4a08      	ldr	r2, [pc, #32]	; (800d238 <hci_init+0x34>)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d21c:	4806      	ldr	r0, [pc, #24]	; (800d238 <hci_init+0x34>)
 800d21e:	f000 f96f 	bl	800d500 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 f8d0 	bl	800d3cc <TlInit>

  return;
 800d22c:	bf00      	nop
}
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	200004c4 	.word	0x200004c4
 800d238:	2000049c 	.word	0x2000049c

0800d23c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d242:	4820      	ldr	r0, [pc, #128]	; (800d2c4 <hci_user_evt_proc+0x88>)
 800d244:	f000 fc92 	bl	800db6c <LST_is_empty>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d128      	bne.n	800d2a0 <hci_user_evt_proc+0x64>
 800d24e:	4b1e      	ldr	r3, [pc, #120]	; (800d2c8 <hci_user_evt_proc+0x8c>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d024      	beq.n	800d2a0 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d256:	f107 030c 	add.w	r3, r7, #12
 800d25a:	4619      	mov	r1, r3
 800d25c:	4819      	ldr	r0, [pc, #100]	; (800d2c4 <hci_user_evt_proc+0x88>)
 800d25e:	f000 fd0c 	bl	800dc7a <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d262:	4b19      	ldr	r3, [pc, #100]	; (800d2c8 <hci_user_evt_proc+0x8c>)
 800d264:	2201      	movs	r2, #1
 800d266:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800d268:	4b18      	ldr	r3, [pc, #96]	; (800d2cc <hci_user_evt_proc+0x90>)
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d009      	beq.n	800d284 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d274:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <hci_user_evt_proc+0x90>)
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	1d3a      	adds	r2, r7, #4
 800d27a:	4610      	mov	r0, r2
 800d27c:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d27e:	793a      	ldrb	r2, [r7, #4]
 800d280:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <hci_user_evt_proc+0x8c>)
 800d282:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d284:	4b10      	ldr	r3, [pc, #64]	; (800d2c8 <hci_user_evt_proc+0x8c>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d004      	beq.n	800d296 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fbca 	bl	800da28 <TL_MM_EvtDone>
 800d294:	e004      	b.n	800d2a0 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4619      	mov	r1, r3
 800d29a:	480a      	ldr	r0, [pc, #40]	; (800d2c4 <hci_user_evt_proc+0x88>)
 800d29c:	f000 fc86 	bl	800dbac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d2a0:	4808      	ldr	r0, [pc, #32]	; (800d2c4 <hci_user_evt_proc+0x88>)
 800d2a2:	f000 fc63 	bl	800db6c <LST_is_empty>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d107      	bne.n	800d2bc <hci_user_evt_proc+0x80>
 800d2ac:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <hci_user_evt_proc+0x8c>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d2b4:	4803      	ldr	r0, [pc, #12]	; (800d2c4 <hci_user_evt_proc+0x88>)
 800d2b6:	f001 f800 	bl	800e2ba <hci_notify_asynch_evt>
  }


  return;
 800d2ba:	bf00      	nop
 800d2bc:	bf00      	nop
}
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20000254 	.word	0x20000254
 800d2c8:	20000260 	.word	0x20000260
 800d2cc:	2000049c 	.word	0x2000049c

0800d2d0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d2dc:	2000      	movs	r0, #0
 800d2de:	f000 f8cb 	bl	800d478 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	885b      	ldrh	r3, [r3, #2]
 800d2ea:	b21b      	sxth	r3, r3
 800d2ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f0:	b21a      	sxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	029b      	lsls	r3, r3, #10
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	b21b      	sxth	r3, r3
 800d2fe:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	b2d9      	uxtb	r1, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	689a      	ldr	r2, [r3, #8]
 800d30a:	8bbb      	ldrh	r3, [r7, #28]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 f88d 	bl	800d42c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d312:	e04e      	b.n	800d3b2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d314:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d318:	f000 ffe6 	bl	800e2e8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d31c:	e043      	b.n	800d3a6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d31e:	f107 030c 	add.w	r3, r7, #12
 800d322:	4619      	mov	r1, r3
 800d324:	4828      	ldr	r0, [pc, #160]	; (800d3c8 <hci_send_req+0xf8>)
 800d326:	f000 fca8 	bl	800dc7a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	7a5b      	ldrb	r3, [r3, #9]
 800d32e:	2b0f      	cmp	r3, #15
 800d330:	d114      	bne.n	800d35c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	330b      	adds	r3, #11
 800d336:	61bb      	str	r3, [r7, #24]
        if(pcommand_status_event->cmdcode == opcode)
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	885b      	ldrh	r3, [r3, #2]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	8bba      	ldrh	r2, [r7, #28]
 800d340:	429a      	cmp	r2, r3
 800d342:	d104      	bne.n	800d34e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	7812      	ldrb	r2, [r2, #0]
 800d34c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	785b      	ldrb	r3, [r3, #1]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d027      	beq.n	800d3a6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d356:	2301      	movs	r3, #1
 800d358:	77fb      	strb	r3, [r7, #31]
 800d35a:	e024      	b.n	800d3a6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	330b      	adds	r3, #11
 800d360:	617b      	str	r3, [r7, #20]

        if(pcommand_complete_event->cmdcode == opcode)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	8bba      	ldrh	r2, [r7, #28]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d114      	bne.n	800d39a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	7a9b      	ldrb	r3, [r3, #10]
 800d374:	3b03      	subs	r3, #3
 800d376:	74fb      	strb	r3, [r7, #19]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	695a      	ldr	r2, [r3, #20]
 800d37c:	7cfb      	ldrb	r3, [r7, #19]
 800d37e:	429a      	cmp	r2, r3
 800d380:	bfa8      	it	ge
 800d382:	461a      	movge	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6918      	ldr	r0, [r3, #16]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	1cd9      	adds	r1, r3, #3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	461a      	mov	r2, r3
 800d396:	f001 fddf 	bl	800ef58 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d3a6:	4808      	ldr	r0, [pc, #32]	; (800d3c8 <hci_send_req+0xf8>)
 800d3a8:	f000 fbe0 	bl	800db6c <LST_is_empty>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0b5      	beq.n	800d31e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d3b2:	7ffb      	ldrb	r3, [r7, #31]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d0ad      	beq.n	800d314 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f000 f85d 	bl	800d478 <NotifyCmdStatus>

  return 0;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3720      	adds	r7, #32
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	200004bc 	.word	0x200004bc

0800d3cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d3d4:	480f      	ldr	r0, [pc, #60]	; (800d414 <TlInit+0x48>)
 800d3d6:	f000 fbb9 	bl	800db4c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d3da:	4a0f      	ldr	r2, [pc, #60]	; (800d418 <TlInit+0x4c>)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d3e0:	480e      	ldr	r0, [pc, #56]	; (800d41c <TlInit+0x50>)
 800d3e2:	f000 fbb3 	bl	800db4c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d3e6:	4b0e      	ldr	r3, [pc, #56]	; (800d420 <TlInit+0x54>)
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d3ec:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <TlInit+0x58>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00a      	beq.n	800d40a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d3f8:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <TlInit+0x5c>)
 800d3fa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d3fc:	4b09      	ldr	r3, [pc, #36]	; (800d424 <TlInit+0x58>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f107 0208 	add.w	r2, r7, #8
 800d404:	4610      	mov	r0, r2
 800d406:	4798      	blx	r3
  }

  return;
 800d408:	bf00      	nop
 800d40a:	bf00      	nop
}
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	200004bc 	.word	0x200004bc
 800d418:	2000025c 	.word	0x2000025c
 800d41c:	20000254 	.word	0x20000254
 800d420:	20000260 	.word	0x20000260
 800d424:	2000049c 	.word	0x2000049c
 800d428:	0800d4b9 	.word	0x0800d4b9

0800d42c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	603a      	str	r2, [r7, #0]
 800d436:	80fb      	strh	r3, [r7, #6]
 800d438:	460b      	mov	r3, r1
 800d43a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d43c:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <SendCmd+0x44>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	88fa      	ldrh	r2, [r7, #6]
 800d442:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d446:	4b0a      	ldr	r3, [pc, #40]	; (800d470 <SendCmd+0x44>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	797a      	ldrb	r2, [r7, #5]
 800d44c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d44e:	4b08      	ldr	r3, [pc, #32]	; (800d470 <SendCmd+0x44>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	330c      	adds	r3, #12
 800d454:	797a      	ldrb	r2, [r7, #5]
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	4618      	mov	r0, r3
 800d45a:	f001 fd7d 	bl	800ef58 <memcpy>

  hciContext.io.Send(0,0);
 800d45e:	4b05      	ldr	r3, [pc, #20]	; (800d474 <SendCmd+0x48>)
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2100      	movs	r1, #0
 800d464:	2000      	movs	r0, #0
 800d466:	4798      	blx	r3

  return;
 800d468:	bf00      	nop
}
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	2000025c 	.word	0x2000025c
 800d474:	2000049c 	.word	0x2000049c

0800d478 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d108      	bne.n	800d49a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <NotifyCmdStatus+0x3c>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00d      	beq.n	800d4ac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d490:	4b08      	ldr	r3, [pc, #32]	; (800d4b4 <NotifyCmdStatus+0x3c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2000      	movs	r0, #0
 800d496:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d498:	e008      	b.n	800d4ac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d49a:	4b06      	ldr	r3, [pc, #24]	; (800d4b4 <NotifyCmdStatus+0x3c>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d4a2:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <NotifyCmdStatus+0x3c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	4798      	blx	r3
  return;
 800d4aa:	bf00      	nop
 800d4ac:	bf00      	nop
}
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	200004c4 	.word	0x200004c4

0800d4b8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7a5b      	ldrb	r3, [r3, #9]
 800d4c4:	2b0f      	cmp	r3, #15
 800d4c6:	d003      	beq.n	800d4d0 <TlEvtReceived+0x18>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7a5b      	ldrb	r3, [r3, #9]
 800d4cc:	2b0e      	cmp	r3, #14
 800d4ce:	d107      	bne.n	800d4e0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	4809      	ldr	r0, [pc, #36]	; (800d4f8 <TlEvtReceived+0x40>)
 800d4d4:	f000 fb8e 	bl	800dbf4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d4d8:	2000      	movs	r0, #0
 800d4da:	f000 fefa 	bl	800e2d2 <hci_cmd_resp_release>
 800d4de:	e006      	b.n	800d4ee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	4806      	ldr	r0, [pc, #24]	; (800d4fc <TlEvtReceived+0x44>)
 800d4e4:	f000 fb86 	bl	800dbf4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d4e8:	4804      	ldr	r0, [pc, #16]	; (800d4fc <TlEvtReceived+0x44>)
 800d4ea:	f000 fee6 	bl	800e2ba <hci_notify_asynch_evt>
  }

  return;
 800d4ee:	bf00      	nop
}
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	200004bc 	.word	0x200004bc
 800d4fc:	20000254 	.word	0x20000254

0800d500 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a05      	ldr	r2, [pc, #20]	; (800d520 <hci_register_io_bus+0x20>)
 800d50c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a04      	ldr	r2, [pc, #16]	; (800d524 <hci_register_io_bus+0x24>)
 800d512:	611a      	str	r2, [r3, #16]

  return;
 800d514:	bf00      	nop
}
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	0800d801 	.word	0x0800d801
 800d524:	0800d869 	.word	0x0800d869

0800d528 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	4a08      	ldr	r2, [pc, #32]	; (800d558 <shci_init+0x30>)
 800d538:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d53a:	4a08      	ldr	r2, [pc, #32]	; (800d55c <shci_init+0x34>)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d540:	4806      	ldr	r0, [pc, #24]	; (800d55c <shci_init+0x34>)
 800d542:	f000 f90d 	bl	800d760 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 f890 	bl	800d670 <TlInit>

  return;
 800d550:	bf00      	nop
}
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	200004e8 	.word	0x200004e8
 800d55c:	200004c8 	.word	0x200004c8

0800d560 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d566:	4820      	ldr	r0, [pc, #128]	; (800d5e8 <shci_user_evt_proc+0x88>)
 800d568:	f000 fb00 	bl	800db6c <LST_is_empty>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d128      	bne.n	800d5c4 <shci_user_evt_proc+0x64>
 800d572:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <shci_user_evt_proc+0x8c>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d024      	beq.n	800d5c4 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d57a:	f107 030c 	add.w	r3, r7, #12
 800d57e:	4619      	mov	r1, r3
 800d580:	4819      	ldr	r0, [pc, #100]	; (800d5e8 <shci_user_evt_proc+0x88>)
 800d582:	f000 fb7a 	bl	800dc7a <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d586:	4b19      	ldr	r3, [pc, #100]	; (800d5ec <shci_user_evt_proc+0x8c>)
 800d588:	2201      	movs	r2, #1
 800d58a:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800d58c:	4b18      	ldr	r3, [pc, #96]	; (800d5f0 <shci_user_evt_proc+0x90>)
 800d58e:	69db      	ldr	r3, [r3, #28]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d009      	beq.n	800d5a8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d598:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <shci_user_evt_proc+0x90>)
 800d59a:	69db      	ldr	r3, [r3, #28]
 800d59c:	1d3a      	adds	r2, r7, #4
 800d59e:	4610      	mov	r0, r2
 800d5a0:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d5a2:	793a      	ldrb	r2, [r7, #4]
 800d5a4:	4b11      	ldr	r3, [pc, #68]	; (800d5ec <shci_user_evt_proc+0x8c>)
 800d5a6:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d5a8:	4b10      	ldr	r3, [pc, #64]	; (800d5ec <shci_user_evt_proc+0x8c>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fa38 	bl	800da28 <TL_MM_EvtDone>
 800d5b8:	e004      	b.n	800d5c4 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	480a      	ldr	r0, [pc, #40]	; (800d5e8 <shci_user_evt_proc+0x88>)
 800d5c0:	f000 faf4 	bl	800dbac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5c4:	4808      	ldr	r0, [pc, #32]	; (800d5e8 <shci_user_evt_proc+0x88>)
 800d5c6:	f000 fad1 	bl	800db6c <LST_is_empty>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d107      	bne.n	800d5e0 <shci_user_evt_proc+0x80>
 800d5d0:	4b06      	ldr	r3, [pc, #24]	; (800d5ec <shci_user_evt_proc+0x8c>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d5d8:	4803      	ldr	r0, [pc, #12]	; (800d5e8 <shci_user_evt_proc+0x88>)
 800d5da:	f7f3 f84a 	bl	8000672 <shci_notify_asynch_evt>
  }


  return;
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
}
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	20000264 	.word	0x20000264
 800d5ec:	20000274 	.word	0x20000274
 800d5f0:	200004c8 	.word	0x200004c8

0800d5f4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60ba      	str	r2, [r7, #8]
 800d5fc:	607b      	str	r3, [r7, #4]
 800d5fe:	4603      	mov	r3, r0
 800d600:	81fb      	strh	r3, [r7, #14]
 800d602:	460b      	mov	r3, r1
 800d604:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d606:	2000      	movs	r0, #0
 800d608:	f000 f864 	bl	800d6d4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d60c:	4b16      	ldr	r3, [pc, #88]	; (800d668 <shci_send+0x74>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	89fa      	ldrh	r2, [r7, #14]
 800d612:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <shci_send+0x74>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	7b7a      	ldrb	r2, [r7, #13]
 800d61c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <shci_send+0x74>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	330c      	adds	r3, #12
 800d624:	7b7a      	ldrb	r2, [r7, #13]
 800d626:	68b9      	ldr	r1, [r7, #8]
 800d628:	4618      	mov	r0, r3
 800d62a:	f001 fc95 	bl	800ef58 <memcpy>

  shciContext.io.Send(0,0);
 800d62e:	4b0f      	ldr	r3, [pc, #60]	; (800d66c <shci_send+0x78>)
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	2100      	movs	r1, #0
 800d634:	2000      	movs	r0, #0
 800d636:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d638:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d63c:	f7f3 f830 	bl	80006a0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f103 0008 	add.w	r0, r3, #8
 800d646:	4b08      	ldr	r3, [pc, #32]	; (800d668 <shci_send+0x74>)
 800d648:	6819      	ldr	r1, [r3, #0]
 800d64a:	4b07      	ldr	r3, [pc, #28]	; (800d668 <shci_send+0x74>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	3303      	adds	r3, #3
 800d652:	461a      	mov	r2, r3
 800d654:	f001 fc80 	bl	800ef58 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d658:	2001      	movs	r0, #1
 800d65a:	f000 f83b 	bl	800d6d4 <Cmd_SetStatus>

  return;
 800d65e:	bf00      	nop
}
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000270 	.word	0x20000270
 800d66c:	200004c8 	.word	0x200004c8

0800d670 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d678:	4a10      	ldr	r2, [pc, #64]	; (800d6bc <TlInit+0x4c>)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d67e:	4810      	ldr	r0, [pc, #64]	; (800d6c0 <TlInit+0x50>)
 800d680:	f000 fa64 	bl	800db4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d684:	2001      	movs	r0, #1
 800d686:	f000 f825 	bl	800d6d4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d68a:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <TlInit+0x54>)
 800d68c:	2201      	movs	r2, #1
 800d68e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d690:	4b0d      	ldr	r3, [pc, #52]	; (800d6c8 <TlInit+0x58>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00c      	beq.n	800d6b2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d69c:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <TlInit+0x5c>)
 800d69e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <TlInit+0x60>)
 800d6a2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d6a4:	4b08      	ldr	r3, [pc, #32]	; (800d6c8 <TlInit+0x58>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f107 020c 	add.w	r2, r7, #12
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
  }

  return;
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
}
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000270 	.word	0x20000270
 800d6c0:	20000264 	.word	0x20000264
 800d6c4:	20000274 	.word	0x20000274
 800d6c8:	200004c8 	.word	0x200004c8
 800d6cc:	0800d725 	.word	0x0800d725
 800d6d0:	0800d73d 	.word	0x0800d73d

0800d6d4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10b      	bne.n	800d6fc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d6e4:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <Cmd_SetStatus+0x48>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d6ec:	4b0b      	ldr	r3, [pc, #44]	; (800d71c <Cmd_SetStatus+0x48>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <Cmd_SetStatus+0x4c>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d6fa:	e00b      	b.n	800d714 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d6fc:	4b08      	ldr	r3, [pc, #32]	; (800d720 <Cmd_SetStatus+0x4c>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d702:	4b06      	ldr	r3, [pc, #24]	; (800d71c <Cmd_SetStatus+0x48>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d004      	beq.n	800d714 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d70a:	4b04      	ldr	r3, [pc, #16]	; (800d71c <Cmd_SetStatus+0x48>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2001      	movs	r0, #1
 800d710:	4798      	blx	r3
  return;
 800d712:	bf00      	nop
 800d714:	bf00      	nop
}
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	200004e8 	.word	0x200004e8
 800d720:	2000026c 	.word	0x2000026c

0800d724 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d72c:	2000      	movs	r0, #0
 800d72e:	f7f2 ffac 	bl	800068a <shci_cmd_resp_release>

  return;
 800d732:	bf00      	nop
}
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	4805      	ldr	r0, [pc, #20]	; (800d75c <TlUserEvtReceived+0x20>)
 800d748:	f000 fa54 	bl	800dbf4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d74c:	4803      	ldr	r0, [pc, #12]	; (800d75c <TlUserEvtReceived+0x20>)
 800d74e:	f7f2 ff90 	bl	8000672 <shci_notify_asynch_evt>

  return;
 800d752:	bf00      	nop
}
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20000264 	.word	0x20000264

0800d760 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a05      	ldr	r2, [pc, #20]	; (800d780 <shci_register_io_bus+0x20>)
 800d76c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a04      	ldr	r2, [pc, #16]	; (800d784 <shci_register_io_bus+0x24>)
 800d772:	611a      	str	r2, [r3, #16]

  return;
 800d774:	bf00      	nop
}
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	0800d8dd 	.word	0x0800d8dd
 800d784:	0800d931 	.word	0x0800d931

0800d788 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d78c:	f001 f886 	bl	800e89c <HW_IPCC_Enable>

  return;
 800d790:	bf00      	nop
}
 800d792:	bd80      	pop	{r7, pc}

0800d794 <TL_Init>:


void TL_Init( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d798:	4b0f      	ldr	r3, [pc, #60]	; (800d7d8 <TL_Init+0x44>)
 800d79a:	4a10      	ldr	r2, [pc, #64]	; (800d7dc <TL_Init+0x48>)
 800d79c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d79e:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <TL_Init+0x44>)
 800d7a0:	4a0f      	ldr	r2, [pc, #60]	; (800d7e0 <TL_Init+0x4c>)
 800d7a2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <TL_Init+0x44>)
 800d7a6:	4a0f      	ldr	r2, [pc, #60]	; (800d7e4 <TL_Init+0x50>)
 800d7a8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	; (800d7d8 <TL_Init+0x44>)
 800d7ac:	4a0e      	ldr	r2, [pc, #56]	; (800d7e8 <TL_Init+0x54>)
 800d7ae:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d7b0:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <TL_Init+0x44>)
 800d7b2:	4a0e      	ldr	r2, [pc, #56]	; (800d7ec <TL_Init+0x58>)
 800d7b4:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d7b6:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <TL_Init+0x44>)
 800d7b8:	4a0d      	ldr	r2, [pc, #52]	; (800d7f0 <TL_Init+0x5c>)
 800d7ba:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d7bc:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <TL_Init+0x44>)
 800d7be:	4a0d      	ldr	r2, [pc, #52]	; (800d7f4 <TL_Init+0x60>)
 800d7c0:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d7c2:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <TL_Init+0x44>)
 800d7c4:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <TL_Init+0x64>)
 800d7c6:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d7c8:	4b03      	ldr	r3, [pc, #12]	; (800d7d8 <TL_Init+0x44>)
 800d7ca:	4a0c      	ldr	r2, [pc, #48]	; (800d7fc <TL_Init+0x68>)
 800d7cc:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800d7ce:	f001 f86d 	bl	800e8ac <HW_IPCC_Init>

  return;
 800d7d2:	bf00      	nop
}
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20030000 	.word	0x20030000
 800d7dc:	20030024 	.word	0x20030024
 800d7e0:	20030044 	.word	0x20030044
 800d7e4:	20030054 	.word	0x20030054
 800d7e8:	20030060 	.word	0x20030060
 800d7ec:	20030068 	.word	0x20030068
 800d7f0:	20030070 	.word	0x20030070
 800d7f4:	2003008c 	.word	0x2003008c
 800d7f8:	20030090 	.word	0x20030090
 800d7fc:	2003009c 	.word	0x2003009c

0800d800 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800d80c:	4811      	ldr	r0, [pc, #68]	; (800d854 <TL_BLE_Init+0x54>)
 800d80e:	f000 f99d 	bl	800db4c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800d812:	4b11      	ldr	r3, [pc, #68]	; (800d858 <TL_BLE_Init+0x58>)
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	689a      	ldr	r2, [r3, #8]
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4a0c      	ldr	r2, [pc, #48]	; (800d85c <TL_BLE_Init+0x5c>)
 800d82c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	4a08      	ldr	r2, [pc, #32]	; (800d854 <TL_BLE_Init+0x54>)
 800d832:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800d834:	f001 f850 	bl	800e8d8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a08      	ldr	r2, [pc, #32]	; (800d860 <TL_BLE_Init+0x60>)
 800d83e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4a07      	ldr	r2, [pc, #28]	; (800d864 <TL_BLE_Init+0x64>)
 800d846:	6013      	str	r3, [r2, #0]

  return 0;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20030a34 	.word	0x20030a34
 800d858:	20030000 	.word	0x20030000
 800d85c:	20030a24 	.word	0x20030a24
 800d860:	200004f4 	.word	0x200004f4
 800d864:	200004f8 	.word	0x200004f8

0800d868 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	460b      	mov	r3, r1
 800d872:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800d874:	4b05      	ldr	r3, [pc, #20]	; (800d88c <TL_BLE_SendCmd+0x24>)
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2201      	movs	r2, #1
 800d87c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800d87e:	f001 f835 	bl	800e8ec <HW_IPCC_BLE_SendCmd>

  return 0;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	20030000 	.word	0x20030000

0800d890 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d896:	e009      	b.n	800d8ac <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d898:	1d3b      	adds	r3, r7, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4808      	ldr	r0, [pc, #32]	; (800d8c0 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800d89e:	f000 f9ec 	bl	800dc7a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d8a2:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8ac:	4804      	ldr	r0, [pc, #16]	; (800d8c0 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800d8ae:	f000 f95d 	bl	800db6c <LST_is_empty>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d0ef      	beq.n	800d898 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d8b8:	bf00      	nop
}
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20030a34 	.word	0x20030a34
 800d8c4:	200004f4 	.word	0x200004f4

0800d8c8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d8cc:	4b02      	ldr	r3, [pc, #8]	; (800d8d8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4798      	blx	r3

  return;
 800d8d2:	bf00      	nop
}
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	200004f8 	.word	0x200004f8

0800d8dc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d8e8:	480d      	ldr	r0, [pc, #52]	; (800d920 <TL_SYS_Init+0x44>)
 800d8ea:	f000 f92f 	bl	800db4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	; (800d924 <TL_SYS_Init+0x48>)
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	4a08      	ldr	r2, [pc, #32]	; (800d920 <TL_SYS_Init+0x44>)
 800d900:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d902:	f001 f815 	bl	800e930 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a07      	ldr	r2, [pc, #28]	; (800d928 <TL_SYS_Init+0x4c>)
 800d90c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	4a06      	ldr	r2, [pc, #24]	; (800d92c <TL_SYS_Init+0x50>)
 800d914:	6013      	str	r3, [r2, #0]

  return 0;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20030a3c 	.word	0x20030a3c
 800d924:	20030000 	.word	0x20030000
 800d928:	200004fc 	.word	0x200004fc
 800d92c:	20000500 	.word	0x20000500

0800d930 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d93c:	4b05      	ldr	r3, [pc, #20]	; (800d954 <TL_SYS_SendCmd+0x24>)
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2210      	movs	r2, #16
 800d944:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800d946:	f000 fffd 	bl	800e944 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	20030000 	.word	0x20030000

0800d958 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d95c:	4b04      	ldr	r3, [pc, #16]	; (800d970 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a04      	ldr	r2, [pc, #16]	; (800d974 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800d962:	68d2      	ldr	r2, [r2, #12]
 800d964:	6812      	ldr	r2, [r2, #0]
 800d966:	4610      	mov	r0, r2
 800d968:	4798      	blx	r3

  return;
 800d96a:	bf00      	nop
}
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	200004fc 	.word	0x200004fc
 800d974:	20030000 	.word	0x20030000

0800d978 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d97e:	e009      	b.n	800d994 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d980:	1d3b      	adds	r3, r7, #4
 800d982:	4619      	mov	r1, r3
 800d984:	4808      	ldr	r0, [pc, #32]	; (800d9a8 <HW_IPCC_SYS_EvtNot+0x30>)
 800d986:	f000 f978 	bl	800dc7a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d98a:	4b08      	ldr	r3, [pc, #32]	; (800d9ac <HW_IPCC_SYS_EvtNot+0x34>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	4610      	mov	r0, r2
 800d992:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d994:	4804      	ldr	r0, [pc, #16]	; (800d9a8 <HW_IPCC_SYS_EvtNot+0x30>)
 800d996:	f000 f8e9 	bl	800db6c <LST_is_empty>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d0ef      	beq.n	800d980 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d9a0:	bf00      	nop
}
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20030a3c 	.word	0x20030a3c
 800d9ac:	20000500 	.word	0x20000500

0800d9b0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d9b8:	4817      	ldr	r0, [pc, #92]	; (800da18 <TL_MM_Init+0x68>)
 800d9ba:	f000 f8c7 	bl	800db4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d9be:	4817      	ldr	r0, [pc, #92]	; (800da1c <TL_MM_Init+0x6c>)
 800d9c0:	f000 f8c4 	bl	800db4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d9c4:	4b16      	ldr	r3, [pc, #88]	; (800da20 <TL_MM_Init+0x70>)
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	4a16      	ldr	r2, [pc, #88]	; (800da24 <TL_MM_Init+0x74>)
 800d9ca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d9cc:	4b15      	ldr	r3, [pc, #84]	; (800da24 <TL_MM_Init+0x74>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	6892      	ldr	r2, [r2, #8]
 800d9d4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d9d6:	4b13      	ldr	r3, [pc, #76]	; (800da24 <TL_MM_Init+0x74>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	68d2      	ldr	r2, [r2, #12]
 800d9de:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d9e0:	4b10      	ldr	r3, [pc, #64]	; (800da24 <TL_MM_Init+0x74>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a0c      	ldr	r2, [pc, #48]	; (800da18 <TL_MM_Init+0x68>)
 800d9e6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d9e8:	4b0e      	ldr	r3, [pc, #56]	; (800da24 <TL_MM_Init+0x74>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	6812      	ldr	r2, [r2, #0]
 800d9f0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <TL_MM_Init+0x74>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	6852      	ldr	r2, [r2, #4]
 800d9fa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <TL_MM_Init+0x74>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	6912      	ldr	r2, [r2, #16]
 800da04:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800da06:	4b07      	ldr	r3, [pc, #28]	; (800da24 <TL_MM_Init+0x74>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	6952      	ldr	r2, [r2, #20]
 800da0e:	619a      	str	r2, [r3, #24]

  return;
 800da10:	bf00      	nop
}
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	200300a8 	.word	0x200300a8
 800da1c:	200004ec 	.word	0x200004ec
 800da20:	20030000 	.word	0x20030000
 800da24:	20000504 	.word	0x20000504

0800da28 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800da30:	6879      	ldr	r1, [r7, #4]
 800da32:	4805      	ldr	r0, [pc, #20]	; (800da48 <TL_MM_EvtDone+0x20>)
 800da34:	f000 f8de 	bl	800dbf4 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800da38:	4804      	ldr	r0, [pc, #16]	; (800da4c <TL_MM_EvtDone+0x24>)
 800da3a:	f000 ffa9 	bl	800e990 <HW_IPCC_MM_SendFreeBuf>

  return;
 800da3e:	bf00      	nop
}
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	200004ec 	.word	0x200004ec
 800da4c:	0800da51 	.word	0x0800da51

0800da50 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800da56:	e00c      	b.n	800da72 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800da58:	1d3b      	adds	r3, r7, #4
 800da5a:	4619      	mov	r1, r3
 800da5c:	480a      	ldr	r0, [pc, #40]	; (800da88 <SendFreeBuf+0x38>)
 800da5e:	f000 f90c 	bl	800dc7a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800da62:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <SendFreeBuf+0x3c>)
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	4611      	mov	r1, r2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 f8c1 	bl	800dbf4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800da72:	4805      	ldr	r0, [pc, #20]	; (800da88 <SendFreeBuf+0x38>)
 800da74:	f000 f87a 	bl	800db6c <LST_is_empty>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0ec      	beq.n	800da58 <SendFreeBuf+0x8>
  }

  return;
 800da7e:	bf00      	nop
}
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200004ec 	.word	0x200004ec
 800da8c:	20030000 	.word	0x20030000

0800da90 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800da94:	4805      	ldr	r0, [pc, #20]	; (800daac <TL_TRACES_Init+0x1c>)
 800da96:	f000 f859 	bl	800db4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <TL_TRACES_Init+0x20>)
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	4a03      	ldr	r2, [pc, #12]	; (800daac <TL_TRACES_Init+0x1c>)
 800daa0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800daa2:	f000 ffab 	bl	800e9fc <HW_IPCC_TRACES_Init>

  return;
 800daa6:	bf00      	nop
}
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	200300b0 	.word	0x200300b0
 800dab0:	20030000 	.word	0x20030000

0800dab4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800daba:	e008      	b.n	800dace <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800dabc:	1d3b      	adds	r3, r7, #4
 800dabe:	4619      	mov	r1, r3
 800dac0:	4808      	ldr	r0, [pc, #32]	; (800dae4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dac2:	f000 f8da 	bl	800dc7a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f80d 	bl	800dae8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dace:	4805      	ldr	r0, [pc, #20]	; (800dae4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dad0:	f000 f84c 	bl	800db6c <LST_is_empty>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0f0      	beq.n	800dabc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800dada:	bf00      	nop
}
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200300b0 	.word	0x200300b0

0800dae8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800db06:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <OTP_Read+0x48>)
 800db08:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800db0a:	e002      	b.n	800db12 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3b08      	subs	r3, #8
 800db10:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3307      	adds	r3, #7
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	79fa      	ldrb	r2, [r7, #7]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d003      	beq.n	800db26 <OTP_Read+0x2a>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	4a09      	ldr	r2, [pc, #36]	; (800db48 <OTP_Read+0x4c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d1f2      	bne.n	800db0c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3307      	adds	r3, #7
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	79fa      	ldrb	r2, [r7, #7]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d001      	beq.n	800db36 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800db32:	2300      	movs	r3, #0
 800db34:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800db36:	68fb      	ldr	r3, [r7, #12]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	1fff73f8 	.word	0x1fff73f8
 800db48:	1fff7000 	.word	0x1fff7000

0800db4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	605a      	str	r2, [r3, #4]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db74:	f3ef 8310 	mrs	r3, PRIMASK
 800db78:	60fb      	str	r3, [r7, #12]
  return(result);
 800db7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800db7e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	429a      	cmp	r2, r3
 800db88:	d102      	bne.n	800db90 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800db8a:	2301      	movs	r3, #1
 800db8c:	75fb      	strb	r3, [r7, #23]
 800db8e:	e001      	b.n	800db94 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	75fb      	strb	r3, [r7, #23]
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	371c      	adds	r7, #28
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbb6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbba:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dbbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbc0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	605a      	str	r2, [r3, #4]
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dbe8:	bf00      	nop
 800dbea:	371c      	adds	r7, #28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbfe:	f3ef 8310 	mrs	r3, PRIMASK
 800dc02:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc08:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	683a      	ldr	r2, [r7, #0]
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc30:	bf00      	nop
 800dc32:	371c      	adds	r7, #28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc44:	f3ef 8310 	mrs	r3, PRIMASK
 800dc48:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc4e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6812      	ldr	r2, [r2, #0]
 800dc58:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	6852      	ldr	r2, [r2, #4]
 800dc62:	605a      	str	r2, [r3, #4]
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc6e:	bf00      	nop
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b086      	sub	sp, #24
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc84:	f3ef 8310 	mrs	r3, PRIMASK
 800dc88:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff ffcd 	bl	800dc3c <LST_remove_node>
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dcac:	bf00      	nop
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800dcb8:	4b03      	ldr	r3, [pc, #12]	; (800dcc8 <LL_FLASH_GetUDN+0x14>)
 800dcba:	681b      	ldr	r3, [r3, #0]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	1fff7580 	.word	0x1fff7580

0800dccc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800dccc:	b480      	push	{r7}
 800dcce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800dcd0:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <LL_FLASH_GetDeviceID+0x14>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	b2db      	uxtb	r3, r3
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	1fff7584 	.word	0x1fff7584

0800dce4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800dce4:	b480      	push	{r7}
 800dce6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800dce8:	4b03      	ldr	r3, [pc, #12]	; (800dcf8 <LL_FLASH_GetSTCompanyID+0x14>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	0a1b      	lsrs	r3, r3, #8
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	1fff7584 	.word	0x1fff7584

0800dcfc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800dcfc:	b5b0      	push	{r4, r5, r7, lr}
 800dcfe:	b08c      	sub	sp, #48	; 0x30
 800dd00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800dd02:	4b29      	ldr	r3, [pc, #164]	; (800dda8 <APP_BLE_Init+0xac>)
 800dd04:	463c      	mov	r4, r7
 800dd06:	461d      	mov	r5, r3
 800dd08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dd14:	c407      	stmia	r4!, {r0, r1, r2}
 800dd16:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800dd18:	f000 f900 	bl	800df1c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	2002      	movs	r0, #2
 800dd20:	f000 fe94 	bl	800ea4c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800dd24:	4a21      	ldr	r2, [pc, #132]	; (800ddac <APP_BLE_Init+0xb0>)
 800dd26:	2100      	movs	r1, #0
 800dd28:	2004      	movs	r0, #4
 800dd2a:	f000 ff99 	bl	800ec60 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800dd2e:	463b      	mov	r3, r7
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fa4f 	bl	800d1d4 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800dd36:	f000 f907 	bl	800df48 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800dd3a:	f7ff f86f 	bl	800ce1c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dd3e:	4b1c      	ldr	r3, [pc, #112]	; (800ddb0 <APP_BLE_Init+0xb4>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800dd46:	4b1a      	ldr	r3, [pc, #104]	; (800ddb0 <APP_BLE_Init+0xb4>)
 800dd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd4c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800dd4e:	4a19      	ldr	r2, [pc, #100]	; (800ddb4 <APP_BLE_Init+0xb8>)
 800dd50:	2100      	movs	r1, #0
 800dd52:	2001      	movs	r0, #1
 800dd54:	f000 ff84 	bl	800ec60 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800dd58:	2006      	movs	r0, #6
 800dd5a:	f7fe fd68 	bl	800c82e <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800dd5e:	f000 fb55 	bl	800e40c <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800dd62:	f000 fbad 	bl	800e4c0 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800dd66:	4b14      	ldr	r3, [pc, #80]	; (800ddb8 <APP_BLE_Init+0xbc>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	4914      	ldr	r1, [pc, #80]	; (800ddbc <APP_BLE_Init+0xc0>)
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f7f3 fb39 	bl	80013e4 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <APP_BLE_Init+0xc4>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4913      	ldr	r1, [pc, #76]	; (800ddc4 <APP_BLE_Init+0xc8>)
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f7f3 fb33 	bl	80013e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800dd7e:	4b0c      	ldr	r3, [pc, #48]	; (800ddb0 <APP_BLE_Init+0xb4>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800dd86:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <APP_BLE_Init+0xb4>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800dd8e:	4b0e      	ldr	r3, [pc, #56]	; (800ddc8 <APP_BLE_Init+0xcc>)
 800dd90:	2280      	movs	r2, #128	; 0x80
 800dd92:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800dd94:	4b0d      	ldr	r3, [pc, #52]	; (800ddcc <APP_BLE_Init+0xd0>)
 800dd96:	22a0      	movs	r2, #160	; 0xa0
 800dd98:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	f000 f9ae 	bl	800e0fc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800dda0:	bf00      	nop
}
 800dda2:	3730      	adds	r7, #48	; 0x30
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bdb0      	pop	{r4, r5, r7, pc}
 800dda8:	0800efd4 	.word	0x0800efd4
 800ddac:	0800d23d 	.word	0x0800d23d
 800ddb0:	20000278 	.word	0x20000278
 800ddb4:	0800e269 	.word	0x0800e269
 800ddb8:	0800e29d 	.word	0x0800e29d
 800ddbc:	20000309 	.word	0x20000309
 800ddc0:	0800e2ad 	.word	0x0800e2ad
 800ddc4:	2000030a 	.word	0x2000030a
 800ddc8:	2000030c 	.word	0x2000030c
 800ddcc:	2000030e 	.word	0x2000030e

0800ddd0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08a      	sub	sp, #40	; 0x28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ddd8:	2342      	movs	r3, #66	; 0x42
 800ddda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3301      	adds	r3, #1
 800dde2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b3e      	cmp	r3, #62	; 0x3e
 800ddea:	d024      	beq.n	800de36 <SVCCTL_App_Notification+0x66>
 800ddec:	2bff      	cmp	r3, #255	; 0xff
 800ddee:	d070      	beq.n	800ded2 <SVCCTL_App_Notification+0x102>
 800ddf0:	2b05      	cmp	r3, #5
 800ddf2:	d000      	beq.n	800ddf6 <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800ddf4:	e086      	b.n	800df04 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	3302      	adds	r3, #2
 800ddfa:	61fb      	str	r3, [r7, #28]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800de02:	b29a      	uxth	r2, r3
 800de04:	4b42      	ldr	r3, [pc, #264]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de08:	429a      	cmp	r2, r3
 800de0a:	d106      	bne.n	800de1a <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800de0c:	4b40      	ldr	r3, [pc, #256]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de0e:	2200      	movs	r2, #0
 800de10:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800de12:	4b3f      	ldr	r3, [pc, #252]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de14:	2200      	movs	r2, #0
 800de16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800de1a:	2001      	movs	r0, #1
 800de1c:	f000 f96e 	bl	800e0fc <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800de20:	4b3c      	ldr	r3, [pc, #240]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800de22:	2201      	movs	r2, #1
 800de24:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800de26:	4b3a      	ldr	r3, [pc, #232]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de28:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800de2a:	4b3a      	ldr	r3, [pc, #232]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800de2c:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800de2e:	4839      	ldr	r0, [pc, #228]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800de30:	f000 fad8 	bl	800e3e4 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800de34:	e066      	b.n	800df04 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	3302      	adds	r3, #2
 800de3a:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b03      	cmp	r3, #3
 800de42:	d042      	beq.n	800deca <SVCCTL_App_Notification+0xfa>
 800de44:	2b0c      	cmp	r3, #12
 800de46:	d002      	beq.n	800de4e <SVCCTL_App_Notification+0x7e>
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d016      	beq.n	800de7a <SVCCTL_App_Notification+0xaa>
          break;
 800de4c:	e040      	b.n	800ded0 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	3301      	adds	r3, #1
 800de52:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800de54:	4b2e      	ldr	r3, [pc, #184]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de58:	f107 020a 	add.w	r2, r7, #10
 800de5c:	f107 010b 	add.w	r1, r7, #11
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe fd5e 	bl	800c922 <hci_le_read_phy>
 800de66:	4603      	mov	r3, r0
 800de68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800de6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de70:	2b00      	cmp	r3, #0
 800de72:	d12c      	bne.n	800dece <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800de74:	7afb      	ldrb	r3, [r7, #11]
 800de76:	2b02      	cmp	r3, #2
          break;
 800de78:	e029      	b.n	800dece <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	3301      	adds	r3, #1
 800de7e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800de80:	4b23      	ldr	r3, [pc, #140]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de82:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800de86:	4618      	mov	r0, r3
 800de88:	f7f3 fb22 	bl	80014d0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800de8c:	4b20      	ldr	r3, [pc, #128]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de8e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800de92:	2b04      	cmp	r3, #4
 800de94:	d104      	bne.n	800dea0 <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800de96:	4b1e      	ldr	r3, [pc, #120]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800de98:	2206      	movs	r2, #6
 800de9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800de9e:	e003      	b.n	800dea8 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800dea0:	4b1b      	ldr	r3, [pc, #108]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800dea2:	2205      	movs	r2, #5
 800dea4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800deae:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800deb0:	4b17      	ldr	r3, [pc, #92]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800deb2:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800deb4:	4b17      	ldr	r3, [pc, #92]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800deba:	4b15      	ldr	r3, [pc, #84]	; (800df10 <SVCCTL_App_Notification+0x140>)
 800debc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800debe:	4b15      	ldr	r3, [pc, #84]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800dec0:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800dec2:	4814      	ldr	r0, [pc, #80]	; (800df14 <SVCCTL_App_Notification+0x144>)
 800dec4:	f000 fa8e 	bl	800e3e4 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800dec8:	e002      	b.n	800ded0 <SVCCTL_App_Notification+0x100>
          break;
 800deca:	bf00      	nop
 800decc:	e01a      	b.n	800df04 <SVCCTL_App_Notification+0x134>
          break;
 800dece:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800ded0:	e018      	b.n	800df04 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	3302      	adds	r3, #2
 800ded6:	60fb      	str	r3, [r7, #12]
      switch (blue_evt->ecode)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	f240 4207 	movw	r2, #1031	; 0x407
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d00a      	beq.n	800defc <SVCCTL_App_Notification+0x12c>
 800dee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deea:	d009      	beq.n	800df00 <SVCCTL_App_Notification+0x130>
 800deec:	2b04      	cmp	r3, #4
 800deee:	d000      	beq.n	800def2 <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800def0:	e007      	b.n	800df02 <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800def2:	2101      	movs	r1, #1
 800def4:	4808      	ldr	r0, [pc, #32]	; (800df18 <SVCCTL_App_Notification+0x148>)
 800def6:	f7f9 fb4f 	bl	8007598 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800defa:	e002      	b.n	800df02 <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800defc:	bf00      	nop
 800defe:	e000      	b.n	800df02 <SVCCTL_App_Notification+0x132>
      break;
 800df00:	bf00      	nop
      break; /* EVT_VENDOR */
 800df02:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800df04:	2301      	movs	r3, #1
}
 800df06:	4618      	mov	r0, r3
 800df08:	3728      	adds	r7, #40	; 0x28
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000278 	.word	0x20000278
 800df14:	200006d0 	.word	0x200006d0
 800df18:	48000400 	.word	0x48000400

0800df1c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800df22:	4b06      	ldr	r3, [pc, #24]	; (800df3c <Ble_Tl_Init+0x20>)
 800df24:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800df26:	4b06      	ldr	r3, [pc, #24]	; (800df40 <Ble_Tl_Init+0x24>)
 800df28:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800df2a:	463b      	mov	r3, r7
 800df2c:	4619      	mov	r1, r3
 800df2e:	4805      	ldr	r0, [pc, #20]	; (800df44 <Ble_Tl_Init+0x28>)
 800df30:	f7ff f968 	bl	800d204 <hci_init>

  return;
 800df34:	bf00      	nop
}
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	200300b8 	.word	0x200300b8
 800df40:	0800e337 	.word	0x0800e337
 800df44:	0800e2ff 	.word	0x0800e2ff

0800df48 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800df48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df4a:	b091      	sub	sp, #68	; 0x44
 800df4c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800df4e:	2300      	movs	r3, #0
 800df50:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800df52:	f7fe fcbd 	bl	800c8d0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800df56:	f000 f943 	bl	800e1e0 <BleGetBdAddress>
 800df5a:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800df5c:	6a3a      	ldr	r2, [r7, #32]
 800df5e:	2106      	movs	r1, #6
 800df60:	2000      	movs	r0, #0
 800df62:	f7fe fb96 	bl	800c692 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	795a      	ldrb	r2, [r3, #5]
 800df6a:	4b5e      	ldr	r3, [pc, #376]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df6c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	791a      	ldrb	r2, [r3, #4]
 800df72:	4b5c      	ldr	r3, [pc, #368]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df74:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	78da      	ldrb	r2, [r3, #3]
 800df7a:	4b5a      	ldr	r3, [pc, #360]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df7c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	789a      	ldrb	r2, [r3, #2]
 800df82:	4b58      	ldr	r3, [pc, #352]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df84:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800df86:	6a3b      	ldr	r3, [r7, #32]
 800df88:	785a      	ldrb	r2, [r3, #1]
 800df8a:	4b56      	ldr	r3, [pc, #344]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df8c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	781a      	ldrb	r2, [r3, #0]
 800df92:	4b54      	ldr	r3, [pc, #336]	; (800e0e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800df94:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800df96:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800df9a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800df9c:	f7ff fe8a 	bl	800dcb4 <LL_FLASH_GetUDN>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800dfa4:	f107 0308 	add.w	r3, r7, #8
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	2106      	movs	r1, #6
 800dfac:	202e      	movs	r0, #46	; 0x2e
 800dfae:	f7fe fb70 	bl	800c692 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800dfb2:	4a4d      	ldr	r2, [pc, #308]	; (800e0e8 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800dfb4:	2110      	movs	r1, #16
 800dfb6:	2018      	movs	r0, #24
 800dfb8:	f7fe fb6b 	bl	800c692 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800dfbc:	4a4b      	ldr	r2, [pc, #300]	; (800e0ec <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800dfbe:	2110      	movs	r1, #16
 800dfc0:	2008      	movs	r0, #8
 800dfc2:	f7fe fb66 	bl	800c692 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800dfc6:	2118      	movs	r1, #24
 800dfc8:	2001      	movs	r0, #1
 800dfca:	f7fe fbd2 	bl	800c772 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800dfce:	f7fe f90f 	bl	800c1f0 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800dfd6:	7ffb      	ldrb	r3, [r7, #31]
 800dfd8:	f043 0301 	orr.w	r3, r3, #1
 800dfdc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800dfde:	7ffb      	ldrb	r3, [r7, #31]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d01e      	beq.n	800e022 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800dfe4:	4b42      	ldr	r3, [pc, #264]	; (800e0f0 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800dfe6:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800dfe8:	f107 0216 	add.w	r2, r7, #22
 800dfec:	7ff8      	ldrb	r0, [r7, #31]
 800dfee:	f107 0312 	add.w	r3, r7, #18
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	f107 0314 	add.w	r3, r7, #20
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	4613      	mov	r3, r2
 800dffc:	2207      	movs	r2, #7
 800dffe:	2100      	movs	r1, #0
 800e000:	f7fd ffdf 	bl	800bfc2 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800e004:	8afc      	ldrh	r4, [r7, #22]
 800e006:	8abd      	ldrh	r5, [r7, #20]
 800e008:	69b8      	ldr	r0, [r7, #24]
 800e00a:	f7f2 f8b9 	bl	8000180 <strlen>
 800e00e:	4603      	mov	r3, r0
 800e010:	b2da      	uxtb	r2, r3
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	4613      	mov	r3, r2
 800e018:	2200      	movs	r2, #0
 800e01a:	4629      	mov	r1, r5
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7fe faaa 	bl	800c576 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800e022:	8af8      	ldrh	r0, [r7, #22]
 800e024:	8a79      	ldrh	r1, [r7, #18]
 800e026:	1d3b      	adds	r3, r7, #4
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	2302      	movs	r3, #2
 800e02c:	2200      	movs	r2, #0
 800e02e:	f7fe faa2 	bl	800c576 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800e032:	2202      	movs	r2, #2
 800e034:	2102      	movs	r1, #2
 800e036:	2000      	movs	r0, #0
 800e038:	f7fe fcdb 	bl	800c9f2 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e03c:	4b2d      	ldr	r3, [pc, #180]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e03e:	2201      	movs	r2, #1
 800e040:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e042:	4b2c      	ldr	r3, [pc, #176]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	4618      	mov	r0, r3
 800e048:	f7fd febb 	bl	800bdc2 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e04c:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e04e:	2201      	movs	r2, #1
 800e050:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e054:	2200      	movs	r2, #0
 800e056:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800e058:	4b26      	ldr	r3, [pc, #152]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e05a:	2208      	movs	r2, #8
 800e05c:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800e05e:	4b25      	ldr	r3, [pc, #148]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e060:	2210      	movs	r2, #16
 800e062:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800e064:	4b23      	ldr	r3, [pc, #140]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e066:	2201      	movs	r2, #1
 800e068:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800e06a:	4b22      	ldr	r3, [pc, #136]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e06c:	4a22      	ldr	r2, [pc, #136]	; (800e0f8 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800e06e:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800e070:	4b20      	ldr	r3, [pc, #128]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e072:	2201      	movs	r2, #1
 800e074:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800e076:	2300      	movs	r3, #0
 800e078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e07c:	e00b      	b.n	800e096 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800e07e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e082:	4a1c      	ldr	r2, [pc, #112]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e084:	4413      	add	r3, r2
 800e086:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e08a:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800e08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e090:	3301      	adds	r3, #1
 800e092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e09a:	2b0f      	cmp	r3, #15
 800e09c:	d9ef      	bls.n	800e07e <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e09e:	4b15      	ldr	r3, [pc, #84]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0a0:	789d      	ldrb	r5, [r3, #2]
 800e0a2:	4b14      	ldr	r3, [pc, #80]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0a4:	785e      	ldrb	r6, [r3, #1]
 800e0a6:	4b13      	ldr	r3, [pc, #76]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0a8:	7d5b      	ldrb	r3, [r3, #21]
 800e0aa:	4a12      	ldr	r2, [pc, #72]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0ac:	7d92      	ldrb	r2, [r2, #22]
 800e0ae:	4911      	ldr	r1, [pc, #68]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0b0:	7d09      	ldrb	r1, [r1, #20]
 800e0b2:	4810      	ldr	r0, [pc, #64]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0b4:	6980      	ldr	r0, [r0, #24]
 800e0b6:	2400      	movs	r4, #0
 800e0b8:	9404      	str	r4, [sp, #16]
 800e0ba:	9003      	str	r0, [sp, #12]
 800e0bc:	9102      	str	r1, [sp, #8]
 800e0be:	9201      	str	r2, [sp, #4]
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f7fd fecb 	bl	800be64 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e0ce:	4b09      	ldr	r3, [pc, #36]	; (800e0f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e0d0:	789b      	ldrb	r3, [r3, #2]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800e0d6:	f7fe f862 	bl	800c19e <aci_gap_configure_whitelist>
   }
}
 800e0da:	bf00      	nop
 800e0dc:	372c      	adds	r7, #44	; 0x2c
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000168 	.word	0x20000168
 800e0e8:	0800f0b4 	.word	0x0800f0b4
 800e0ec:	0800f0c4 	.word	0x0800f0c4
 800e0f0:	0800f004 	.word	0x0800f004
 800e0f4:	20000278 	.word	0x20000278
 800e0f8:	0001b207 	.word	0x0001b207

0800e0fc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08c      	sub	sp, #48	; 0x30
 800e100:	af08      	add	r7, sp, #32
 800e102:	4603      	mov	r3, r0
 800e104:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e106:	2342      	movs	r3, #66	; 0x42
 800e108:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d106      	bne.n	800e11e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800e110:	4b2c      	ldr	r3, [pc, #176]	; (800e1c4 <Adv_Request+0xc8>)
 800e112:	881b      	ldrh	r3, [r3, #0]
 800e114:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800e116:	4b2c      	ldr	r3, [pc, #176]	; (800e1c8 <Adv_Request+0xcc>)
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	81bb      	strh	r3, [r7, #12]
 800e11c:	e005      	b.n	800e12a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800e11e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800e122:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800e124:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e128:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e12a:	4b28      	ldr	r3, [pc, #160]	; (800e1cc <Adv_Request+0xd0>)
 800e12c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e130:	4618      	mov	r0, r3
 800e132:	f7f3 f9cd 	bl	80014d0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800e136:	79fb      	ldrb	r3, [r7, #7]
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d10d      	bne.n	800e158 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800e13c:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <Adv_Request+0xd0>)
 800e13e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e142:	2b01      	cmp	r3, #1
 800e144:	d004      	beq.n	800e150 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800e146:	4b21      	ldr	r3, [pc, #132]	; (800e1cc <Adv_Request+0xd0>)
 800e148:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d103      	bne.n	800e158 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800e150:	f7fd fd29 	bl	800bba6 <aci_gap_set_non_discoverable>
 800e154:	4603      	mov	r3, r0
 800e156:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800e158:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <Adv_Request+0xd0>)
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800e160:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <Adv_Request+0xd0>)
 800e162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e166:	89b8      	ldrh	r0, [r7, #12]
 800e168:	89f9      	ldrh	r1, [r7, #14]
 800e16a:	2200      	movs	r2, #0
 800e16c:	9206      	str	r2, [sp, #24]
 800e16e:	2200      	movs	r2, #0
 800e170:	9205      	str	r2, [sp, #20]
 800e172:	4a17      	ldr	r2, [pc, #92]	; (800e1d0 <Adv_Request+0xd4>)
 800e174:	9204      	str	r2, [sp, #16]
 800e176:	9303      	str	r3, [sp, #12]
 800e178:	4b16      	ldr	r3, [pc, #88]	; (800e1d4 <Adv_Request+0xd8>)
 800e17a:	9302      	str	r3, [sp, #8]
 800e17c:	2308      	movs	r3, #8
 800e17e:	9301      	str	r3, [sp, #4]
 800e180:	2300      	movs	r3, #0
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	2300      	movs	r3, #0
 800e186:	4602      	mov	r2, r0
 800e188:	2000      	movs	r0, #0
 800e18a:	f7fd fd35 	bl	800bbf8 <aci_gap_set_discoverable>
 800e18e:	4603      	mov	r3, r0
 800e190:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800e192:	4911      	ldr	r1, [pc, #68]	; (800e1d8 <Adv_Request+0xdc>)
 800e194:	200e      	movs	r0, #14
 800e196:	f7fd ff9f 	bl	800c0d8 <aci_gap_update_adv_data>
 800e19a:	4603      	mov	r3, r0
 800e19c:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800e19e:	7afb      	ldrb	r3, [r7, #11]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10a      	bne.n	800e1ba <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d107      	bne.n	800e1ba <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <Adv_Request+0xd0>)
 800e1ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e1b0:	490a      	ldr	r1, [pc, #40]	; (800e1dc <Adv_Request+0xe0>)
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f3 fa16 	bl	80015e4 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800e1b8:	bf00      	nop
 800e1ba:	bf00      	nop
}
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	2000030c 	.word	0x2000030c
 800e1c8:	2000030e 	.word	0x2000030e
 800e1cc:	20000278 	.word	0x20000278
 800e1d0:	200002a1 	.word	0x200002a1
 800e1d4:	0800f0d4 	.word	0x0800f0d4
 800e1d8:	20000168 	.word	0x20000168
 800e1dc:	0001e046 	.word	0x0001e046

0800e1e0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e1e6:	f7ff fd65 	bl	800dcb4 <LL_FLASH_GetUDN>
 800e1ea:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f2:	d023      	beq.n	800e23c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e1f4:	f7ff fd76 	bl	800dce4 <LL_FLASH_GetSTCompanyID>
 800e1f8:	60f8      	str	r0, [r7, #12]
    device_id = LL_FLASH_GetDeviceID();
 800e1fa:	f7ff fd67 	bl	800dccc <LL_FLASH_GetDeviceID>
 800e1fe:	60b8      	str	r0, [r7, #8]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	b2da      	uxtb	r2, r3
 800e204:	4b16      	ldr	r3, [pc, #88]	; (800e260 <BleGetBdAddress+0x80>)
 800e206:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	0a1b      	lsrs	r3, r3, #8
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	4b14      	ldr	r3, [pc, #80]	; (800e260 <BleGetBdAddress+0x80>)
 800e210:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	0c1b      	lsrs	r3, r3, #16
 800e216:	b2da      	uxtb	r2, r3
 800e218:	4b11      	ldr	r3, [pc, #68]	; (800e260 <BleGetBdAddress+0x80>)
 800e21a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	4b0f      	ldr	r3, [pc, #60]	; (800e260 <BleGetBdAddress+0x80>)
 800e222:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	b2da      	uxtb	r2, r3
 800e228:	4b0d      	ldr	r3, [pc, #52]	; (800e260 <BleGetBdAddress+0x80>)
 800e22a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	0a1b      	lsrs	r3, r3, #8
 800e230:	b2da      	uxtb	r2, r3
 800e232:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <BleGetBdAddress+0x80>)
 800e234:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <BleGetBdAddress+0x80>)
 800e238:	617b      	str	r3, [r7, #20]
 800e23a:	e00b      	b.n	800e254 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800e23c:	2000      	movs	r0, #0
 800e23e:	f7ff fc5d 	bl	800dafc <OTP_Read>
 800e242:	6078      	str	r0, [r7, #4]
    if(otp_addr)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	617b      	str	r3, [r7, #20]
 800e24e:	e001      	b.n	800e254 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800e250:	4b04      	ldr	r3, [pc, #16]	; (800e264 <BleGetBdAddress+0x84>)
 800e252:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800e254:	697b      	ldr	r3, [r7, #20]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20000508 	.word	0x20000508
 800e264:	0800f0ac 	.word	0x0800f0ac

0800e268 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800e26e:	4b0a      	ldr	r3, [pc, #40]	; (800e298 <Adv_Cancel+0x30>)
 800e270:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e274:	2b05      	cmp	r3, #5
 800e276:	d00a      	beq.n	800e28e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800e278:	2300      	movs	r3, #0
 800e27a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800e27c:	f7fd fc93 	bl	800bba6 <aci_gap_set_non_discoverable>
 800e280:	4603      	mov	r3, r0
 800e282:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e284:	4b04      	ldr	r3, [pc, #16]	; (800e298 <Adv_Cancel+0x30>)
 800e286:	2200      	movs	r2, #0
 800e288:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800e28c:	bf00      	nop
 800e28e:	bf00      	nop
}
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000278 	.word	0x20000278

0800e29c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	f000 fcfc 	bl	800eca0 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800e2a8:	bf00      	nop
}
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800e2b0:	bf00      	nop
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	2004      	movs	r0, #4
 800e2c6:	f000 fceb 	bl	800eca0 <UTIL_SEQ_SetTask>
  return;
 800e2ca:	bf00      	nop
}
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e2da:	2001      	movs	r0, #1
 800e2dc:	f000 fd46 	bl	800ed6c <UTIL_SEQ_SetEvt>
  return;
 800e2e0:	bf00      	nop
}
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e2f0:	2001      	movs	r0, #1
 800e2f2:	f000 fd59 	bl	800eda8 <UTIL_SEQ_WaitEvt>
  return;
 800e2f6:	bf00      	nop
}
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	3308      	adds	r3, #8
 800e310:	4618      	mov	r0, r3
 800e312:	f7fe fdd1 	bl	800ceb8 <SVCCTL_UserEvtRx>
 800e316:	4603      	mov	r3, r0
 800e318:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e31a:	7afb      	ldrb	r3, [r7, #11]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2201      	movs	r2, #1
 800e324:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800e326:	e002      	b.n	800e32e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	701a      	strb	r2, [r3, #0]
}
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	4603      	mov	r3, r0
 800e33e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <BLE_StatusNot+0x16>
 800e346:	2b01      	cmp	r3, #1
 800e348:	d006      	beq.n	800e358 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800e34a:	e00b      	b.n	800e364 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e34c:	231f      	movs	r3, #31
 800e34e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 fccf 	bl	800ecf4 <UTIL_SEQ_PauseTask>
      break;
 800e356:	e005      	b.n	800e364 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e358:	231f      	movs	r3, #31
 800e35a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f000 fce7 	bl	800ed30 <UTIL_SEQ_ResumeTask>
      break;
 800e362:	bf00      	nop
  }
  return;
 800e364:	bf00      	nop
}
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <P2PS_STM_App_Notification>:
static void P2PS_Send_Notification(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d026      	beq.n	800e3ca <P2PS_STM_App_Notification+0x5e>
 800e37c:	2b03      	cmp	r3, #3
 800e37e:	d002      	beq.n	800e386 <P2PS_STM_App_Notification+0x1a>
 800e380:	2b00      	cmp	r3, #0
 800e382:	d024      	beq.n	800e3ce <P2PS_STM_App_Notification+0x62>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800e384:	e026      	b.n	800e3d4 <P2PS_STM_App_Notification+0x68>
    	if(pNotification->DataTransfered.pPayload[0] == 0x01)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d120      	bne.n	800e3d2 <P2PS_STM_App_Notification+0x66>
    			if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	3301      	adds	r3, #1
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d107      	bne.n	800e3ac <P2PS_STM_App_Notification+0x40>
    			  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800e39c:	2201      	movs	r2, #1
 800e39e:	2120      	movs	r1, #32
 800e3a0:	480e      	ldr	r0, [pc, #56]	; (800e3dc <P2PS_STM_App_Notification+0x70>)
 800e3a2:	f7f9 f8e1 	bl	8007568 <HAL_GPIO_WritePin>
    			  P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800e3a6:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <P2PS_STM_App_Notification+0x74>)
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	709a      	strb	r2, [r3, #2]
    			if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10c      	bne.n	800e3d2 <P2PS_STM_App_Notification+0x66>
    			  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2120      	movs	r1, #32
 800e3bc:	4807      	ldr	r0, [pc, #28]	; (800e3dc <P2PS_STM_App_Notification+0x70>)
 800e3be:	f7f9 f8d3 	bl	8007568 <HAL_GPIO_WritePin>
    			  P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800e3c2:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <P2PS_STM_App_Notification+0x74>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	709a      	strb	r2, [r3, #2]
      break;
 800e3c8:	e003      	b.n	800e3d2 <P2PS_STM_App_Notification+0x66>
      break;
 800e3ca:	bf00      	nop
 800e3cc:	e002      	b.n	800e3d4 <P2PS_STM_App_Notification+0x68>
      break;
 800e3ce:	bf00      	nop
 800e3d0:	e000      	b.n	800e3d4 <P2PS_STM_App_Notification+0x68>
      break;
 800e3d2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800e3d4:	bf00      	nop
}
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	48000400 	.word	0x48000400
 800e3e0:	20000310 	.word	0x20000310

0800e3e4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <P2PS_APP_Notification+0x16>
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d002      	beq.n	800e3fe <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800e3f8:	e002      	b.n	800e400 <P2PS_APP_Notification+0x1c>
    break;
 800e3fa:	bf00      	nop
 800e3fc:	e000      	b.n	800e400 <P2PS_APP_Notification+0x1c>
    break;
 800e3fe:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800e400:	bf00      	nop
}
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800e410:	4a03      	ldr	r2, [pc, #12]	; (800e420 <P2PS_APP_Init+0x14>)
 800e412:	2100      	movs	r1, #0
 800e414:	2002      	movs	r0, #2
 800e416:	f000 fc23 	bl	800ec60 <UTIL_SEQ_RegTask>
/* USER CODE END P2PS_APP_Init */
  return;
 800e41a:	bf00      	nop
}
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	0800e425 	.word	0x0800e425

0800e424 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
    if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800e428:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <P2PS_Send_Notification+0x34>)
 800e42a:	791b      	ldrb	r3, [r3, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d103      	bne.n	800e438 <P2PS_Send_Notification+0x14>
     P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800e430:	4b09      	ldr	r3, [pc, #36]	; (800e458 <P2PS_Send_Notification+0x34>)
 800e432:	2201      	movs	r2, #1
 800e434:	711a      	strb	r2, [r3, #4]
 800e436:	e002      	b.n	800e43e <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800e438:	4b07      	ldr	r3, [pc, #28]	; (800e458 <P2PS_Send_Notification+0x34>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	711a      	strb	r2, [r3, #4]
  }

  if(P2P_Server_App_Context.Notification_Status){
 800e43e:	4b06      	ldr	r3, [pc, #24]	; (800e458 <P2PS_Send_Notification+0x34>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d005      	beq.n	800e452 <P2PS_Send_Notification+0x2e>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 800e446:	4905      	ldr	r1, [pc, #20]	; (800e45c <P2PS_Send_Notification+0x38>)
 800e448:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800e44c:	f7fe fc62 	bl	800cd14 <P2PS_STM_App_Update_Char>
  } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
  }

  return;
 800e450:	bf00      	nop
 800e452:	bf00      	nop
}
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20000310 	.word	0x20000310
 800e45c:	20000313 	.word	0x20000313

0800e460 <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 800e464:	2100      	movs	r1, #0
 800e466:	2010      	movs	r0, #16
 800e468:	f000 fc1a 	bl	800eca0 <UTIL_SEQ_SetTask>
}
 800e46c:	bf00      	nop
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d00e      	beq.n	800e49e <TEMPLATE_STM_App_Notification+0x2e>
 800e480:	2b03      	cmp	r3, #3
 800e482:	d015      	beq.n	800e4b0 <TEMPLATE_STM_App_Notification+0x40>
 800e484:	2b00      	cmp	r3, #0
 800e486:	d000      	beq.n	800e48a <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800e488:	e013      	b.n	800e4b2 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800e48a:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <TEMPLATE_STM_App_Notification+0x4c>)
 800e48c:	2201      	movs	r2, #1
 800e48e:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 800e490:	4b0a      	ldr	r3, [pc, #40]	; (800e4bc <TEMPLATE_STM_App_Notification+0x4c>)
 800e492:	7b1b      	ldrb	r3, [r3, #12]
 800e494:	21cc      	movs	r1, #204	; 0xcc
 800e496:	4618      	mov	r0, r3
 800e498:	f7f3 f8a4 	bl	80015e4 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800e49c:	e009      	b.n	800e4b2 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800e49e:	4b07      	ldr	r3, [pc, #28]	; (800e4bc <TEMPLATE_STM_App_Notification+0x4c>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 800e4a4:	4b05      	ldr	r3, [pc, #20]	; (800e4bc <TEMPLATE_STM_App_Notification+0x4c>)
 800e4a6:	7b1b      	ldrb	r3, [r3, #12]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7f3 f811 	bl	80014d0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800e4ae:	e000      	b.n	800e4b2 <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800e4b0:	bf00      	nop
  }

  return;
 800e4b2:	bf00      	nop
}
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20000318 	.word	0x20000318

0800e4c0 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800e4c4:	4a08      	ldr	r2, [pc, #32]	; (800e4e8 <TEMPLATE_APP_Init+0x28>)
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	2010      	movs	r0, #16
 800e4ca:	f000 fbc9 	bl	800ec60 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
	HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800e4ce:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <TEMPLATE_APP_Init+0x2c>)
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	4907      	ldr	r1, [pc, #28]	; (800e4f0 <TEMPLATE_APP_Init+0x30>)
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	f7f2 ff85 	bl	80013e4 <HW_TS_Create>
	  TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800e4da:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <TEMPLATE_APP_Init+0x34>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800e4e0:	f000 f80a 	bl	800e4f8 <TEMPLATE_APP_context_Init>
  return;
 800e4e4:	bf00      	nop
}
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0800e529 	.word	0x0800e529
 800e4ec:	0800e461 	.word	0x0800e461
 800e4f0:	20000324 	.word	0x20000324
 800e4f4:	20000318 	.word	0x20000318

0800e4f8 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
/*	TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;*/
	  TEMPLATE_Server_App_Context.Parameter.Axis_X = 10;
 800e4fc:	4b09      	ldr	r3, [pc, #36]	; (800e524 <TEMPLATE_APP_context_Init+0x2c>)
 800e4fe:	220a      	movs	r2, #10
 800e500:	809a      	strh	r2, [r3, #4]
	  TEMPLATE_Server_App_Context.Parameter.Axis_Y = 10;
 800e502:	4b08      	ldr	r3, [pc, #32]	; (800e524 <TEMPLATE_APP_context_Init+0x2c>)
 800e504:	220a      	movs	r2, #10
 800e506:	80da      	strh	r2, [r3, #6]
	  TEMPLATE_Server_App_Context.Parameter.Axis_Z = 0;
 800e508:	4b06      	ldr	r3, [pc, #24]	; (800e524 <TEMPLATE_APP_context_Init+0x2c>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	811a      	strh	r2, [r3, #8]
	  TEMPLATE_Server_App_Context.Parameter.Timestamp = 0;
 800e50e:	4b05      	ldr	r3, [pc, #20]	; (800e524 <TEMPLATE_APP_context_Init+0x2c>)
 800e510:	2200      	movs	r2, #0
 800e512:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800e514:	4b03      	ldr	r3, [pc, #12]	; (800e524 <TEMPLATE_APP_context_Init+0x2c>)
 800e516:	220a      	movs	r2, #10
 800e518:	815a      	strh	r2, [r3, #10]
}
 800e51a:	bf00      	nop
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	20000318 	.word	0x20000318

0800e528 <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
	  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
	  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
	  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
	  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
*/
	  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Timestamp & 0x00FF);
 800e52e:	4b35      	ldr	r3, [pc, #212]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e530:	885b      	ldrh	r3, [r3, #2]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	703b      	strb	r3, [r7, #0]
	  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Timestamp >> 8);
 800e536:	4b33      	ldr	r3, [pc, #204]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e538:	885b      	ldrh	r3, [r3, #2]
 800e53a:	0a1b      	lsrs	r3, r3, #8
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	707b      	strb	r3, [r7, #1]
	  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_X & 0x00FF);
 800e542:	4b30      	ldr	r3, [pc, #192]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e544:	889b      	ldrh	r3, [r3, #4]
 800e546:	b2db      	uxtb	r3, r3
 800e548:	70bb      	strb	r3, [r7, #2]
	  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_X >> 8);
 800e54a:	4b2e      	ldr	r3, [pc, #184]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e54c:	889b      	ldrh	r3, [r3, #4]
 800e54e:	0a1b      	lsrs	r3, r3, #8
 800e550:	b29b      	uxth	r3, r3
 800e552:	b2db      	uxtb	r3, r3
 800e554:	70fb      	strb	r3, [r7, #3]
	  value[4] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_Y & 0x00FF);
 800e556:	4b2b      	ldr	r3, [pc, #172]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e558:	88db      	ldrh	r3, [r3, #6]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	713b      	strb	r3, [r7, #4]
	  value[5] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_Y >> 8);
 800e55e:	4b29      	ldr	r3, [pc, #164]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e560:	88db      	ldrh	r3, [r3, #6]
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	b2db      	uxtb	r3, r3
 800e568:	717b      	strb	r3, [r7, #5]
	  value[6] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_Z & 0x00FF);
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e56c:	891b      	ldrh	r3, [r3, #8]
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	71bb      	strb	r3, [r7, #6]
	  value[7] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Axis_Z >> 8);
 800e572:	4b24      	ldr	r3, [pc, #144]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e574:	891b      	ldrh	r3, [r3, #8]
 800e576:	0a1b      	lsrs	r3, r3, #8
 800e578:	b29b      	uxth	r3, r3
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	71fb      	strb	r3, [r7, #7]
	  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
	  {
	    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
	  }
*/
	  TEMPLATE_Server_App_Context.Parameter.Axis_X += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800e57e:	4b21      	ldr	r3, [pc, #132]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e580:	889a      	ldrh	r2, [r3, #4]
 800e582:	4b20      	ldr	r3, [pc, #128]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e584:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e588:	b29b      	uxth	r3, r3
 800e58a:	4413      	add	r3, r2
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	4b1d      	ldr	r3, [pc, #116]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e590:	809a      	strh	r2, [r3, #4]
	  TEMPLATE_Server_App_Context.Parameter.Axis_Y += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800e592:	4b1c      	ldr	r3, [pc, #112]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e594:	88da      	ldrh	r2, [r3, #6]
 800e596:	4b1b      	ldr	r3, [pc, #108]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e598:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	4413      	add	r3, r2
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	4b18      	ldr	r3, [pc, #96]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5a4:	80da      	strh	r2, [r3, #6]
	  TEMPLATE_Server_App_Context.Parameter.Axis_Z += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800e5a6:	4b17      	ldr	r3, [pc, #92]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5a8:	891a      	ldrh	r2, [r3, #8]
 800e5aa:	4b16      	ldr	r3, [pc, #88]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	4413      	add	r3, r2
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	4b13      	ldr	r3, [pc, #76]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5b8:	811a      	strh	r2, [r3, #8]

	  TEMPLATE_Server_App_Context.Parameter.Timestamp += PARAMETER_CHANGE_STEP;
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5bc:	885b      	ldrh	r3, [r3, #2]
 800e5be:	330a      	adds	r3, #10
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	4b10      	ldr	r3, [pc, #64]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5c4:	805a      	strh	r2, [r3, #2]
	  if (TEMPLATE_Server_App_Context.Parameter.Axis_X > PARAMETER_VALUE_MAX_THRESHOLD)
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5c8:	889b      	ldrh	r3, [r3, #4]
 800e5ca:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800e5ce:	d904      	bls.n	800e5da <TEMPLATE_Send_Notification_Task+0xb2>
	  {
		  TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5d2:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800e5d6:	815a      	strh	r2, [r3, #10]
 800e5d8:	e006      	b.n	800e5e8 <TEMPLATE_Send_Notification_Task+0xc0>
	  } else if (TEMPLATE_Server_App_Context.Parameter.Axis_X < PARAMETER_VALUE_MIN_THRESHOLD)
 800e5da:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5dc:	889b      	ldrh	r3, [r3, #4]
 800e5de:	2b63      	cmp	r3, #99	; 0x63
 800e5e0:	d802      	bhi.n	800e5e8 <TEMPLATE_Send_Notification_Task+0xc0>
	  {
		  TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 800e5e2:	4b08      	ldr	r3, [pc, #32]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	815a      	strh	r2, [r3, #10]
	  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <TEMPLATE_Send_Notification_Task+0xdc>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <TEMPLATE_Send_Notification_Task+0xd4>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800e5f0:	463b      	mov	r3, r7
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	f7fe fdcd 	bl	800d194 <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800e5fa:	bf00      	nop
 800e5fc:	bf00      	nop
}
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20000318 	.word	0x20000318

0800e608 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800e608:	b480      	push	{r7}
 800e60a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e60c:	4a05      	ldr	r2, [pc, #20]	; (800e624 <LL_PWR_EnableBootC2+0x1c>)
 800e60e:	4b05      	ldr	r3, [pc, #20]	; (800e624 <LL_PWR_EnableBootC2+0x1c>)
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e616:	60d3      	str	r3, [r2, #12]
}
 800e618:	bf00      	nop
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	58000400 	.word	0x58000400

0800e628 <LL_AHB3_GRP1_EnableClock>:
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4013      	ands	r3, r2
 800e64a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e64c:	68fb      	ldr	r3, [r7, #12]
}
 800e64e:	bf00      	nop
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e65a:	b480      	push	{r7}
 800e65c:	b083      	sub	sp, #12
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	601a      	str	r2, [r3, #0]
}
 800e66e:	bf00      	nop
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f043 0201 	orr.w	r2, r3, #1
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	601a      	str	r2, [r3, #0]
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	041b      	lsls	r3, r3, #16
 800e6ac:	43db      	mvns	r3, r3
 800e6ae:	401a      	ands	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	605a      	str	r2, [r3, #4]
}
 800e6b4:	bf00      	nop
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	041b      	lsls	r3, r3, #16
 800e6d2:	431a      	orrs	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	605a      	str	r2, [r3, #4]
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	685a      	ldr	r2, [r3, #4]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	43db      	mvns	r3, r3
 800e6f6:	401a      	ands	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	605a      	str	r2, [r3, #4]
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	609a      	str	r2, [r3, #8]
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	041a      	lsls	r2, r3, #16
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	609a      	str	r2, [r3, #8]
}
 800e736:	bf00      	nop
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e742:	b480      	push	{r7}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68da      	ldr	r2, [r3, #12]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	401a      	ands	r2, r3
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d101      	bne.n	800e75e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e75a:	2301      	movs	r3, #1
 800e75c:	e000      	b.n	800e760 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	69da      	ldr	r2, [r3, #28]
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	401a      	ands	r2, r3
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d101      	bne.n	800e788 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e784:	2301      	movs	r3, #1
 800e786:	e000      	b.n	800e78a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e788:	2300      	movs	r3, #0
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
	...

0800e798 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e79c:	2102      	movs	r1, #2
 800e79e:	4819      	ldr	r0, [pc, #100]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7a0:	f7ff ffe4 	bl	800e76c <LL_C2_IPCC_IsActiveFlag_CHx>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d009      	beq.n	800e7be <HW_IPCC_Rx_Handler+0x26>
 800e7aa:	4b16      	ldr	r3, [pc, #88]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	43db      	mvns	r3, r3
 800e7b0:	f003 0302 	and.w	r3, r3, #2
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800e7b8:	f000 f8de 	bl	800e978 <HW_IPCC_SYS_EvtHandler>
 800e7bc:	e01f      	b.n	800e7fe <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e7be:	2101      	movs	r1, #1
 800e7c0:	4810      	ldr	r0, [pc, #64]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7c2:	f7ff ffd3 	bl	800e76c <LL_C2_IPCC_IsActiveFlag_CHx>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d008      	beq.n	800e7de <HW_IPCC_Rx_Handler+0x46>
 800e7cc:	4b0d      	ldr	r3, [pc, #52]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800e7d8:	f000 f892 	bl	800e900 <HW_IPCC_BLE_EvtHandler>
 800e7dc:	e00f      	b.n	800e7fe <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e7de:	2108      	movs	r1, #8
 800e7e0:	4808      	ldr	r0, [pc, #32]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7e2:	f7ff ffc3 	bl	800e76c <LL_C2_IPCC_IsActiveFlag_CHx>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d009      	beq.n	800e800 <HW_IPCC_Rx_Handler+0x68>
 800e7ec:	4b05      	ldr	r3, [pc, #20]	; (800e804 <HW_IPCC_Rx_Handler+0x6c>)
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	43db      	mvns	r3, r3
 800e7f2:	f003 0308 	and.w	r3, r3, #8
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e7fa:	f000 f909 	bl	800ea10 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
}
 800e802:	bd80      	pop	{r7, pc}
 800e804:	58000c00 	.word	0x58000c00

0800e808 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e80c:	2102      	movs	r1, #2
 800e80e:	4822      	ldr	r0, [pc, #136]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e810:	f7ff ff97 	bl	800e742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d109      	bne.n	800e82e <HW_IPCC_Tx_Handler+0x26>
 800e81a:	4b1f      	ldr	r3, [pc, #124]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	43db      	mvns	r3, r3
 800e820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e828:	f000 f89a 	bl	800e960 <HW_IPCC_SYS_CmdEvtHandler>
 800e82c:	e031      	b.n	800e892 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e82e:	2102      	movs	r1, #2
 800e830:	4819      	ldr	r0, [pc, #100]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e832:	f7ff ff86 	bl	800e742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d109      	bne.n	800e850 <HW_IPCC_Tx_Handler+0x48>
 800e83c:	4b16      	ldr	r3, [pc, #88]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	43db      	mvns	r3, r3
 800e842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e84a:	f000 f889 	bl	800e960 <HW_IPCC_SYS_CmdEvtHandler>
 800e84e:	e020      	b.n	800e892 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e850:	2108      	movs	r1, #8
 800e852:	4811      	ldr	r0, [pc, #68]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e854:	f7ff ff75 	bl	800e742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d109      	bne.n	800e872 <HW_IPCC_Tx_Handler+0x6a>
 800e85e:	4b0e      	ldr	r3, [pc, #56]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	43db      	mvns	r3, r3
 800e864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e86c:	f000 f8b2 	bl	800e9d4 <HW_IPCC_MM_FreeBufHandler>
 800e870:	e00f      	b.n	800e892 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e872:	2120      	movs	r1, #32
 800e874:	4808      	ldr	r0, [pc, #32]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e876:	f7ff ff64 	bl	800e742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d109      	bne.n	800e894 <HW_IPCC_Tx_Handler+0x8c>
 800e880:	4b05      	ldr	r3, [pc, #20]	; (800e898 <HW_IPCC_Tx_Handler+0x90>)
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	43db      	mvns	r3, r3
 800e886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d002      	beq.n	800e894 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e88e:	f000 f843 	bl	800e918 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e892:	bf00      	nop
 800e894:	bf00      	nop
}
 800e896:	bd80      	pop	{r7, pc}
 800e898:	58000c00 	.word	0x58000c00

0800e89c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e8a0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e8a2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e8a4:	f7ff feb0 	bl	800e608 <LL_PWR_EnableBootC2>

  return;
 800e8a8:	bf00      	nop
}
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e8b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e8b4:	f7ff feb8 	bl	800e628 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e8b8:	4806      	ldr	r0, [pc, #24]	; (800e8d4 <HW_IPCC_Init+0x28>)
 800e8ba:	f7ff fede 	bl	800e67a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e8be:	4805      	ldr	r0, [pc, #20]	; (800e8d4 <HW_IPCC_Init+0x28>)
 800e8c0:	f7ff fecb 	bl	800e65a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e8c4:	202c      	movs	r0, #44	; 0x2c
 800e8c6:	f7f8 fb5e 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e8ca:	202d      	movs	r0, #45	; 0x2d
 800e8cc:	f7f8 fb5b 	bl	8006f86 <HAL_NVIC_EnableIRQ>

  return;
 800e8d0:	bf00      	nop
}
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	58000c00 	.word	0x58000c00

0800e8d8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e8dc:	2101      	movs	r1, #1
 800e8de:	4802      	ldr	r0, [pc, #8]	; (800e8e8 <HW_IPCC_BLE_Init+0x10>)
 800e8e0:	f7ff ff00 	bl	800e6e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e8e4:	bf00      	nop
}
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	58000c00 	.word	0x58000c00

0800e8ec <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e8f0:	2101      	movs	r1, #1
 800e8f2:	4802      	ldr	r0, [pc, #8]	; (800e8fc <HW_IPCC_BLE_SendCmd+0x10>)
 800e8f4:	f7ff ff16 	bl	800e724 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e8f8:	bf00      	nop
}
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	58000c00 	.word	0x58000c00

0800e900 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e904:	f7fe ffc4 	bl	800d890 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e908:	2101      	movs	r1, #1
 800e90a:	4802      	ldr	r0, [pc, #8]	; (800e914 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e90c:	f7ff fefc 	bl	800e708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e910:	bf00      	nop
}
 800e912:	bd80      	pop	{r7, pc}
 800e914:	58000c00 	.word	0x58000c00

0800e918 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e91c:	2120      	movs	r1, #32
 800e91e:	4803      	ldr	r0, [pc, #12]	; (800e92c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e920:	f7ff fece 	bl	800e6c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e924:	f7fe ffd0 	bl	800d8c8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e928:	bf00      	nop
}
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	58000c00 	.word	0x58000c00

0800e930 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e934:	2102      	movs	r1, #2
 800e936:	4802      	ldr	r0, [pc, #8]	; (800e940 <HW_IPCC_SYS_Init+0x10>)
 800e938:	f7ff fed4 	bl	800e6e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e93c:	bf00      	nop
}
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	58000c00 	.word	0x58000c00

0800e944 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e948:	2102      	movs	r1, #2
 800e94a:	4804      	ldr	r0, [pc, #16]	; (800e95c <HW_IPCC_SYS_SendCmd+0x18>)
 800e94c:	f7ff feea 	bl	800e724 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e950:	2102      	movs	r1, #2
 800e952:	4802      	ldr	r0, [pc, #8]	; (800e95c <HW_IPCC_SYS_SendCmd+0x18>)
 800e954:	f7ff fea1 	bl	800e69a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e958:	bf00      	nop
}
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	58000c00 	.word	0x58000c00

0800e960 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e964:	2102      	movs	r1, #2
 800e966:	4803      	ldr	r0, [pc, #12]	; (800e974 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e968:	f7ff feaa 	bl	800e6c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e96c:	f7fe fff4 	bl	800d958 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e970:	bf00      	nop
}
 800e972:	bd80      	pop	{r7, pc}
 800e974:	58000c00 	.word	0x58000c00

0800e978 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e97c:	f7fe fffc 	bl	800d978 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e980:	2102      	movs	r1, #2
 800e982:	4802      	ldr	r0, [pc, #8]	; (800e98c <HW_IPCC_SYS_EvtHandler+0x14>)
 800e984:	f7ff fec0 	bl	800e708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e988:	bf00      	nop
}
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	58000c00 	.word	0x58000c00

0800e990 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e998:	2108      	movs	r1, #8
 800e99a:	480c      	ldr	r0, [pc, #48]	; (800e9cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e99c:	f7ff fed1 	bl	800e742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d007      	beq.n	800e9b6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e9a6:	4a0a      	ldr	r2, [pc, #40]	; (800e9d0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e9ac:	2108      	movs	r1, #8
 800e9ae:	4807      	ldr	r0, [pc, #28]	; (800e9cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e9b0:	f7ff fe73 	bl	800e69a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e9b4:	e006      	b.n	800e9c4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e9ba:	2108      	movs	r1, #8
 800e9bc:	4803      	ldr	r0, [pc, #12]	; (800e9cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e9be:	f7ff feb1 	bl	800e724 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e9c2:	bf00      	nop
}
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	58000c00 	.word	0x58000c00
 800e9d0:	20000510 	.word	0x20000510

0800e9d4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e9d8:	2108      	movs	r1, #8
 800e9da:	4806      	ldr	r0, [pc, #24]	; (800e9f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e9dc:	f7ff fe70 	bl	800e6c0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e9e0:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e9e6:	2108      	movs	r1, #8
 800e9e8:	4802      	ldr	r0, [pc, #8]	; (800e9f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e9ea:	f7ff fe9b 	bl	800e724 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e9ee:	bf00      	nop
}
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	58000c00 	.word	0x58000c00
 800e9f8:	20000510 	.word	0x20000510

0800e9fc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ea00:	2108      	movs	r1, #8
 800ea02:	4802      	ldr	r0, [pc, #8]	; (800ea0c <HW_IPCC_TRACES_Init+0x10>)
 800ea04:	f7ff fe6e 	bl	800e6e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ea08:	bf00      	nop
}
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	58000c00 	.word	0x58000c00

0800ea10 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ea14:	f7ff f84e 	bl	800dab4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ea18:	2108      	movs	r1, #8
 800ea1a:	4802      	ldr	r0, [pc, #8]	; (800ea24 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ea1c:	f7ff fe74 	bl	800e708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ea20:	bf00      	nop
}
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	58000c00 	.word	0x58000c00

0800ea28 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800ea28:	b480      	push	{r7}
 800ea2a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ea2c:	4b05      	ldr	r3, [pc, #20]	; (800ea44 <UTIL_LPM_Init+0x1c>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ea32:	4b05      	ldr	r3, [pc, #20]	; (800ea48 <UTIL_LPM_Init+0x20>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ea38:	bf00      	nop
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20000514 	.word	0x20000514
 800ea48:	20000518 	.word	0x20000518

0800ea4c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b087      	sub	sp, #28
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea58:	f3ef 8310 	mrs	r3, PRIMASK
 800ea5c:	613b      	str	r3, [r7, #16]
  return(result);
 800ea5e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ea60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea62:	b672      	cpsid	i
  
  switch(state)
 800ea64:	78fb      	ldrb	r3, [r7, #3]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d009      	beq.n	800ea7e <UTIL_LPM_SetOffMode+0x32>
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d000      	beq.n	800ea70 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800ea6e:	e00e      	b.n	800ea8e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800ea70:	4b0c      	ldr	r3, [pc, #48]	; (800eaa4 <UTIL_LPM_SetOffMode+0x58>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	4a0a      	ldr	r2, [pc, #40]	; (800eaa4 <UTIL_LPM_SetOffMode+0x58>)
 800ea7a:	6013      	str	r3, [r2, #0]
      break;
 800ea7c:	e007      	b.n	800ea8e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	43da      	mvns	r2, r3
 800ea82:	4b08      	ldr	r3, [pc, #32]	; (800eaa4 <UTIL_LPM_SetOffMode+0x58>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4013      	ands	r3, r2
 800ea88:	4a06      	ldr	r2, [pc, #24]	; (800eaa4 <UTIL_LPM_SetOffMode+0x58>)
 800ea8a:	6013      	str	r3, [r2, #0]
      break;
 800ea8c:	bf00      	nop
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ea98:	bf00      	nop
 800ea9a:	371c      	adds	r7, #28
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr
 800eaa4:	20000518 	.word	0x20000518

0800eaa8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08c      	sub	sp, #48	; 0x30
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800eab0:	4b63      	ldr	r3, [pc, #396]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800eab6:	4b62      	ldr	r3, [pc, #392]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4013      	ands	r3, r2
 800eabe:	4a60      	ldr	r2, [pc, #384]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800eac0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800eac2:	e081      	b.n	800ebc8 <UTIL_SEQ_Run+0x120>
  {
    counter = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800eac8:	e002      	b.n	800ead0 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	3301      	adds	r3, #1
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800ead0:	4a5c      	ldr	r2, [pc, #368]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ead8:	4b5b      	ldr	r3, [pc, #364]	; (800ec48 <UTIL_SEQ_Run+0x1a0>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	401a      	ands	r2, r3
 800eade:	4b58      	ldr	r3, [pc, #352]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4013      	ands	r3, r2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d0f0      	beq.n	800eaca <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800eae8:	4a56      	ldr	r2, [pc, #344]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eaf0:	4b55      	ldr	r3, [pc, #340]	; (800ec48 <UTIL_SEQ_Run+0x1a0>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	401a      	ands	r2, r3
 800eaf6:	4b52      	ldr	r3, [pc, #328]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4013      	ands	r3, r2
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800eafe:	4a51      	ldr	r2, [pc, #324]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	4413      	add	r3, r2
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800eb10:	4a4c      	ldr	r2, [pc, #304]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	4413      	add	r3, r2
 800eb18:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800eb1e:	4a49      	ldr	r2, [pc, #292]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	4413      	add	r3, r2
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 f97d 	bl	800ee2c <bit_position>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4b45      	ldr	r3, [pc, #276]	; (800ec4c <UTIL_SEQ_Run+0x1a4>)
 800eb36:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800eb38:	4a42      	ldr	r2, [pc, #264]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	00db      	lsls	r3, r3, #3
 800eb3e:	4413      	add	r3, r2
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	4a42      	ldr	r2, [pc, #264]	; (800ec4c <UTIL_SEQ_Run+0x1a4>)
 800eb44:	6812      	ldr	r2, [r2, #0]
 800eb46:	2101      	movs	r1, #1
 800eb48:	fa01 f202 	lsl.w	r2, r1, r2
 800eb4c:	43d2      	mvns	r2, r2
 800eb4e:	401a      	ands	r2, r3
 800eb50:	493c      	ldr	r1, [pc, #240]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	00db      	lsls	r3, r3, #3
 800eb56:	440b      	add	r3, r1
 800eb58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb60:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb64:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800eb66:	4b39      	ldr	r3, [pc, #228]	; (800ec4c <UTIL_SEQ_Run+0x1a4>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb70:	43db      	mvns	r3, r3
 800eb72:	461a      	mov	r2, r3
 800eb74:	4b36      	ldr	r3, [pc, #216]	; (800ec50 <UTIL_SEQ_Run+0x1a8>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	4a35      	ldr	r2, [pc, #212]	; (800ec50 <UTIL_SEQ_Run+0x1a8>)
 800eb7c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800eb7e:	2302      	movs	r3, #2
 800eb80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb82:	e013      	b.n	800ebac <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	3b01      	subs	r3, #1
 800eb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb8a:	3a01      	subs	r2, #1
 800eb8c:	492d      	ldr	r1, [pc, #180]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eb8e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800eb92:	492e      	ldr	r1, [pc, #184]	; (800ec4c <UTIL_SEQ_Run+0x1a4>)
 800eb94:	6809      	ldr	r1, [r1, #0]
 800eb96:	2001      	movs	r0, #1
 800eb98:	fa00 f101 	lsl.w	r1, r0, r1
 800eb9c:	43c9      	mvns	r1, r1
 800eb9e:	400a      	ands	r2, r1
 800eba0:	4928      	ldr	r1, [pc, #160]	; (800ec44 <UTIL_SEQ_Run+0x19c>)
 800eba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1e8      	bne.n	800eb84 <UTIL_SEQ_Run+0xdc>
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ebbc:	4b23      	ldr	r3, [pc, #140]	; (800ec4c <UTIL_SEQ_Run+0x1a4>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a24      	ldr	r2, [pc, #144]	; (800ec54 <UTIL_SEQ_Run+0x1ac>)
 800ebc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebc6:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800ebc8:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <UTIL_SEQ_Run+0x1a8>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	4b1e      	ldr	r3, [pc, #120]	; (800ec48 <UTIL_SEQ_Run+0x1a0>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	401a      	ands	r2, r3
 800ebd2:	4b1b      	ldr	r3, [pc, #108]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4013      	ands	r3, r2
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d007      	beq.n	800ebec <UTIL_SEQ_Run+0x144>
 800ebdc:	4b1e      	ldr	r3, [pc, #120]	; (800ec58 <UTIL_SEQ_Run+0x1b0>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	4b1e      	ldr	r3, [pc, #120]	; (800ec5c <UTIL_SEQ_Run+0x1b4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f43f af6c 	beq.w	800eac4 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800ebec:	f000 f910 	bl	800ee10 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebf0:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf4:	613b      	str	r3, [r7, #16]
  return(result);
 800ebf6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ebf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebfa:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800ebfc:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <UTIL_SEQ_Run+0x1a8>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <UTIL_SEQ_Run+0x1a0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	401a      	ands	r2, r3
 800ec06:	4b0e      	ldr	r3, [pc, #56]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d108      	bne.n	800ec22 <UTIL_SEQ_Run+0x17a>
 800ec10:	4b11      	ldr	r3, [pc, #68]	; (800ec58 <UTIL_SEQ_Run+0x1b0>)
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	4b11      	ldr	r3, [pc, #68]	; (800ec5c <UTIL_SEQ_Run+0x1b4>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4013      	ands	r3, r2
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d101      	bne.n	800ec22 <UTIL_SEQ_Run+0x17a>
  {
    UTIL_SEQ_Idle( );
 800ec1e:	f7f1 fd14 	bl	800064a <UTIL_SEQ_Idle>
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800ec2c:	f000 f8f7 	bl	800ee1e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ec30:	4a03      	ldr	r2, [pc, #12]	; (800ec40 <UTIL_SEQ_Run+0x198>)
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	6013      	str	r3, [r2, #0]

  return;
 800ec36:	bf00      	nop
}
 800ec38:	3730      	adds	r7, #48	; 0x30
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2000017c 	.word	0x2000017c
 800ec44:	200005ac 	.word	0x200005ac
 800ec48:	20000178 	.word	0x20000178
 800ec4c:	20000528 	.word	0x20000528
 800ec50:	2000051c 	.word	0x2000051c
 800ec54:	2000052c 	.word	0x2000052c
 800ec58:	20000520 	.word	0x20000520
 800ec5c:	20000524 	.word	0x20000524

0800ec60 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b088      	sub	sp, #32
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec70:	617b      	str	r3, [r7, #20]
  return(result);
 800ec72:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ec74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec76:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f000 f8d7 	bl	800ee2c <bit_position>
 800ec7e:	4601      	mov	r1, r0
 800ec80:	4a06      	ldr	r2, [pc, #24]	; (800ec9c <UTIL_SEQ_RegTask+0x3c>)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ec92:	bf00      	nop
}
 800ec94:	3720      	adds	r7, #32
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	2000052c 	.word	0x2000052c

0800eca0 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ecae:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ecb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecb4:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800ecb6:	4b0d      	ldr	r3, [pc, #52]	; (800ecec <UTIL_SEQ_SetTask+0x4c>)
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	4a0b      	ldr	r2, [pc, #44]	; (800ecec <UTIL_SEQ_SetTask+0x4c>)
 800ecc0:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800ecc2:	4a0b      	ldr	r2, [pc, #44]	; (800ecf0 <UTIL_SEQ_SetTask+0x50>)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	431a      	orrs	r2, r3
 800ecce:	4908      	ldr	r1, [pc, #32]	; (800ecf0 <UTIL_SEQ_SetTask+0x50>)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ece0:	bf00      	nop
}
 800ece2:	371c      	adds	r7, #28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	2000051c 	.word	0x2000051c
 800ecf0:	200005ac 	.word	0x200005ac

0800ecf4 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ed00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed02:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed06:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	43da      	mvns	r2, r3
 800ed0c:	4b07      	ldr	r3, [pc, #28]	; (800ed2c <UTIL_SEQ_PauseTask+0x38>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4013      	ands	r3, r2
 800ed12:	4a06      	ldr	r2, [pc, #24]	; (800ed2c <UTIL_SEQ_PauseTask+0x38>)
 800ed14:	6013      	str	r3, [r2, #0]
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed20:	bf00      	nop
}
 800ed22:	371c      	adds	r7, #28
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	20000178 	.word	0x20000178

0800ed30 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800ed30:	b480      	push	{r7}
 800ed32:	b087      	sub	sp, #28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed38:	f3ef 8310 	mrs	r3, PRIMASK
 800ed3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed42:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800ed44:	4b08      	ldr	r3, [pc, #32]	; (800ed68 <UTIL_SEQ_ResumeTask+0x38>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	4a06      	ldr	r2, [pc, #24]	; (800ed68 <UTIL_SEQ_ResumeTask+0x38>)
 800ed4e:	6013      	str	r3, [r2, #0]
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed5a:	bf00      	nop
}
 800ed5c:	371c      	adds	r7, #28
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20000178 	.word	0x20000178

0800ed6c <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed74:	f3ef 8310 	mrs	r3, PRIMASK
 800ed78:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed7e:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800ed80:	4b08      	ldr	r3, [pc, #32]	; (800eda4 <UTIL_SEQ_SetEvt+0x38>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	4a06      	ldr	r2, [pc, #24]	; (800eda4 <UTIL_SEQ_SetEvt+0x38>)
 800ed8a:	6013      	str	r3, [r2, #0]
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed96:	bf00      	nop
}
 800ed98:	371c      	adds	r7, #28
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	20000520 	.word	0x20000520

0800eda8 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800edb0:	4b14      	ldr	r3, [pc, #80]	; (800ee04 <UTIL_SEQ_WaitEvt+0x5c>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2201      	movs	r2, #1
 800edb6:	fa02 f303 	lsl.w	r3, r2, r3
 800edba:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800edbc:	4b12      	ldr	r3, [pc, #72]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800edc2:	4a11      	ldr	r2, [pc, #68]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800edc8:	e005      	b.n	800edd6 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800edca:	4b0f      	ldr	r3, [pc, #60]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4619      	mov	r1, r3
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7f1 fc41 	bl	8000658 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800edd6:	4b0d      	ldr	r3, [pc, #52]	; (800ee0c <UTIL_SEQ_WaitEvt+0x64>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	4b0b      	ldr	r3, [pc, #44]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4013      	ands	r3, r2
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d0f2      	beq.n	800edca <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800ede4:	4b08      	ldr	r3, [pc, #32]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	43da      	mvns	r2, r3
 800edea:	4b08      	ldr	r3, [pc, #32]	; (800ee0c <UTIL_SEQ_WaitEvt+0x64>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4013      	ands	r3, r2
 800edf0:	4a06      	ldr	r2, [pc, #24]	; (800ee0c <UTIL_SEQ_WaitEvt+0x64>)
 800edf2:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800edf4:	4a04      	ldr	r2, [pc, #16]	; (800ee08 <UTIL_SEQ_WaitEvt+0x60>)
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	6013      	str	r3, [r2, #0]

  return;
 800edfa:	bf00      	nop
}
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	20000528 	.word	0x20000528
 800ee08:	20000524 	.word	0x20000524
 800ee0c:	20000520 	.word	0x20000520

0800ee10 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ee14:	bf00      	nop
}
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr

0800ee1e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ee1e:	b480      	push	{r7}
 800ee20:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ee22:	bf00      	nop
}
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	0c1b      	lsrs	r3, r3, #16
 800ee3c:	041b      	lsls	r3, r3, #16
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d104      	bne.n	800ee4c <bit_position+0x20>
 800ee42:	2310      	movs	r3, #16
 800ee44:	60fb      	str	r3, [r7, #12]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	041b      	lsls	r3, r3, #16
 800ee4a:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <bit_position+0x36>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	021b      	lsls	r3, r3, #8
 800ee60:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d105      	bne.n	800ee78 <bit_position+0x4c>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3304      	adds	r3, #4
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	011b      	lsls	r3, r3, #4
 800ee76:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	0f1b      	lsrs	r3, r3, #28
 800ee7c:	4a07      	ldr	r2, [pc, #28]	; (800ee9c <bit_position+0x70>)
 800ee7e:	5cd3      	ldrb	r3, [r2, r3]
 800ee80:	461a      	mov	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	4413      	add	r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f1c3 031f 	rsb	r3, r3, #31
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3714      	adds	r7, #20
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	0800f0dc 	.word	0x0800f0dc

0800eea0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800eea0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eea2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eea4:	3304      	adds	r3, #4

0800eea6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eea6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eea8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800eeaa:	d3f9      	bcc.n	800eea0 <CopyDataInit>
  bx lr
 800eeac:	4770      	bx	lr

0800eeae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800eeae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800eeb0:	3004      	adds	r0, #4

0800eeb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800eeb2:	4288      	cmp	r0, r1
  bcc FillZerobss
 800eeb4:	d3fb      	bcc.n	800eeae <FillZerobss>
  bx lr
 800eeb6:	4770      	bx	lr

0800eeb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800eeb8:	480c      	ldr	r0, [pc, #48]	; (800eeec <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800eeba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800eebc:	480c      	ldr	r0, [pc, #48]	; (800eef0 <LoopForever+0x8>)
 800eebe:	490d      	ldr	r1, [pc, #52]	; (800eef4 <LoopForever+0xc>)
 800eec0:	4a0d      	ldr	r2, [pc, #52]	; (800eef8 <LoopForever+0x10>)
 800eec2:	2300      	movs	r3, #0
 800eec4:	f7ff ffef 	bl	800eea6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800eec8:	480c      	ldr	r0, [pc, #48]	; (800eefc <LoopForever+0x14>)
 800eeca:	490d      	ldr	r1, [pc, #52]	; (800ef00 <LoopForever+0x18>)
 800eecc:	2300      	movs	r3, #0
 800eece:	f7ff fff0 	bl	800eeb2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800eed2:	480c      	ldr	r0, [pc, #48]	; (800ef04 <LoopForever+0x1c>)
 800eed4:	490c      	ldr	r1, [pc, #48]	; (800ef08 <LoopForever+0x20>)
 800eed6:	2300      	movs	r3, #0
 800eed8:	f7ff ffeb 	bl	800eeb2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800eedc:	f7f2 feb2 	bl	8001c44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800eee0:	f000 f816 	bl	800ef10 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800eee4:	f7f2 fc40 	bl	8001768 <main>

0800eee8 <LoopForever>:

LoopForever:
  b LoopForever
 800eee8:	e7fe      	b.n	800eee8 <LoopForever>
 800eeea:	0000      	.short	0x0000
  ldr   r0, =_estack
 800eeec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800eef0:	20000004 	.word	0x20000004
 800eef4:	20000180 	.word	0x20000180
 800eef8:	0800f0fc 	.word	0x0800f0fc
  INIT_BSS _sbss, _ebss
 800eefc:	20000328 	.word	0x20000328
 800ef00:	200006d4 	.word	0x200006d4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800ef04:	200301c4 	.word	0x200301c4
 800ef08:	20030a44 	.word	0x20030a44

0800ef0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ef0c:	e7fe      	b.n	800ef0c <ADC1_IRQHandler>
	...

0800ef10 <__libc_init_array>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	4e0d      	ldr	r6, [pc, #52]	; (800ef48 <__libc_init_array+0x38>)
 800ef14:	4c0d      	ldr	r4, [pc, #52]	; (800ef4c <__libc_init_array+0x3c>)
 800ef16:	1ba4      	subs	r4, r4, r6
 800ef18:	10a4      	asrs	r4, r4, #2
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	42a5      	cmp	r5, r4
 800ef1e:	d109      	bne.n	800ef34 <__libc_init_array+0x24>
 800ef20:	4e0b      	ldr	r6, [pc, #44]	; (800ef50 <__libc_init_array+0x40>)
 800ef22:	4c0c      	ldr	r4, [pc, #48]	; (800ef54 <__libc_init_array+0x44>)
 800ef24:	f000 f82c 	bl	800ef80 <_init>
 800ef28:	1ba4      	subs	r4, r4, r6
 800ef2a:	10a4      	asrs	r4, r4, #2
 800ef2c:	2500      	movs	r5, #0
 800ef2e:	42a5      	cmp	r5, r4
 800ef30:	d105      	bne.n	800ef3e <__libc_init_array+0x2e>
 800ef32:	bd70      	pop	{r4, r5, r6, pc}
 800ef34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef38:	4798      	blx	r3
 800ef3a:	3501      	adds	r5, #1
 800ef3c:	e7ee      	b.n	800ef1c <__libc_init_array+0xc>
 800ef3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef42:	4798      	blx	r3
 800ef44:	3501      	adds	r5, #1
 800ef46:	e7f2      	b.n	800ef2e <__libc_init_array+0x1e>
 800ef48:	0800f0f4 	.word	0x0800f0f4
 800ef4c:	0800f0f4 	.word	0x0800f0f4
 800ef50:	0800f0f4 	.word	0x0800f0f4
 800ef54:	0800f0f8 	.word	0x0800f0f8

0800ef58 <memcpy>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	1e43      	subs	r3, r0, #1
 800ef5c:	440a      	add	r2, r1
 800ef5e:	4291      	cmp	r1, r2
 800ef60:	d100      	bne.n	800ef64 <memcpy+0xc>
 800ef62:	bd10      	pop	{r4, pc}
 800ef64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef6c:	e7f7      	b.n	800ef5e <memcpy+0x6>

0800ef6e <memset>:
 800ef6e:	4402      	add	r2, r0
 800ef70:	4603      	mov	r3, r0
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d100      	bne.n	800ef78 <memset+0xa>
 800ef76:	4770      	bx	lr
 800ef78:	f803 1b01 	strb.w	r1, [r3], #1
 800ef7c:	e7f9      	b.n	800ef72 <memset+0x4>
	...

0800ef80 <_init>:
 800ef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef82:	bf00      	nop
 800ef84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef86:	bc08      	pop	{r3}
 800ef88:	469e      	mov	lr, r3
 800ef8a:	4770      	bx	lr

0800ef8c <_fini>:
 800ef8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8e:	bf00      	nop
 800ef90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef92:	bc08      	pop	{r3}
 800ef94:	469e      	mov	lr, r3
 800ef96:	4770      	bx	lr
